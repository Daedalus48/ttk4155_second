
ping_pong_node_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800200  00000ddc  00000e70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002d0  008002d0  00000f40  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001029  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076b  00000000  00000000  000020c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000888  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  000030b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ce  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000075e  00000000  00000000  00003716  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003e74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ed       	ldi	r30, 0xDC	; 220
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 3d       	cpi	r26, 0xD0	; 208
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 ed       	ldi	r26, 0xD0	; 208
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 3d       	cpi	r26, 0xDA	; 218
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	fe d0       	rcall	.+508    	; 0x31c <main>
 120:	5b c6       	rjmp	.+3254   	; 0xdd8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <can_init>:


// "Main" for using can:

void can_init()
{
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	2a 97       	sbiw	r28, 0x0a	; 10
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
	mcp2515_init(); //Init
 13a:	58 d1       	rcall	.+688    	; 0x3ec <mcp2515_init>
	
	
	mcp2515_write(MCP_RXB0CTRL, MCP_RXBnCTRL_NOFILTER_bm, 1); // Set to no filter
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	60 e6       	ldi	r22, 0x60	; 96
 140:	80 e6       	ldi	r24, 0x60	; 96
 142:	76 d1       	rcall	.+748    	; 0x430 <mcp2515_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	9f e8       	ldi	r25, 0x8F	; 143
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <can_init+0x24>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <can_init+0x2a>
 14e:	00 00       	nop
	_delay_ms(30);
	
	mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 1); // Enable Interrupt when message is received
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	8b e2       	ldi	r24, 0x2B	; 43
 156:	92 d1       	rcall	.+804    	; 0x47c <mcp2515_bit_modify>
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	9f e8       	ldi	r25, 0x8F	; 143
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <can_init+0x38>
 160:	00 c0       	rjmp	.+0      	; 0x162 <can_init+0x3e>
 162:	00 00       	nop
	_delay_ms(30);

	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);//0b11100000 instead of MODE_MASK
 164:	40 e4       	ldi	r20, 0x40	; 64
 166:	60 ee       	ldi	r22, 0xE0	; 224
 168:	8f e0       	ldi	r24, 0x0F	; 15
 16a:	88 d1       	rcall	.+784    	; 0x47c <mcp2515_bit_modify>
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	9f e8       	ldi	r25, 0x8F	; 143
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <can_init+0x4c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <can_init+0x52>
 176:	00 00       	nop
	_delay_ms(30);
	
	uint8_t mode_bits;
	uint8_t data[MAX_CAN_LENGTH];
	mcp2515_read(MCP_CANSTAT, data, MAX_CAN_LENGTH);
 178:	4a e0       	ldi	r20, 0x0A	; 10
 17a:	be 01       	movw	r22, r28
 17c:	6f 5f       	subi	r22, 0xFF	; 255
 17e:	7f 4f       	sbci	r23, 0xFF	; 255
 180:	8e e0       	ldi	r24, 0x0E	; 14
 182:	37 d1       	rcall	.+622    	; 0x3f2 <mcp2515_read>
	uint8_t val = data[0];
 184:	19 81       	ldd	r17, Y+1	; 0x01
	printf("val:  %d \n\r \n\r",data[0]);
 186:	1f 92       	push	r1
 188:	1f 93       	push	r17
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	9f 93       	push	r25
 190:	8f 93       	push	r24
 192:	35 d2       	rcall	.+1130   	; 0x5fe <printf>
	mode_bits = (val & MODE_MASK);
 194:	10 7e       	andi	r17, 0xE0	; 224
	if(mode_bits != MODE_LOOPBACK){
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	10 34       	cpi	r17, 0x40	; 64
 1a0:	99 f0       	breq	.+38     	; 0x1c8 <can_init+0xa4>
		
		printf("MCP2515 is NOT in correct mode after reset! Its config bits are %x\n", mode_bits);
 1a2:	1f 92       	push	r1
 1a4:	1f 93       	push	r17
 1a6:	85 e1       	ldi	r24, 0x15	; 21
 1a8:	92 e0       	ldi	r25, 0x02	; 2
 1aa:	9f 93       	push	r25
 1ac:	8f 93       	push	r24
 1ae:	27 d2       	rcall	.+1102   	; 0x5fe <printf>
		printf("\n\r");
 1b0:	8c ec       	ldi	r24, 0xCC	; 204
 1b2:	92 e0       	ldi	r25, 0x02	; 2
 1b4:	9f 93       	push	r25
 1b6:	8f 93       	push	r24
 1b8:	22 d2       	rcall	.+1092   	; 0x5fe <printf>
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	07 c0       	rjmp	.+14     	; 0x1d6 <can_init+0xb2>
	}
	else
		printf("in mode loopback \n\r");
 1c8:	89 e5       	ldi	r24, 0x59	; 89
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	9f 93       	push	r25
 1ce:	8f 93       	push	r24
 1d0:	16 d2       	rcall	.+1068   	; 0x5fe <printf>
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
	
}
 1d6:	2a 96       	adiw	r28, 0x0a	; 10
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	08 95       	ret

000001ea <can_message_send>:

void can_message_send(struct can_message* msg)
{
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	8c 01       	movw	r16, r24
	mcp2515_write(MCP_TXB0DLC, msg->length, 1);
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	fc 01       	movw	r30, r24
 1fe:	62 81       	ldd	r22, Z+2	; 0x02
 200:	85 e3       	ldi	r24, 0x35	; 53
 202:	16 d1       	rcall	.+556    	; 0x430 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	f8 01       	movw	r30, r16
 208:	60 81       	ld	r22, Z
 20a:	81 e3       	ldi	r24, 0x31	; 49
 20c:	11 d1       	rcall	.+546    	; 0x430 <mcp2515_write>
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
 20e:	f8 01       	movw	r30, r16
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	88 23       	and	r24, r24
 214:	e9 f0       	breq	.+58     	; 0x250 <can_message_send+0x66>
 216:	d1 2c       	mov	r13, r1
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
		printf("can message send %d", msg->data[i]);
 218:	0f 2e       	mov	r0, r31
 21a:	fd e6       	ldi	r31, 0x6D	; 109
 21c:	ef 2e       	mov	r14, r31
 21e:	f2 e0       	ldi	r31, 0x02	; 2
 220:	ff 2e       	mov	r15, r31
 222:	f0 2d       	mov	r31, r0
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
 224:	e8 01       	movw	r28, r16
 226:	cd 0d       	add	r28, r13
 228:	d1 1d       	adc	r29, r1
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	6b 81       	ldd	r22, Y+3	; 0x03
 22e:	86 e3       	ldi	r24, 0x36	; 54
 230:	ff d0       	rcall	.+510    	; 0x430 <mcp2515_write>
		printf("can message send %d", msg->data[i]);
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	1f 92       	push	r1
 236:	8f 93       	push	r24
 238:	ff 92       	push	r15
 23a:	ef 92       	push	r14
 23c:	e0 d1       	rcall	.+960    	; 0x5fe <printf>
{
	mcp2515_write(MCP_TXB0DLC, msg->length, 1);
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
 23e:	d3 94       	inc	r13
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	f8 01       	movw	r30, r16
 24a:	82 81       	ldd	r24, Z+2	; 0x02
 24c:	d8 16       	cp	r13, r24
 24e:	50 f3       	brcs	.-44     	; 0x224 <can_message_send+0x3a>
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
		printf("can message send %d", msg->data[i]);
	}
	printf("\n\r");
 250:	8c ec       	ldi	r24, 0xCC	; 204
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	9f 93       	push	r25
 256:	8f 93       	push	r24
 258:	d2 d1       	rcall	.+932    	; 0x5fe <printf>
	mcp2515_request(MCP_RTS_TX0);
 25a:	81 e8       	ldi	r24, 0x81	; 129
 25c:	ff d0       	rcall	.+510    	; 0x45c <mcp2515_request>
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
	//Do something...
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	08 95       	ret

00000272 <can_data_receive>:
{
	
}
*/
void can_data_receive(struct can_message* msg)
{
 272:	df 92       	push	r13
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	2a 97       	sbiw	r28, 0x0a	; 10
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	8c 01       	movw	r16, r24
	uint8_t i;
	
	uint8_t result[MAX_CAN_LENGTH];
	
	for (i = 0; i < msg->length; i++)
 292:	fc 01       	movw	r30, r24
 294:	82 81       	ldd	r24, Z+2	; 0x02
 296:	88 23       	and	r24, r24
 298:	41 f1       	breq	.+80     	; 0x2ea <can_data_receive+0x78>
 29a:	d1 2c       	mov	r13, r1
	{
		mcp2515_read(MCP_RXB0D(0), result, 1);
		msg->data[i] = result[i];
		printf("can messsage received %d", msg->data[i]);
 29c:	0f 2e       	mov	r0, r31
 29e:	f1 e8       	ldi	r31, 0x81	; 129
 2a0:	ef 2e       	mov	r14, r31
 2a2:	f2 e0       	ldi	r31, 0x02	; 2
 2a4:	ff 2e       	mov	r15, r31
 2a6:	f0 2d       	mov	r31, r0
	
	uint8_t result[MAX_CAN_LENGTH];
	
	for (i = 0; i < msg->length; i++)
	{
		mcp2515_read(MCP_RXB0D(0), result, 1);
 2a8:	41 e0       	ldi	r20, 0x01	; 1
 2aa:	be 01       	movw	r22, r28
 2ac:	6f 5f       	subi	r22, 0xFF	; 255
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	86 e6       	ldi	r24, 0x66	; 102
 2b2:	9f d0       	rcall	.+318    	; 0x3f2 <mcp2515_read>
		msg->data[i] = result[i];
 2b4:	2d 2d       	mov	r18, r13
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	e1 e0       	ldi	r30, 0x01	; 1
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	ec 0f       	add	r30, r28
 2be:	fd 1f       	adc	r31, r29
 2c0:	e2 0f       	add	r30, r18
 2c2:	f3 1f       	adc	r31, r19
 2c4:	80 81       	ld	r24, Z
 2c6:	f8 01       	movw	r30, r16
 2c8:	e2 0f       	add	r30, r18
 2ca:	f3 1f       	adc	r31, r19
 2cc:	83 83       	std	Z+3, r24	; 0x03
		printf("can messsage received %d", msg->data[i]);
 2ce:	1f 92       	push	r1
 2d0:	8f 93       	push	r24
 2d2:	ff 92       	push	r15
 2d4:	ef 92       	push	r14
 2d6:	93 d1       	rcall	.+806    	; 0x5fe <printf>
{
	uint8_t i;
	
	uint8_t result[MAX_CAN_LENGTH];
	
	for (i = 0; i < msg->length; i++)
 2d8:	d3 94       	inc	r13
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	f8 01       	movw	r30, r16
 2e4:	82 81       	ldd	r24, Z+2	; 0x02
 2e6:	d8 16       	cp	r13, r24
 2e8:	f8 f2       	brcs	.-66     	; 0x2a8 <can_data_receive+0x36>
	{
		mcp2515_read(MCP_RXB0D(0), result, 1);
		msg->data[i] = result[i];
		printf("can messsage received %d", msg->data[i]);
	}
	printf("\n\r");
 2ea:	8c ec       	ldi	r24, 0xCC	; 204
 2ec:	92 e0       	ldi	r25, 0x02	; 2
 2ee:	9f 93       	push	r25
 2f0:	8f 93       	push	r24
 2f2:	85 d1       	rcall	.+778    	; 0x5fe <printf>
	
	mcp2515_bit_modify(MCP_CANINTF, 0x01, 0x00);
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	8c e2       	ldi	r24, 0x2C	; 44
 2fa:	c0 d0       	rcall	.+384    	; 0x47c <mcp2515_bit_modify>
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
}
 300:	2a 96       	adiw	r28, 0x0a	; 10
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	ff 90       	pop	r15
 316:	ef 90       	pop	r14
 318:	df 90       	pop	r13
 31a:	08 95       	ret

0000031c <main>:
#include "usart.h"
#include "can_controller.h"
#include "spi.h"


int main(void){
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	6a 97       	sbiw	r28, 0x1a	; 26
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MYUBRR);
 330:	87 e6       	ldi	r24, 0x67	; 103
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0a d1       	rcall	.+532    	; 0x54a <USART_Init>
	
	can_init();
 336:	f6 de       	rcall	.-532    	; 0x124 <can_init>
	
	struct can_message message;
	message.id = 3;
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	9a 83       	std	Y+2, r25	; 0x02
 33e:	89 83       	std	Y+1, r24	; 0x01
	message.length = 1;
 340:	31 e0       	ldi	r19, 0x01	; 1
 342:	3b 83       	std	Y+3, r19	; 0x03
	message.data[0] = (uint8_t) 'c';
 344:	23 e6       	ldi	r18, 0x63	; 99
 346:	2c 83       	std	Y+4, r18	; 0x04
	
	
	struct can_message message2;
	message2.id = 3;
 348:	9f 87       	std	Y+15, r25	; 0x0f
 34a:	8e 87       	std	Y+14, r24	; 0x0e
	message2.length = 1;
 34c:	38 8b       	std	Y+16, r19	; 0x10
	
	
	printf("In the main send %c \n\r", message.data[0]);
 34e:	1f 92       	push	r1
 350:	2f 93       	push	r18
 352:	8a e9       	ldi	r24, 0x9A	; 154
 354:	92 e0       	ldi	r25, 0x02	; 2
 356:	9f 93       	push	r25
 358:	8f 93       	push	r24
 35a:	51 d1       	rcall	.+674    	; 0x5fe <printf>
	
	can_message_send(&message);
 35c:	ce 01       	movw	r24, r28
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	44 df       	rcall	.-376    	; 0x1ea <can_message_send>
 362:	83 ed       	ldi	r24, 0xD3	; 211
 364:	90 e3       	ldi	r25, 0x30	; 48
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <main+0x4a>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x50>
 36c:	00 00       	nop
	_delay_ms(50);
	can_data_receive(&message2);
 36e:	ce 01       	movw	r24, r28
 370:	0e 96       	adiw	r24, 0x0e	; 14
 372:	7f df       	rcall	.-258    	; 0x272 <can_data_receive>
	
	
	printf("In the main received %c \n\r \n\r", message2.data[0]);
 374:	89 89       	ldd	r24, Y+17	; 0x11
 376:	1f 92       	push	r1
 378:	8f 93       	push	r24
 37a:	81 eb       	ldi	r24, 0xB1	; 177
 37c:	92 e0       	ldi	r25, 0x02	; 2
 37e:	9f 93       	push	r25
 380:	8f 93       	push	r24
 382:	3d d1       	rcall	.+634    	; 0x5fe <printf>
	
	message.data[0] = (uint8_t) 'g';
 384:	87 e6       	ldi	r24, 0x67	; 103
 386:	8c 83       	std	Y+4, r24	; 0x04
	
	printf("In the main send %c \n\r", message.data[0]);
 388:	1f 92       	push	r1
 38a:	8f 93       	push	r24
 38c:	8a e9       	ldi	r24, 0x9A	; 154
 38e:	92 e0       	ldi	r25, 0x02	; 2
 390:	9f 93       	push	r25
 392:	8f 93       	push	r24
 394:	34 d1       	rcall	.+616    	; 0x5fe <printf>
	
	can_message_send(&message);
 396:	ce 01       	movw	r24, r28
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	27 df       	rcall	.-434    	; 0x1ea <can_message_send>
 39c:	83 ed       	ldi	r24, 0xD3	; 211
 39e:	90 e3       	ldi	r25, 0x30	; 48
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <main+0x84>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <main+0x8a>
 3a6:	00 00       	nop
	_delay_ms(50);
	can_data_receive(&message2);
 3a8:	ce 01       	movw	r24, r28
 3aa:	0e 96       	adiw	r24, 0x0e	; 14
 3ac:	62 df       	rcall	.-316    	; 0x272 <can_data_receive>
	
	
	printf("In the main received %c \n\r \n\r", message2.data[0]);
 3ae:	89 89       	ldd	r24, Y+17	; 0x11
 3b0:	1f 92       	push	r1
 3b2:	8f 93       	push	r24
 3b4:	81 eb       	ldi	r24, 0xB1	; 177
 3b6:	92 e0       	ldi	r25, 0x02	; 2
 3b8:	9f 93       	push	r25
 3ba:	8f 93       	push	r24
 3bc:	20 d1       	rcall	.+576    	; 0x5fe <printf>
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	de bf       	out	0x3e, r29	; 62
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	cd bf       	out	0x3d, r28	; 61
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <main+0xac>

000003ca <mcp2515_reset>:
	 spi_init();
	 mcp2515_reset();
}

void mcp2515_reset()
{
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	1f 92       	push	r1
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PB7); // Select CAN-controller
 3d4:	2f 98       	cbi	0x05, 7	; 5
	//SPSR &= ~(1 << SPIF);	
	
	uint8_t reset[] = {MCP_RESET};
 3d6:	80 ec       	ldi	r24, 0xC0	; 192
 3d8:	89 83       	std	Y+1, r24	; 0x01
	spi_write(reset, 1);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	90 d0       	rcall	.+288    	; 0x502 <spi_write>
	
	PORTB |= (1<<PB7); // DeselectCAN-controller
 3e2:	2f 9a       	sbi	0x05, 7	; 5
}
 3e4:	0f 90       	pop	r0
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <mcp2515_init>:
#include "MCP2515_driver.h"


void mcp2515_init() 
{
	 spi_init();
 3ec:	5f d0       	rcall	.+190    	; 0x4ac <spi_init>
	 mcp2515_reset();
 3ee:	ed cf       	rjmp	.-38     	; 0x3ca <mcp2515_reset>
 3f0:	08 95       	ret

000003f2 <mcp2515_read>:
	PORTB |= (1<<PB7); // DeselectCAN-controller
}


void mcp2515_read(uint8_t address, uint8_t result[MAX_CAN_LENGTH], uint8_t data_size)
{	
 3f2:	ff 92       	push	r15
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	1f 92       	push	r1
 3fe:	1f 92       	push	r1
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
 404:	8b 01       	movw	r16, r22
 406:	f4 2e       	mov	r15, r20
	PORTB &= ~(1<<PB7); // Select CAN-controller pb7  PINB0
 408:	2f 98       	cbi	0x05, 7	; 5
	//SPSR &= ~(1 << SPIF); 
	
	uint8_t write[] = {MCP_READ, address};
 40a:	93 e0       	ldi	r25, 0x03	; 3
 40c:	99 83       	std	Y+1, r25	; 0x01
 40e:	8a 83       	std	Y+2, r24	; 0x02
	spi_write(write, 2); // Send read instruction
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	ce 01       	movw	r24, r28
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	75 d0       	rcall	.+234    	; 0x502 <spi_write>
	
	spi_read(result, data_size); // Readresult
 418:	6f 2d       	mov	r22, r15
 41a:	c8 01       	movw	r24, r16
 41c:	4c d0       	rcall	.+152    	; 0x4b6 <spi_read>
	
	PORTB |= (1<<PB7); // DeselectCAN-controller
 41e:	2f 9a       	sbi	0x05, 7	; 5
	
	
}
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	ff 90       	pop	r15
 42e:	08 95       	ret

00000430 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data, uint8_t data_size)
{
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	00 d0       	rcall	.+0      	; 0x436 <mcp2515_write+0x6>
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PB7); // Select CAN-controller
 43a:	2f 98       	cbi	0x05, 7	; 5
	//SPSR &= ~(1 << SPIF);
	
	uint8_t write[] = {MCP_WRITE, address, data};
 43c:	92 e0       	ldi	r25, 0x02	; 2
 43e:	99 83       	std	Y+1, r25	; 0x01
 440:	8a 83       	std	Y+2, r24	; 0x02
 442:	6b 83       	std	Y+3, r22	; 0x03
	spi_write(write, data_size + 2); // Send read instruction
 444:	62 e0       	ldi	r22, 0x02	; 2
 446:	64 0f       	add	r22, r20
 448:	ce 01       	movw	r24, r28
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	5a d0       	rcall	.+180    	; 0x502 <spi_write>
	
	PORTB |= (1<<PB7); // DeselectCAN-controller
 44e:	2f 9a       	sbi	0x05, 7	; 5
		
}
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <mcp2515_request>:

void mcp2515_request(uint8_t rqs)
{
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	1f 92       	push	r1
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PB7); // Select CAN-controller
 466:	2f 98       	cbi	0x05, 7	; 5
	//SPSR &= ~(1 << SPIF);		
		
	uint8_t cmd[] = {rqs};
 468:	89 83       	std	Y+1, r24	; 0x01
	spi_write(cmd, 1);		
 46a:	61 e0       	ldi	r22, 0x01	; 1
 46c:	ce 01       	movw	r24, r28
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	48 d0       	rcall	.+144    	; 0x502 <spi_write>
	
	PORTB |= (1<<PB7); // Deselect CAN-controller
 472:	2f 9a       	sbi	0x05, 7	; 5
}
 474:	0f 90       	pop	r0
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <mcp2515_bit_modify>:

// Modify bits in the register / See datasheet 12.10
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) 
{
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	00 d0       	rcall	.+0      	; 0x482 <mcp2515_bit_modify+0x6>
 482:	1f 92       	push	r1
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PB7); // Select CAN-controller
 488:	2f 98       	cbi	0x05, 7	; 5
	//SPSR &= ~(1 << SPIF);	
	
	uint8_t bit_list[] = {MCP_BITMOD, address, mask, data};
 48a:	95 e0       	ldi	r25, 0x05	; 5
 48c:	99 83       	std	Y+1, r25	; 0x01
 48e:	8a 83       	std	Y+2, r24	; 0x02
 490:	6b 83       	std	Y+3, r22	; 0x03
 492:	4c 83       	std	Y+4, r20	; 0x04
	spi_write(bit_list, 4);	
 494:	64 e0       	ldi	r22, 0x04	; 4
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	33 d0       	rcall	.+102    	; 0x502 <spi_write>
	
	PORTB |= (1<<PB7); //Deselect CAN-controller
 49c:	2f 9a       	sbi	0x05, 7	; 5

}
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <spi_init>:
#include "spi.h"

void spi_init() 
{
	/* Set MOSI and SCK and CS output, all others input */
	DDR_SPI = (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_SS);
 4ac:	86 e8       	ldi	r24, 0x86	; 134
 4ae:	84 b9       	out	0x04, r24	; 4
	/* Enable interrupt */

	// SPCR = 1<<SPIE;

	/* Enable SPI, Master, set clock rate fck/16 , SPI mode 0 by default*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);// | (1<<SPIE)
 4b0:	81 e5       	ldi	r24, 0x51	; 81
 4b2:	8c bd       	out	0x2c, r24	; 44
 4b4:	08 95       	ret

000004b6 <spi_read>:
}

void spi_read(uint8_t *receive_data, uint8_t data_length) 
{
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
 4be:	2a 97       	sbiw	r28, 0x0a	; 10
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
	uint8_t dummy_data[MAX_CAN_LENGTH];
	
	for (int i = 0; i < data_length; i++)
 4ca:	66 23       	and	r22, r22
 4cc:	89 f0       	breq	.+34     	; 0x4f0 <spi_read+0x3a>
 4ce:	fe 01       	movw	r30, r28
 4d0:	31 96       	adiw	r30, 0x01	; 1
 4d2:	a8 2f       	mov	r26, r24
 4d4:	b9 2f       	mov	r27, r25
 4d6:	cf 01       	movw	r24, r30
 4d8:	86 0f       	add	r24, r22
 4da:	91 1d       	adc	r25, r1
	{
		SPDR = dummy_data[i];
 4dc:	21 91       	ld	r18, Z+
 4de:	2e bd       	out	0x2e, r18	; 46
		while (!(SPSR & (1 << SPIF)));
 4e0:	0d b4       	in	r0, 0x2d	; 45
 4e2:	07 fe       	sbrs	r0, 7
 4e4:	fd cf       	rjmp	.-6      	; 0x4e0 <spi_read+0x2a>
		receive_data[i] = SPDR;
 4e6:	2e b5       	in	r18, 0x2e	; 46
 4e8:	2d 93       	st	X+, r18

void spi_read(uint8_t *receive_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	
	for (int i = 0; i < data_length; i++)
 4ea:	e8 17       	cp	r30, r24
 4ec:	f9 07       	cpc	r31, r25
 4ee:	b1 f7       	brne	.-20     	; 0x4dc <spi_read+0x26>
		SPDR = dummy_data[i];
		while (!(SPSR & (1 << SPIF)));
		receive_data[i] = SPDR;
	}
	
}
 4f0:	2a 96       	adiw	r28, 0x0a	; 10
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <spi_write>:

void spi_write(uint8_t *send_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	for (int i = 0; i < data_length; i++)
 502:	26 2f       	mov	r18, r22
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	12 16       	cp	r1, r18
 508:	13 06       	cpc	r1, r19
 50a:	74 f4       	brge	.+28     	; 0x528 <spi_write+0x26>
 50c:	e8 2f       	mov	r30, r24
 50e:	f9 2f       	mov	r31, r25
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	90 e0       	ldi	r25, 0x00	; 0
	{
		SPDR = send_data[i];
 514:	41 91       	ld	r20, Z+
 516:	4e bd       	out	0x2e, r20	; 46
		while (!(SPSR & (1 << SPIF)));
 518:	0d b4       	in	r0, 0x2d	; 45
 51a:	07 fe       	sbrs	r0, 7
 51c:	fd cf       	rjmp	.-6      	; 0x518 <spi_write+0x16>
		dummy_data[i] = SPDR;
 51e:	4e b5       	in	r20, 0x2e	; 46
}

void spi_write(uint8_t *send_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	for (int i = 0; i < data_length; i++)
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	82 17       	cp	r24, r18
 524:	93 07       	cpc	r25, r19
 526:	b4 f3       	brlt	.-20     	; 0x514 <spi_write+0x12>
 528:	08 95       	ret

0000052a <USART_Transmit>:
 52a:	e0 ec       	ldi	r30, 0xC0	; 192
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	90 81       	ld	r25, Z
 530:	95 ff       	sbrs	r25, 5
 532:	fd cf       	rjmp	.-6      	; 0x52e <USART_Transmit+0x4>
 534:	80 93 c6 00 	sts	0x00C6, r24
 538:	08 95       	ret

0000053a <USART_Receive>:
 53a:	e0 ec       	ldi	r30, 0xC0	; 192
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	88 23       	and	r24, r24
 542:	ec f3       	brlt	.-6      	; 0x53e <USART_Receive+0x4>
 544:	80 91 c6 00 	lds	r24, 0x00C6
 548:	08 95       	ret

0000054a <USART_Init>:
 54a:	90 93 c5 00 	sts	0x00C5, r25
 54e:	80 93 c4 00 	sts	0x00C4, r24
 552:	88 e1       	ldi	r24, 0x18	; 24
 554:	80 93 c1 00 	sts	0x00C1, r24
 558:	8e e0       	ldi	r24, 0x0E	; 14
 55a:	80 93 c2 00 	sts	0x00C2, r24
 55e:	6d e9       	ldi	r22, 0x9D	; 157
 560:	72 e0       	ldi	r23, 0x02	; 2
 562:	85 e9       	ldi	r24, 0x95	; 149
 564:	92 e0       	ldi	r25, 0x02	; 2
 566:	01 c0       	rjmp	.+2      	; 0x56a <fdevopen>
 568:	08 95       	ret

0000056a <fdevopen>:
 56a:	0f 93       	push	r16
 56c:	1f 93       	push	r17
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	ec 01       	movw	r28, r24
 574:	8b 01       	movw	r16, r22
 576:	00 97       	sbiw	r24, 0x00	; 0
 578:	31 f4       	brne	.+12     	; 0x586 <fdevopen+0x1c>
 57a:	61 15       	cp	r22, r1
 57c:	71 05       	cpc	r23, r1
 57e:	19 f4       	brne	.+6      	; 0x586 <fdevopen+0x1c>
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	37 c0       	rjmp	.+110    	; 0x5f4 <fdevopen+0x8a>
 586:	6e e0       	ldi	r22, 0x0E	; 14
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	36 d2       	rcall	.+1132   	; 0x9fc <calloc>
 590:	fc 01       	movw	r30, r24
 592:	00 97       	sbiw	r24, 0x00	; 0
 594:	a9 f3       	breq	.-22     	; 0x580 <fdevopen+0x16>
 596:	80 e8       	ldi	r24, 0x80	; 128
 598:	83 83       	std	Z+3, r24	; 0x03
 59a:	01 15       	cp	r16, r1
 59c:	11 05       	cpc	r17, r1
 59e:	71 f0       	breq	.+28     	; 0x5bc <fdevopen+0x52>
 5a0:	13 87       	std	Z+11, r17	; 0x0b
 5a2:	02 87       	std	Z+10, r16	; 0x0a
 5a4:	81 e8       	ldi	r24, 0x81	; 129
 5a6:	83 83       	std	Z+3, r24	; 0x03
 5a8:	80 91 d0 02 	lds	r24, 0x02D0
 5ac:	90 91 d1 02 	lds	r25, 0x02D1
 5b0:	89 2b       	or	r24, r25
 5b2:	21 f4       	brne	.+8      	; 0x5bc <fdevopen+0x52>
 5b4:	f0 93 d1 02 	sts	0x02D1, r31
 5b8:	e0 93 d0 02 	sts	0x02D0, r30
 5bc:	20 97       	sbiw	r28, 0x00	; 0
 5be:	c9 f0       	breq	.+50     	; 0x5f2 <fdevopen+0x88>
 5c0:	d1 87       	std	Z+9, r29	; 0x09
 5c2:	c0 87       	std	Z+8, r28	; 0x08
 5c4:	83 81       	ldd	r24, Z+3	; 0x03
 5c6:	82 60       	ori	r24, 0x02	; 2
 5c8:	83 83       	std	Z+3, r24	; 0x03
 5ca:	80 91 d2 02 	lds	r24, 0x02D2
 5ce:	90 91 d3 02 	lds	r25, 0x02D3
 5d2:	89 2b       	or	r24, r25
 5d4:	71 f4       	brne	.+28     	; 0x5f2 <fdevopen+0x88>
 5d6:	f0 93 d3 02 	sts	0x02D3, r31
 5da:	e0 93 d2 02 	sts	0x02D2, r30
 5de:	80 91 d4 02 	lds	r24, 0x02D4
 5e2:	90 91 d5 02 	lds	r25, 0x02D5
 5e6:	89 2b       	or	r24, r25
 5e8:	21 f4       	brne	.+8      	; 0x5f2 <fdevopen+0x88>
 5ea:	f0 93 d5 02 	sts	0x02D5, r31
 5ee:	e0 93 d4 02 	sts	0x02D4, r30
 5f2:	cf 01       	movw	r24, r30
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	1f 91       	pop	r17
 5fa:	0f 91       	pop	r16
 5fc:	08 95       	ret

000005fe <printf>:
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
 606:	fe 01       	movw	r30, r28
 608:	36 96       	adiw	r30, 0x06	; 6
 60a:	61 91       	ld	r22, Z+
 60c:	71 91       	ld	r23, Z+
 60e:	af 01       	movw	r20, r30
 610:	80 91 d2 02 	lds	r24, 0x02D2
 614:	90 91 d3 02 	lds	r25, 0x02D3
 618:	03 d0       	rcall	.+6      	; 0x620 <vfprintf>
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret

00000620 <vfprintf>:
 620:	2f 92       	push	r2
 622:	3f 92       	push	r3
 624:	4f 92       	push	r4
 626:	5f 92       	push	r5
 628:	6f 92       	push	r6
 62a:	7f 92       	push	r7
 62c:	8f 92       	push	r8
 62e:	9f 92       	push	r9
 630:	af 92       	push	r10
 632:	bf 92       	push	r11
 634:	cf 92       	push	r12
 636:	df 92       	push	r13
 638:	ef 92       	push	r14
 63a:	ff 92       	push	r15
 63c:	0f 93       	push	r16
 63e:	1f 93       	push	r17
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
 648:	2c 97       	sbiw	r28, 0x0c	; 12
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	f8 94       	cli
 64e:	de bf       	out	0x3e, r29	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	cd bf       	out	0x3d, r28	; 61
 654:	7c 01       	movw	r14, r24
 656:	6b 01       	movw	r12, r22
 658:	8a 01       	movw	r16, r20
 65a:	fc 01       	movw	r30, r24
 65c:	17 82       	std	Z+7, r1	; 0x07
 65e:	16 82       	std	Z+6, r1	; 0x06
 660:	83 81       	ldd	r24, Z+3	; 0x03
 662:	81 ff       	sbrs	r24, 1
 664:	b0 c1       	rjmp	.+864    	; 0x9c6 <vfprintf+0x3a6>
 666:	ce 01       	movw	r24, r28
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	4c 01       	movw	r8, r24
 66c:	f7 01       	movw	r30, r14
 66e:	93 81       	ldd	r25, Z+3	; 0x03
 670:	f6 01       	movw	r30, r12
 672:	93 fd       	sbrc	r25, 3
 674:	85 91       	lpm	r24, Z+
 676:	93 ff       	sbrs	r25, 3
 678:	81 91       	ld	r24, Z+
 67a:	6f 01       	movw	r12, r30
 67c:	88 23       	and	r24, r24
 67e:	09 f4       	brne	.+2      	; 0x682 <vfprintf+0x62>
 680:	9e c1       	rjmp	.+828    	; 0x9be <vfprintf+0x39e>
 682:	85 32       	cpi	r24, 0x25	; 37
 684:	39 f4       	brne	.+14     	; 0x694 <vfprintf+0x74>
 686:	93 fd       	sbrc	r25, 3
 688:	85 91       	lpm	r24, Z+
 68a:	93 ff       	sbrs	r25, 3
 68c:	81 91       	ld	r24, Z+
 68e:	6f 01       	movw	r12, r30
 690:	85 32       	cpi	r24, 0x25	; 37
 692:	21 f4       	brne	.+8      	; 0x69c <vfprintf+0x7c>
 694:	b7 01       	movw	r22, r14
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0f d3       	rcall	.+1566   	; 0xcb8 <fputc>
 69a:	e8 cf       	rjmp	.-48     	; 0x66c <vfprintf+0x4c>
 69c:	51 2c       	mov	r5, r1
 69e:	31 2c       	mov	r3, r1
 6a0:	20 e0       	ldi	r18, 0x00	; 0
 6a2:	20 32       	cpi	r18, 0x20	; 32
 6a4:	a0 f4       	brcc	.+40     	; 0x6ce <vfprintf+0xae>
 6a6:	8b 32       	cpi	r24, 0x2B	; 43
 6a8:	69 f0       	breq	.+26     	; 0x6c4 <vfprintf+0xa4>
 6aa:	30 f4       	brcc	.+12     	; 0x6b8 <vfprintf+0x98>
 6ac:	80 32       	cpi	r24, 0x20	; 32
 6ae:	59 f0       	breq	.+22     	; 0x6c6 <vfprintf+0xa6>
 6b0:	83 32       	cpi	r24, 0x23	; 35
 6b2:	69 f4       	brne	.+26     	; 0x6ce <vfprintf+0xae>
 6b4:	20 61       	ori	r18, 0x10	; 16
 6b6:	2c c0       	rjmp	.+88     	; 0x710 <vfprintf+0xf0>
 6b8:	8d 32       	cpi	r24, 0x2D	; 45
 6ba:	39 f0       	breq	.+14     	; 0x6ca <vfprintf+0xaa>
 6bc:	80 33       	cpi	r24, 0x30	; 48
 6be:	39 f4       	brne	.+14     	; 0x6ce <vfprintf+0xae>
 6c0:	21 60       	ori	r18, 0x01	; 1
 6c2:	26 c0       	rjmp	.+76     	; 0x710 <vfprintf+0xf0>
 6c4:	22 60       	ori	r18, 0x02	; 2
 6c6:	24 60       	ori	r18, 0x04	; 4
 6c8:	23 c0       	rjmp	.+70     	; 0x710 <vfprintf+0xf0>
 6ca:	28 60       	ori	r18, 0x08	; 8
 6cc:	21 c0       	rjmp	.+66     	; 0x710 <vfprintf+0xf0>
 6ce:	27 fd       	sbrc	r18, 7
 6d0:	27 c0       	rjmp	.+78     	; 0x720 <vfprintf+0x100>
 6d2:	30 ed       	ldi	r19, 0xD0	; 208
 6d4:	38 0f       	add	r19, r24
 6d6:	3a 30       	cpi	r19, 0x0A	; 10
 6d8:	78 f4       	brcc	.+30     	; 0x6f8 <vfprintf+0xd8>
 6da:	26 ff       	sbrs	r18, 6
 6dc:	06 c0       	rjmp	.+12     	; 0x6ea <vfprintf+0xca>
 6de:	fa e0       	ldi	r31, 0x0A	; 10
 6e0:	5f 9e       	mul	r5, r31
 6e2:	30 0d       	add	r19, r0
 6e4:	11 24       	eor	r1, r1
 6e6:	53 2e       	mov	r5, r19
 6e8:	13 c0       	rjmp	.+38     	; 0x710 <vfprintf+0xf0>
 6ea:	8a e0       	ldi	r24, 0x0A	; 10
 6ec:	38 9e       	mul	r3, r24
 6ee:	30 0d       	add	r19, r0
 6f0:	11 24       	eor	r1, r1
 6f2:	33 2e       	mov	r3, r19
 6f4:	20 62       	ori	r18, 0x20	; 32
 6f6:	0c c0       	rjmp	.+24     	; 0x710 <vfprintf+0xf0>
 6f8:	8e 32       	cpi	r24, 0x2E	; 46
 6fa:	21 f4       	brne	.+8      	; 0x704 <vfprintf+0xe4>
 6fc:	26 fd       	sbrc	r18, 6
 6fe:	5f c1       	rjmp	.+702    	; 0x9be <vfprintf+0x39e>
 700:	20 64       	ori	r18, 0x40	; 64
 702:	06 c0       	rjmp	.+12     	; 0x710 <vfprintf+0xf0>
 704:	8c 36       	cpi	r24, 0x6C	; 108
 706:	11 f4       	brne	.+4      	; 0x70c <vfprintf+0xec>
 708:	20 68       	ori	r18, 0x80	; 128
 70a:	02 c0       	rjmp	.+4      	; 0x710 <vfprintf+0xf0>
 70c:	88 36       	cpi	r24, 0x68	; 104
 70e:	41 f4       	brne	.+16     	; 0x720 <vfprintf+0x100>
 710:	f6 01       	movw	r30, r12
 712:	93 fd       	sbrc	r25, 3
 714:	85 91       	lpm	r24, Z+
 716:	93 ff       	sbrs	r25, 3
 718:	81 91       	ld	r24, Z+
 71a:	6f 01       	movw	r12, r30
 71c:	81 11       	cpse	r24, r1
 71e:	c1 cf       	rjmp	.-126    	; 0x6a2 <vfprintf+0x82>
 720:	98 2f       	mov	r25, r24
 722:	9f 7d       	andi	r25, 0xDF	; 223
 724:	95 54       	subi	r25, 0x45	; 69
 726:	93 30       	cpi	r25, 0x03	; 3
 728:	28 f4       	brcc	.+10     	; 0x734 <vfprintf+0x114>
 72a:	0c 5f       	subi	r16, 0xFC	; 252
 72c:	1f 4f       	sbci	r17, 0xFF	; 255
 72e:	ff e3       	ldi	r31, 0x3F	; 63
 730:	f9 83       	std	Y+1, r31	; 0x01
 732:	0d c0       	rjmp	.+26     	; 0x74e <vfprintf+0x12e>
 734:	83 36       	cpi	r24, 0x63	; 99
 736:	31 f0       	breq	.+12     	; 0x744 <vfprintf+0x124>
 738:	83 37       	cpi	r24, 0x73	; 115
 73a:	71 f0       	breq	.+28     	; 0x758 <vfprintf+0x138>
 73c:	83 35       	cpi	r24, 0x53	; 83
 73e:	09 f0       	breq	.+2      	; 0x742 <vfprintf+0x122>
 740:	57 c0       	rjmp	.+174    	; 0x7f0 <vfprintf+0x1d0>
 742:	21 c0       	rjmp	.+66     	; 0x786 <vfprintf+0x166>
 744:	f8 01       	movw	r30, r16
 746:	80 81       	ld	r24, Z
 748:	89 83       	std	Y+1, r24	; 0x01
 74a:	0e 5f       	subi	r16, 0xFE	; 254
 74c:	1f 4f       	sbci	r17, 0xFF	; 255
 74e:	44 24       	eor	r4, r4
 750:	43 94       	inc	r4
 752:	51 2c       	mov	r5, r1
 754:	54 01       	movw	r10, r8
 756:	14 c0       	rjmp	.+40     	; 0x780 <vfprintf+0x160>
 758:	38 01       	movw	r6, r16
 75a:	f2 e0       	ldi	r31, 0x02	; 2
 75c:	6f 0e       	add	r6, r31
 75e:	71 1c       	adc	r7, r1
 760:	f8 01       	movw	r30, r16
 762:	a0 80       	ld	r10, Z
 764:	b1 80       	ldd	r11, Z+1	; 0x01
 766:	26 ff       	sbrs	r18, 6
 768:	03 c0       	rjmp	.+6      	; 0x770 <vfprintf+0x150>
 76a:	65 2d       	mov	r22, r5
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <vfprintf+0x154>
 770:	6f ef       	ldi	r22, 0xFF	; 255
 772:	7f ef       	ldi	r23, 0xFF	; 255
 774:	c5 01       	movw	r24, r10
 776:	2c 87       	std	Y+12, r18	; 0x0c
 778:	94 d2       	rcall	.+1320   	; 0xca2 <strnlen>
 77a:	2c 01       	movw	r4, r24
 77c:	83 01       	movw	r16, r6
 77e:	2c 85       	ldd	r18, Y+12	; 0x0c
 780:	2f 77       	andi	r18, 0x7F	; 127
 782:	22 2e       	mov	r2, r18
 784:	16 c0       	rjmp	.+44     	; 0x7b2 <vfprintf+0x192>
 786:	38 01       	movw	r6, r16
 788:	f2 e0       	ldi	r31, 0x02	; 2
 78a:	6f 0e       	add	r6, r31
 78c:	71 1c       	adc	r7, r1
 78e:	f8 01       	movw	r30, r16
 790:	a0 80       	ld	r10, Z
 792:	b1 80       	ldd	r11, Z+1	; 0x01
 794:	26 ff       	sbrs	r18, 6
 796:	03 c0       	rjmp	.+6      	; 0x79e <vfprintf+0x17e>
 798:	65 2d       	mov	r22, r5
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <vfprintf+0x182>
 79e:	6f ef       	ldi	r22, 0xFF	; 255
 7a0:	7f ef       	ldi	r23, 0xFF	; 255
 7a2:	c5 01       	movw	r24, r10
 7a4:	2c 87       	std	Y+12, r18	; 0x0c
 7a6:	6b d2       	rcall	.+1238   	; 0xc7e <strnlen_P>
 7a8:	2c 01       	movw	r4, r24
 7aa:	2c 85       	ldd	r18, Y+12	; 0x0c
 7ac:	20 68       	ori	r18, 0x80	; 128
 7ae:	22 2e       	mov	r2, r18
 7b0:	83 01       	movw	r16, r6
 7b2:	23 fc       	sbrc	r2, 3
 7b4:	19 c0       	rjmp	.+50     	; 0x7e8 <vfprintf+0x1c8>
 7b6:	83 2d       	mov	r24, r3
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	48 16       	cp	r4, r24
 7bc:	59 06       	cpc	r5, r25
 7be:	a0 f4       	brcc	.+40     	; 0x7e8 <vfprintf+0x1c8>
 7c0:	b7 01       	movw	r22, r14
 7c2:	80 e2       	ldi	r24, 0x20	; 32
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	78 d2       	rcall	.+1264   	; 0xcb8 <fputc>
 7c8:	3a 94       	dec	r3
 7ca:	f5 cf       	rjmp	.-22     	; 0x7b6 <vfprintf+0x196>
 7cc:	f5 01       	movw	r30, r10
 7ce:	27 fc       	sbrc	r2, 7
 7d0:	85 91       	lpm	r24, Z+
 7d2:	27 fe       	sbrs	r2, 7
 7d4:	81 91       	ld	r24, Z+
 7d6:	5f 01       	movw	r10, r30
 7d8:	b7 01       	movw	r22, r14
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	6d d2       	rcall	.+1242   	; 0xcb8 <fputc>
 7de:	31 10       	cpse	r3, r1
 7e0:	3a 94       	dec	r3
 7e2:	f1 e0       	ldi	r31, 0x01	; 1
 7e4:	4f 1a       	sub	r4, r31
 7e6:	51 08       	sbc	r5, r1
 7e8:	41 14       	cp	r4, r1
 7ea:	51 04       	cpc	r5, r1
 7ec:	79 f7       	brne	.-34     	; 0x7cc <vfprintf+0x1ac>
 7ee:	de c0       	rjmp	.+444    	; 0x9ac <vfprintf+0x38c>
 7f0:	84 36       	cpi	r24, 0x64	; 100
 7f2:	11 f0       	breq	.+4      	; 0x7f8 <vfprintf+0x1d8>
 7f4:	89 36       	cpi	r24, 0x69	; 105
 7f6:	31 f5       	brne	.+76     	; 0x844 <vfprintf+0x224>
 7f8:	f8 01       	movw	r30, r16
 7fa:	27 ff       	sbrs	r18, 7
 7fc:	07 c0       	rjmp	.+14     	; 0x80c <vfprintf+0x1ec>
 7fe:	60 81       	ld	r22, Z
 800:	71 81       	ldd	r23, Z+1	; 0x01
 802:	82 81       	ldd	r24, Z+2	; 0x02
 804:	93 81       	ldd	r25, Z+3	; 0x03
 806:	0c 5f       	subi	r16, 0xFC	; 252
 808:	1f 4f       	sbci	r17, 0xFF	; 255
 80a:	08 c0       	rjmp	.+16     	; 0x81c <vfprintf+0x1fc>
 80c:	60 81       	ld	r22, Z
 80e:	71 81       	ldd	r23, Z+1	; 0x01
 810:	88 27       	eor	r24, r24
 812:	77 fd       	sbrc	r23, 7
 814:	80 95       	com	r24
 816:	98 2f       	mov	r25, r24
 818:	0e 5f       	subi	r16, 0xFE	; 254
 81a:	1f 4f       	sbci	r17, 0xFF	; 255
 81c:	2f 76       	andi	r18, 0x6F	; 111
 81e:	b2 2e       	mov	r11, r18
 820:	97 ff       	sbrs	r25, 7
 822:	09 c0       	rjmp	.+18     	; 0x836 <vfprintf+0x216>
 824:	90 95       	com	r25
 826:	80 95       	com	r24
 828:	70 95       	com	r23
 82a:	61 95       	neg	r22
 82c:	7f 4f       	sbci	r23, 0xFF	; 255
 82e:	8f 4f       	sbci	r24, 0xFF	; 255
 830:	9f 4f       	sbci	r25, 0xFF	; 255
 832:	20 68       	ori	r18, 0x80	; 128
 834:	b2 2e       	mov	r11, r18
 836:	2a e0       	ldi	r18, 0x0A	; 10
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	a4 01       	movw	r20, r8
 83c:	6f d2       	rcall	.+1246   	; 0xd1c <__ultoa_invert>
 83e:	a8 2e       	mov	r10, r24
 840:	a8 18       	sub	r10, r8
 842:	43 c0       	rjmp	.+134    	; 0x8ca <vfprintf+0x2aa>
 844:	85 37       	cpi	r24, 0x75	; 117
 846:	29 f4       	brne	.+10     	; 0x852 <vfprintf+0x232>
 848:	2f 7e       	andi	r18, 0xEF	; 239
 84a:	b2 2e       	mov	r11, r18
 84c:	2a e0       	ldi	r18, 0x0A	; 10
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	25 c0       	rjmp	.+74     	; 0x89c <vfprintf+0x27c>
 852:	f2 2f       	mov	r31, r18
 854:	f9 7f       	andi	r31, 0xF9	; 249
 856:	bf 2e       	mov	r11, r31
 858:	8f 36       	cpi	r24, 0x6F	; 111
 85a:	c1 f0       	breq	.+48     	; 0x88c <vfprintf+0x26c>
 85c:	18 f4       	brcc	.+6      	; 0x864 <vfprintf+0x244>
 85e:	88 35       	cpi	r24, 0x58	; 88
 860:	79 f0       	breq	.+30     	; 0x880 <vfprintf+0x260>
 862:	ad c0       	rjmp	.+346    	; 0x9be <vfprintf+0x39e>
 864:	80 37       	cpi	r24, 0x70	; 112
 866:	19 f0       	breq	.+6      	; 0x86e <vfprintf+0x24e>
 868:	88 37       	cpi	r24, 0x78	; 120
 86a:	21 f0       	breq	.+8      	; 0x874 <vfprintf+0x254>
 86c:	a8 c0       	rjmp	.+336    	; 0x9be <vfprintf+0x39e>
 86e:	2f 2f       	mov	r18, r31
 870:	20 61       	ori	r18, 0x10	; 16
 872:	b2 2e       	mov	r11, r18
 874:	b4 fe       	sbrs	r11, 4
 876:	0d c0       	rjmp	.+26     	; 0x892 <vfprintf+0x272>
 878:	8b 2d       	mov	r24, r11
 87a:	84 60       	ori	r24, 0x04	; 4
 87c:	b8 2e       	mov	r11, r24
 87e:	09 c0       	rjmp	.+18     	; 0x892 <vfprintf+0x272>
 880:	24 ff       	sbrs	r18, 4
 882:	0a c0       	rjmp	.+20     	; 0x898 <vfprintf+0x278>
 884:	9f 2f       	mov	r25, r31
 886:	96 60       	ori	r25, 0x06	; 6
 888:	b9 2e       	mov	r11, r25
 88a:	06 c0       	rjmp	.+12     	; 0x898 <vfprintf+0x278>
 88c:	28 e0       	ldi	r18, 0x08	; 8
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	05 c0       	rjmp	.+10     	; 0x89c <vfprintf+0x27c>
 892:	20 e1       	ldi	r18, 0x10	; 16
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	02 c0       	rjmp	.+4      	; 0x89c <vfprintf+0x27c>
 898:	20 e1       	ldi	r18, 0x10	; 16
 89a:	32 e0       	ldi	r19, 0x02	; 2
 89c:	f8 01       	movw	r30, r16
 89e:	b7 fe       	sbrs	r11, 7
 8a0:	07 c0       	rjmp	.+14     	; 0x8b0 <vfprintf+0x290>
 8a2:	60 81       	ld	r22, Z
 8a4:	71 81       	ldd	r23, Z+1	; 0x01
 8a6:	82 81       	ldd	r24, Z+2	; 0x02
 8a8:	93 81       	ldd	r25, Z+3	; 0x03
 8aa:	0c 5f       	subi	r16, 0xFC	; 252
 8ac:	1f 4f       	sbci	r17, 0xFF	; 255
 8ae:	06 c0       	rjmp	.+12     	; 0x8bc <vfprintf+0x29c>
 8b0:	60 81       	ld	r22, Z
 8b2:	71 81       	ldd	r23, Z+1	; 0x01
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	0e 5f       	subi	r16, 0xFE	; 254
 8ba:	1f 4f       	sbci	r17, 0xFF	; 255
 8bc:	a4 01       	movw	r20, r8
 8be:	2e d2       	rcall	.+1116   	; 0xd1c <__ultoa_invert>
 8c0:	a8 2e       	mov	r10, r24
 8c2:	a8 18       	sub	r10, r8
 8c4:	fb 2d       	mov	r31, r11
 8c6:	ff 77       	andi	r31, 0x7F	; 127
 8c8:	bf 2e       	mov	r11, r31
 8ca:	b6 fe       	sbrs	r11, 6
 8cc:	0b c0       	rjmp	.+22     	; 0x8e4 <vfprintf+0x2c4>
 8ce:	2b 2d       	mov	r18, r11
 8d0:	2e 7f       	andi	r18, 0xFE	; 254
 8d2:	a5 14       	cp	r10, r5
 8d4:	50 f4       	brcc	.+20     	; 0x8ea <vfprintf+0x2ca>
 8d6:	b4 fe       	sbrs	r11, 4
 8d8:	0a c0       	rjmp	.+20     	; 0x8ee <vfprintf+0x2ce>
 8da:	b2 fc       	sbrc	r11, 2
 8dc:	08 c0       	rjmp	.+16     	; 0x8ee <vfprintf+0x2ce>
 8de:	2b 2d       	mov	r18, r11
 8e0:	2e 7e       	andi	r18, 0xEE	; 238
 8e2:	05 c0       	rjmp	.+10     	; 0x8ee <vfprintf+0x2ce>
 8e4:	7a 2c       	mov	r7, r10
 8e6:	2b 2d       	mov	r18, r11
 8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <vfprintf+0x2d0>
 8ea:	7a 2c       	mov	r7, r10
 8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <vfprintf+0x2d0>
 8ee:	75 2c       	mov	r7, r5
 8f0:	24 ff       	sbrs	r18, 4
 8f2:	0d c0       	rjmp	.+26     	; 0x90e <vfprintf+0x2ee>
 8f4:	fe 01       	movw	r30, r28
 8f6:	ea 0d       	add	r30, r10
 8f8:	f1 1d       	adc	r31, r1
 8fa:	80 81       	ld	r24, Z
 8fc:	80 33       	cpi	r24, 0x30	; 48
 8fe:	11 f4       	brne	.+4      	; 0x904 <vfprintf+0x2e4>
 900:	29 7e       	andi	r18, 0xE9	; 233
 902:	09 c0       	rjmp	.+18     	; 0x916 <vfprintf+0x2f6>
 904:	22 ff       	sbrs	r18, 2
 906:	06 c0       	rjmp	.+12     	; 0x914 <vfprintf+0x2f4>
 908:	73 94       	inc	r7
 90a:	73 94       	inc	r7
 90c:	04 c0       	rjmp	.+8      	; 0x916 <vfprintf+0x2f6>
 90e:	82 2f       	mov	r24, r18
 910:	86 78       	andi	r24, 0x86	; 134
 912:	09 f0       	breq	.+2      	; 0x916 <vfprintf+0x2f6>
 914:	73 94       	inc	r7
 916:	23 fd       	sbrc	r18, 3
 918:	12 c0       	rjmp	.+36     	; 0x93e <vfprintf+0x31e>
 91a:	20 ff       	sbrs	r18, 0
 91c:	06 c0       	rjmp	.+12     	; 0x92a <vfprintf+0x30a>
 91e:	5a 2c       	mov	r5, r10
 920:	73 14       	cp	r7, r3
 922:	18 f4       	brcc	.+6      	; 0x92a <vfprintf+0x30a>
 924:	53 0c       	add	r5, r3
 926:	57 18       	sub	r5, r7
 928:	73 2c       	mov	r7, r3
 92a:	73 14       	cp	r7, r3
 92c:	60 f4       	brcc	.+24     	; 0x946 <vfprintf+0x326>
 92e:	b7 01       	movw	r22, r14
 930:	80 e2       	ldi	r24, 0x20	; 32
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	2c 87       	std	Y+12, r18	; 0x0c
 936:	c0 d1       	rcall	.+896    	; 0xcb8 <fputc>
 938:	73 94       	inc	r7
 93a:	2c 85       	ldd	r18, Y+12	; 0x0c
 93c:	f6 cf       	rjmp	.-20     	; 0x92a <vfprintf+0x30a>
 93e:	73 14       	cp	r7, r3
 940:	10 f4       	brcc	.+4      	; 0x946 <vfprintf+0x326>
 942:	37 18       	sub	r3, r7
 944:	01 c0       	rjmp	.+2      	; 0x948 <vfprintf+0x328>
 946:	31 2c       	mov	r3, r1
 948:	24 ff       	sbrs	r18, 4
 94a:	11 c0       	rjmp	.+34     	; 0x96e <vfprintf+0x34e>
 94c:	b7 01       	movw	r22, r14
 94e:	80 e3       	ldi	r24, 0x30	; 48
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	2c 87       	std	Y+12, r18	; 0x0c
 954:	b1 d1       	rcall	.+866    	; 0xcb8 <fputc>
 956:	2c 85       	ldd	r18, Y+12	; 0x0c
 958:	22 ff       	sbrs	r18, 2
 95a:	16 c0       	rjmp	.+44     	; 0x988 <vfprintf+0x368>
 95c:	21 ff       	sbrs	r18, 1
 95e:	03 c0       	rjmp	.+6      	; 0x966 <vfprintf+0x346>
 960:	88 e5       	ldi	r24, 0x58	; 88
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	02 c0       	rjmp	.+4      	; 0x96a <vfprintf+0x34a>
 966:	88 e7       	ldi	r24, 0x78	; 120
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	b7 01       	movw	r22, r14
 96c:	0c c0       	rjmp	.+24     	; 0x986 <vfprintf+0x366>
 96e:	82 2f       	mov	r24, r18
 970:	86 78       	andi	r24, 0x86	; 134
 972:	51 f0       	breq	.+20     	; 0x988 <vfprintf+0x368>
 974:	21 fd       	sbrc	r18, 1
 976:	02 c0       	rjmp	.+4      	; 0x97c <vfprintf+0x35c>
 978:	80 e2       	ldi	r24, 0x20	; 32
 97a:	01 c0       	rjmp	.+2      	; 0x97e <vfprintf+0x35e>
 97c:	8b e2       	ldi	r24, 0x2B	; 43
 97e:	27 fd       	sbrc	r18, 7
 980:	8d e2       	ldi	r24, 0x2D	; 45
 982:	b7 01       	movw	r22, r14
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	98 d1       	rcall	.+816    	; 0xcb8 <fputc>
 988:	a5 14       	cp	r10, r5
 98a:	30 f4       	brcc	.+12     	; 0x998 <vfprintf+0x378>
 98c:	b7 01       	movw	r22, r14
 98e:	80 e3       	ldi	r24, 0x30	; 48
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	92 d1       	rcall	.+804    	; 0xcb8 <fputc>
 994:	5a 94       	dec	r5
 996:	f8 cf       	rjmp	.-16     	; 0x988 <vfprintf+0x368>
 998:	aa 94       	dec	r10
 99a:	f4 01       	movw	r30, r8
 99c:	ea 0d       	add	r30, r10
 99e:	f1 1d       	adc	r31, r1
 9a0:	80 81       	ld	r24, Z
 9a2:	b7 01       	movw	r22, r14
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	88 d1       	rcall	.+784    	; 0xcb8 <fputc>
 9a8:	a1 10       	cpse	r10, r1
 9aa:	f6 cf       	rjmp	.-20     	; 0x998 <vfprintf+0x378>
 9ac:	33 20       	and	r3, r3
 9ae:	09 f4       	brne	.+2      	; 0x9b2 <vfprintf+0x392>
 9b0:	5d ce       	rjmp	.-838    	; 0x66c <vfprintf+0x4c>
 9b2:	b7 01       	movw	r22, r14
 9b4:	80 e2       	ldi	r24, 0x20	; 32
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	7f d1       	rcall	.+766    	; 0xcb8 <fputc>
 9ba:	3a 94       	dec	r3
 9bc:	f7 cf       	rjmp	.-18     	; 0x9ac <vfprintf+0x38c>
 9be:	f7 01       	movw	r30, r14
 9c0:	86 81       	ldd	r24, Z+6	; 0x06
 9c2:	97 81       	ldd	r25, Z+7	; 0x07
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <vfprintf+0x3aa>
 9c6:	8f ef       	ldi	r24, 0xFF	; 255
 9c8:	9f ef       	ldi	r25, 0xFF	; 255
 9ca:	2c 96       	adiw	r28, 0x0c	; 12
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	f8 94       	cli
 9d0:	de bf       	out	0x3e, r29	; 62
 9d2:	0f be       	out	0x3f, r0	; 63
 9d4:	cd bf       	out	0x3d, r28	; 61
 9d6:	df 91       	pop	r29
 9d8:	cf 91       	pop	r28
 9da:	1f 91       	pop	r17
 9dc:	0f 91       	pop	r16
 9de:	ff 90       	pop	r15
 9e0:	ef 90       	pop	r14
 9e2:	df 90       	pop	r13
 9e4:	cf 90       	pop	r12
 9e6:	bf 90       	pop	r11
 9e8:	af 90       	pop	r10
 9ea:	9f 90       	pop	r9
 9ec:	8f 90       	pop	r8
 9ee:	7f 90       	pop	r7
 9f0:	6f 90       	pop	r6
 9f2:	5f 90       	pop	r5
 9f4:	4f 90       	pop	r4
 9f6:	3f 90       	pop	r3
 9f8:	2f 90       	pop	r2
 9fa:	08 95       	ret

000009fc <calloc>:
 9fc:	0f 93       	push	r16
 9fe:	1f 93       	push	r17
 a00:	cf 93       	push	r28
 a02:	df 93       	push	r29
 a04:	86 9f       	mul	r24, r22
 a06:	80 01       	movw	r16, r0
 a08:	87 9f       	mul	r24, r23
 a0a:	10 0d       	add	r17, r0
 a0c:	96 9f       	mul	r25, r22
 a0e:	10 0d       	add	r17, r0
 a10:	11 24       	eor	r1, r1
 a12:	c8 01       	movw	r24, r16
 a14:	0d d0       	rcall	.+26     	; 0xa30 <malloc>
 a16:	ec 01       	movw	r28, r24
 a18:	00 97       	sbiw	r24, 0x00	; 0
 a1a:	21 f0       	breq	.+8      	; 0xa24 <calloc+0x28>
 a1c:	a8 01       	movw	r20, r16
 a1e:	60 e0       	ldi	r22, 0x00	; 0
 a20:	70 e0       	ldi	r23, 0x00	; 0
 a22:	38 d1       	rcall	.+624    	; 0xc94 <memset>
 a24:	ce 01       	movw	r24, r28
 a26:	df 91       	pop	r29
 a28:	cf 91       	pop	r28
 a2a:	1f 91       	pop	r17
 a2c:	0f 91       	pop	r16
 a2e:	08 95       	ret

00000a30 <malloc>:
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
 a34:	82 30       	cpi	r24, 0x02	; 2
 a36:	91 05       	cpc	r25, r1
 a38:	10 f4       	brcc	.+4      	; 0xa3e <malloc+0xe>
 a3a:	82 e0       	ldi	r24, 0x02	; 2
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	e0 91 d8 02 	lds	r30, 0x02D8
 a42:	f0 91 d9 02 	lds	r31, 0x02D9
 a46:	20 e0       	ldi	r18, 0x00	; 0
 a48:	30 e0       	ldi	r19, 0x00	; 0
 a4a:	a0 e0       	ldi	r26, 0x00	; 0
 a4c:	b0 e0       	ldi	r27, 0x00	; 0
 a4e:	30 97       	sbiw	r30, 0x00	; 0
 a50:	39 f1       	breq	.+78     	; 0xaa0 <malloc+0x70>
 a52:	40 81       	ld	r20, Z
 a54:	51 81       	ldd	r21, Z+1	; 0x01
 a56:	48 17       	cp	r20, r24
 a58:	59 07       	cpc	r21, r25
 a5a:	b8 f0       	brcs	.+46     	; 0xa8a <malloc+0x5a>
 a5c:	48 17       	cp	r20, r24
 a5e:	59 07       	cpc	r21, r25
 a60:	71 f4       	brne	.+28     	; 0xa7e <malloc+0x4e>
 a62:	82 81       	ldd	r24, Z+2	; 0x02
 a64:	93 81       	ldd	r25, Z+3	; 0x03
 a66:	10 97       	sbiw	r26, 0x00	; 0
 a68:	29 f0       	breq	.+10     	; 0xa74 <malloc+0x44>
 a6a:	13 96       	adiw	r26, 0x03	; 3
 a6c:	9c 93       	st	X, r25
 a6e:	8e 93       	st	-X, r24
 a70:	12 97       	sbiw	r26, 0x02	; 2
 a72:	2c c0       	rjmp	.+88     	; 0xacc <malloc+0x9c>
 a74:	90 93 d9 02 	sts	0x02D9, r25
 a78:	80 93 d8 02 	sts	0x02D8, r24
 a7c:	27 c0       	rjmp	.+78     	; 0xacc <malloc+0x9c>
 a7e:	21 15       	cp	r18, r1
 a80:	31 05       	cpc	r19, r1
 a82:	31 f0       	breq	.+12     	; 0xa90 <malloc+0x60>
 a84:	42 17       	cp	r20, r18
 a86:	53 07       	cpc	r21, r19
 a88:	18 f0       	brcs	.+6      	; 0xa90 <malloc+0x60>
 a8a:	a9 01       	movw	r20, r18
 a8c:	db 01       	movw	r26, r22
 a8e:	01 c0       	rjmp	.+2      	; 0xa92 <malloc+0x62>
 a90:	ef 01       	movw	r28, r30
 a92:	9a 01       	movw	r18, r20
 a94:	bd 01       	movw	r22, r26
 a96:	df 01       	movw	r26, r30
 a98:	02 80       	ldd	r0, Z+2	; 0x02
 a9a:	f3 81       	ldd	r31, Z+3	; 0x03
 a9c:	e0 2d       	mov	r30, r0
 a9e:	d7 cf       	rjmp	.-82     	; 0xa4e <malloc+0x1e>
 aa0:	21 15       	cp	r18, r1
 aa2:	31 05       	cpc	r19, r1
 aa4:	f9 f0       	breq	.+62     	; 0xae4 <malloc+0xb4>
 aa6:	28 1b       	sub	r18, r24
 aa8:	39 0b       	sbc	r19, r25
 aaa:	24 30       	cpi	r18, 0x04	; 4
 aac:	31 05       	cpc	r19, r1
 aae:	80 f4       	brcc	.+32     	; 0xad0 <malloc+0xa0>
 ab0:	8a 81       	ldd	r24, Y+2	; 0x02
 ab2:	9b 81       	ldd	r25, Y+3	; 0x03
 ab4:	61 15       	cp	r22, r1
 ab6:	71 05       	cpc	r23, r1
 ab8:	21 f0       	breq	.+8      	; 0xac2 <malloc+0x92>
 aba:	fb 01       	movw	r30, r22
 abc:	93 83       	std	Z+3, r25	; 0x03
 abe:	82 83       	std	Z+2, r24	; 0x02
 ac0:	04 c0       	rjmp	.+8      	; 0xaca <malloc+0x9a>
 ac2:	90 93 d9 02 	sts	0x02D9, r25
 ac6:	80 93 d8 02 	sts	0x02D8, r24
 aca:	fe 01       	movw	r30, r28
 acc:	32 96       	adiw	r30, 0x02	; 2
 ace:	44 c0       	rjmp	.+136    	; 0xb58 <malloc+0x128>
 ad0:	fe 01       	movw	r30, r28
 ad2:	e2 0f       	add	r30, r18
 ad4:	f3 1f       	adc	r31, r19
 ad6:	81 93       	st	Z+, r24
 ad8:	91 93       	st	Z+, r25
 ada:	22 50       	subi	r18, 0x02	; 2
 adc:	31 09       	sbc	r19, r1
 ade:	39 83       	std	Y+1, r19	; 0x01
 ae0:	28 83       	st	Y, r18
 ae2:	3a c0       	rjmp	.+116    	; 0xb58 <malloc+0x128>
 ae4:	20 91 d6 02 	lds	r18, 0x02D6
 ae8:	30 91 d7 02 	lds	r19, 0x02D7
 aec:	23 2b       	or	r18, r19
 aee:	41 f4       	brne	.+16     	; 0xb00 <malloc+0xd0>
 af0:	20 91 02 02 	lds	r18, 0x0202
 af4:	30 91 03 02 	lds	r19, 0x0203
 af8:	30 93 d7 02 	sts	0x02D7, r19
 afc:	20 93 d6 02 	sts	0x02D6, r18
 b00:	20 91 00 02 	lds	r18, 0x0200
 b04:	30 91 01 02 	lds	r19, 0x0201
 b08:	21 15       	cp	r18, r1
 b0a:	31 05       	cpc	r19, r1
 b0c:	41 f4       	brne	.+16     	; 0xb1e <malloc+0xee>
 b0e:	2d b7       	in	r18, 0x3d	; 61
 b10:	3e b7       	in	r19, 0x3e	; 62
 b12:	40 91 04 02 	lds	r20, 0x0204
 b16:	50 91 05 02 	lds	r21, 0x0205
 b1a:	24 1b       	sub	r18, r20
 b1c:	35 0b       	sbc	r19, r21
 b1e:	e0 91 d6 02 	lds	r30, 0x02D6
 b22:	f0 91 d7 02 	lds	r31, 0x02D7
 b26:	e2 17       	cp	r30, r18
 b28:	f3 07       	cpc	r31, r19
 b2a:	a0 f4       	brcc	.+40     	; 0xb54 <malloc+0x124>
 b2c:	2e 1b       	sub	r18, r30
 b2e:	3f 0b       	sbc	r19, r31
 b30:	28 17       	cp	r18, r24
 b32:	39 07       	cpc	r19, r25
 b34:	78 f0       	brcs	.+30     	; 0xb54 <malloc+0x124>
 b36:	ac 01       	movw	r20, r24
 b38:	4e 5f       	subi	r20, 0xFE	; 254
 b3a:	5f 4f       	sbci	r21, 0xFF	; 255
 b3c:	24 17       	cp	r18, r20
 b3e:	35 07       	cpc	r19, r21
 b40:	48 f0       	brcs	.+18     	; 0xb54 <malloc+0x124>
 b42:	4e 0f       	add	r20, r30
 b44:	5f 1f       	adc	r21, r31
 b46:	50 93 d7 02 	sts	0x02D7, r21
 b4a:	40 93 d6 02 	sts	0x02D6, r20
 b4e:	81 93       	st	Z+, r24
 b50:	91 93       	st	Z+, r25
 b52:	02 c0       	rjmp	.+4      	; 0xb58 <malloc+0x128>
 b54:	e0 e0       	ldi	r30, 0x00	; 0
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	cf 01       	movw	r24, r30
 b5a:	df 91       	pop	r29
 b5c:	cf 91       	pop	r28
 b5e:	08 95       	ret

00000b60 <free>:
 b60:	cf 93       	push	r28
 b62:	df 93       	push	r29
 b64:	00 97       	sbiw	r24, 0x00	; 0
 b66:	09 f4       	brne	.+2      	; 0xb6a <free+0xa>
 b68:	87 c0       	rjmp	.+270    	; 0xc78 <free+0x118>
 b6a:	fc 01       	movw	r30, r24
 b6c:	32 97       	sbiw	r30, 0x02	; 2
 b6e:	13 82       	std	Z+3, r1	; 0x03
 b70:	12 82       	std	Z+2, r1	; 0x02
 b72:	c0 91 d8 02 	lds	r28, 0x02D8
 b76:	d0 91 d9 02 	lds	r29, 0x02D9
 b7a:	20 97       	sbiw	r28, 0x00	; 0
 b7c:	81 f4       	brne	.+32     	; 0xb9e <free+0x3e>
 b7e:	20 81       	ld	r18, Z
 b80:	31 81       	ldd	r19, Z+1	; 0x01
 b82:	28 0f       	add	r18, r24
 b84:	39 1f       	adc	r19, r25
 b86:	80 91 d6 02 	lds	r24, 0x02D6
 b8a:	90 91 d7 02 	lds	r25, 0x02D7
 b8e:	82 17       	cp	r24, r18
 b90:	93 07       	cpc	r25, r19
 b92:	79 f5       	brne	.+94     	; 0xbf2 <free+0x92>
 b94:	f0 93 d7 02 	sts	0x02D7, r31
 b98:	e0 93 d6 02 	sts	0x02D6, r30
 b9c:	6d c0       	rjmp	.+218    	; 0xc78 <free+0x118>
 b9e:	de 01       	movw	r26, r28
 ba0:	20 e0       	ldi	r18, 0x00	; 0
 ba2:	30 e0       	ldi	r19, 0x00	; 0
 ba4:	ae 17       	cp	r26, r30
 ba6:	bf 07       	cpc	r27, r31
 ba8:	50 f4       	brcc	.+20     	; 0xbbe <free+0x5e>
 baa:	12 96       	adiw	r26, 0x02	; 2
 bac:	4d 91       	ld	r20, X+
 bae:	5c 91       	ld	r21, X
 bb0:	13 97       	sbiw	r26, 0x03	; 3
 bb2:	9d 01       	movw	r18, r26
 bb4:	41 15       	cp	r20, r1
 bb6:	51 05       	cpc	r21, r1
 bb8:	09 f1       	breq	.+66     	; 0xbfc <free+0x9c>
 bba:	da 01       	movw	r26, r20
 bbc:	f3 cf       	rjmp	.-26     	; 0xba4 <free+0x44>
 bbe:	b3 83       	std	Z+3, r27	; 0x03
 bc0:	a2 83       	std	Z+2, r26	; 0x02
 bc2:	40 81       	ld	r20, Z
 bc4:	51 81       	ldd	r21, Z+1	; 0x01
 bc6:	84 0f       	add	r24, r20
 bc8:	95 1f       	adc	r25, r21
 bca:	8a 17       	cp	r24, r26
 bcc:	9b 07       	cpc	r25, r27
 bce:	71 f4       	brne	.+28     	; 0xbec <free+0x8c>
 bd0:	8d 91       	ld	r24, X+
 bd2:	9c 91       	ld	r25, X
 bd4:	11 97       	sbiw	r26, 0x01	; 1
 bd6:	84 0f       	add	r24, r20
 bd8:	95 1f       	adc	r25, r21
 bda:	02 96       	adiw	r24, 0x02	; 2
 bdc:	91 83       	std	Z+1, r25	; 0x01
 bde:	80 83       	st	Z, r24
 be0:	12 96       	adiw	r26, 0x02	; 2
 be2:	8d 91       	ld	r24, X+
 be4:	9c 91       	ld	r25, X
 be6:	13 97       	sbiw	r26, 0x03	; 3
 be8:	93 83       	std	Z+3, r25	; 0x03
 bea:	82 83       	std	Z+2, r24	; 0x02
 bec:	21 15       	cp	r18, r1
 bee:	31 05       	cpc	r19, r1
 bf0:	29 f4       	brne	.+10     	; 0xbfc <free+0x9c>
 bf2:	f0 93 d9 02 	sts	0x02D9, r31
 bf6:	e0 93 d8 02 	sts	0x02D8, r30
 bfa:	3e c0       	rjmp	.+124    	; 0xc78 <free+0x118>
 bfc:	d9 01       	movw	r26, r18
 bfe:	13 96       	adiw	r26, 0x03	; 3
 c00:	fc 93       	st	X, r31
 c02:	ee 93       	st	-X, r30
 c04:	12 97       	sbiw	r26, 0x02	; 2
 c06:	4d 91       	ld	r20, X+
 c08:	5d 91       	ld	r21, X+
 c0a:	a4 0f       	add	r26, r20
 c0c:	b5 1f       	adc	r27, r21
 c0e:	ea 17       	cp	r30, r26
 c10:	fb 07       	cpc	r31, r27
 c12:	79 f4       	brne	.+30     	; 0xc32 <free+0xd2>
 c14:	80 81       	ld	r24, Z
 c16:	91 81       	ldd	r25, Z+1	; 0x01
 c18:	84 0f       	add	r24, r20
 c1a:	95 1f       	adc	r25, r21
 c1c:	02 96       	adiw	r24, 0x02	; 2
 c1e:	d9 01       	movw	r26, r18
 c20:	11 96       	adiw	r26, 0x01	; 1
 c22:	9c 93       	st	X, r25
 c24:	8e 93       	st	-X, r24
 c26:	82 81       	ldd	r24, Z+2	; 0x02
 c28:	93 81       	ldd	r25, Z+3	; 0x03
 c2a:	13 96       	adiw	r26, 0x03	; 3
 c2c:	9c 93       	st	X, r25
 c2e:	8e 93       	st	-X, r24
 c30:	12 97       	sbiw	r26, 0x02	; 2
 c32:	e0 e0       	ldi	r30, 0x00	; 0
 c34:	f0 e0       	ldi	r31, 0x00	; 0
 c36:	8a 81       	ldd	r24, Y+2	; 0x02
 c38:	9b 81       	ldd	r25, Y+3	; 0x03
 c3a:	00 97       	sbiw	r24, 0x00	; 0
 c3c:	19 f0       	breq	.+6      	; 0xc44 <free+0xe4>
 c3e:	fe 01       	movw	r30, r28
 c40:	ec 01       	movw	r28, r24
 c42:	f9 cf       	rjmp	.-14     	; 0xc36 <free+0xd6>
 c44:	ce 01       	movw	r24, r28
 c46:	02 96       	adiw	r24, 0x02	; 2
 c48:	28 81       	ld	r18, Y
 c4a:	39 81       	ldd	r19, Y+1	; 0x01
 c4c:	82 0f       	add	r24, r18
 c4e:	93 1f       	adc	r25, r19
 c50:	20 91 d6 02 	lds	r18, 0x02D6
 c54:	30 91 d7 02 	lds	r19, 0x02D7
 c58:	28 17       	cp	r18, r24
 c5a:	39 07       	cpc	r19, r25
 c5c:	69 f4       	brne	.+26     	; 0xc78 <free+0x118>
 c5e:	30 97       	sbiw	r30, 0x00	; 0
 c60:	29 f4       	brne	.+10     	; 0xc6c <free+0x10c>
 c62:	10 92 d9 02 	sts	0x02D9, r1
 c66:	10 92 d8 02 	sts	0x02D8, r1
 c6a:	02 c0       	rjmp	.+4      	; 0xc70 <free+0x110>
 c6c:	13 82       	std	Z+3, r1	; 0x03
 c6e:	12 82       	std	Z+2, r1	; 0x02
 c70:	d0 93 d7 02 	sts	0x02D7, r29
 c74:	c0 93 d6 02 	sts	0x02D6, r28
 c78:	df 91       	pop	r29
 c7a:	cf 91       	pop	r28
 c7c:	08 95       	ret

00000c7e <strnlen_P>:
 c7e:	fc 01       	movw	r30, r24
 c80:	05 90       	lpm	r0, Z+
 c82:	61 50       	subi	r22, 0x01	; 1
 c84:	70 40       	sbci	r23, 0x00	; 0
 c86:	01 10       	cpse	r0, r1
 c88:	d8 f7       	brcc	.-10     	; 0xc80 <strnlen_P+0x2>
 c8a:	80 95       	com	r24
 c8c:	90 95       	com	r25
 c8e:	8e 0f       	add	r24, r30
 c90:	9f 1f       	adc	r25, r31
 c92:	08 95       	ret

00000c94 <memset>:
 c94:	dc 01       	movw	r26, r24
 c96:	01 c0       	rjmp	.+2      	; 0xc9a <memset+0x6>
 c98:	6d 93       	st	X+, r22
 c9a:	41 50       	subi	r20, 0x01	; 1
 c9c:	50 40       	sbci	r21, 0x00	; 0
 c9e:	e0 f7       	brcc	.-8      	; 0xc98 <memset+0x4>
 ca0:	08 95       	ret

00000ca2 <strnlen>:
 ca2:	fc 01       	movw	r30, r24
 ca4:	61 50       	subi	r22, 0x01	; 1
 ca6:	70 40       	sbci	r23, 0x00	; 0
 ca8:	01 90       	ld	r0, Z+
 caa:	01 10       	cpse	r0, r1
 cac:	d8 f7       	brcc	.-10     	; 0xca4 <strnlen+0x2>
 cae:	80 95       	com	r24
 cb0:	90 95       	com	r25
 cb2:	8e 0f       	add	r24, r30
 cb4:	9f 1f       	adc	r25, r31
 cb6:	08 95       	ret

00000cb8 <fputc>:
 cb8:	0f 93       	push	r16
 cba:	1f 93       	push	r17
 cbc:	cf 93       	push	r28
 cbe:	df 93       	push	r29
 cc0:	18 2f       	mov	r17, r24
 cc2:	09 2f       	mov	r16, r25
 cc4:	eb 01       	movw	r28, r22
 cc6:	8b 81       	ldd	r24, Y+3	; 0x03
 cc8:	81 fd       	sbrc	r24, 1
 cca:	03 c0       	rjmp	.+6      	; 0xcd2 <fputc+0x1a>
 ccc:	8f ef       	ldi	r24, 0xFF	; 255
 cce:	9f ef       	ldi	r25, 0xFF	; 255
 cd0:	20 c0       	rjmp	.+64     	; 0xd12 <fputc+0x5a>
 cd2:	82 ff       	sbrs	r24, 2
 cd4:	10 c0       	rjmp	.+32     	; 0xcf6 <fputc+0x3e>
 cd6:	4e 81       	ldd	r20, Y+6	; 0x06
 cd8:	5f 81       	ldd	r21, Y+7	; 0x07
 cda:	2c 81       	ldd	r18, Y+4	; 0x04
 cdc:	3d 81       	ldd	r19, Y+5	; 0x05
 cde:	42 17       	cp	r20, r18
 ce0:	53 07       	cpc	r21, r19
 ce2:	7c f4       	brge	.+30     	; 0xd02 <fputc+0x4a>
 ce4:	e8 81       	ld	r30, Y
 ce6:	f9 81       	ldd	r31, Y+1	; 0x01
 ce8:	9f 01       	movw	r18, r30
 cea:	2f 5f       	subi	r18, 0xFF	; 255
 cec:	3f 4f       	sbci	r19, 0xFF	; 255
 cee:	39 83       	std	Y+1, r19	; 0x01
 cf0:	28 83       	st	Y, r18
 cf2:	10 83       	st	Z, r17
 cf4:	06 c0       	rjmp	.+12     	; 0xd02 <fputc+0x4a>
 cf6:	e8 85       	ldd	r30, Y+8	; 0x08
 cf8:	f9 85       	ldd	r31, Y+9	; 0x09
 cfa:	81 2f       	mov	r24, r17
 cfc:	19 95       	eicall
 cfe:	89 2b       	or	r24, r25
 d00:	29 f7       	brne	.-54     	; 0xccc <fputc+0x14>
 d02:	2e 81       	ldd	r18, Y+6	; 0x06
 d04:	3f 81       	ldd	r19, Y+7	; 0x07
 d06:	2f 5f       	subi	r18, 0xFF	; 255
 d08:	3f 4f       	sbci	r19, 0xFF	; 255
 d0a:	3f 83       	std	Y+7, r19	; 0x07
 d0c:	2e 83       	std	Y+6, r18	; 0x06
 d0e:	81 2f       	mov	r24, r17
 d10:	90 2f       	mov	r25, r16
 d12:	df 91       	pop	r29
 d14:	cf 91       	pop	r28
 d16:	1f 91       	pop	r17
 d18:	0f 91       	pop	r16
 d1a:	08 95       	ret

00000d1c <__ultoa_invert>:
 d1c:	fa 01       	movw	r30, r20
 d1e:	aa 27       	eor	r26, r26
 d20:	28 30       	cpi	r18, 0x08	; 8
 d22:	51 f1       	breq	.+84     	; 0xd78 <__ultoa_invert+0x5c>
 d24:	20 31       	cpi	r18, 0x10	; 16
 d26:	81 f1       	breq	.+96     	; 0xd88 <__ultoa_invert+0x6c>
 d28:	e8 94       	clt
 d2a:	6f 93       	push	r22
 d2c:	6e 7f       	andi	r22, 0xFE	; 254
 d2e:	6e 5f       	subi	r22, 0xFE	; 254
 d30:	7f 4f       	sbci	r23, 0xFF	; 255
 d32:	8f 4f       	sbci	r24, 0xFF	; 255
 d34:	9f 4f       	sbci	r25, 0xFF	; 255
 d36:	af 4f       	sbci	r26, 0xFF	; 255
 d38:	b1 e0       	ldi	r27, 0x01	; 1
 d3a:	3e d0       	rcall	.+124    	; 0xdb8 <__ultoa_invert+0x9c>
 d3c:	b4 e0       	ldi	r27, 0x04	; 4
 d3e:	3c d0       	rcall	.+120    	; 0xdb8 <__ultoa_invert+0x9c>
 d40:	67 0f       	add	r22, r23
 d42:	78 1f       	adc	r23, r24
 d44:	89 1f       	adc	r24, r25
 d46:	9a 1f       	adc	r25, r26
 d48:	a1 1d       	adc	r26, r1
 d4a:	68 0f       	add	r22, r24
 d4c:	79 1f       	adc	r23, r25
 d4e:	8a 1f       	adc	r24, r26
 d50:	91 1d       	adc	r25, r1
 d52:	a1 1d       	adc	r26, r1
 d54:	6a 0f       	add	r22, r26
 d56:	71 1d       	adc	r23, r1
 d58:	81 1d       	adc	r24, r1
 d5a:	91 1d       	adc	r25, r1
 d5c:	a1 1d       	adc	r26, r1
 d5e:	20 d0       	rcall	.+64     	; 0xda0 <__ultoa_invert+0x84>
 d60:	09 f4       	brne	.+2      	; 0xd64 <__ultoa_invert+0x48>
 d62:	68 94       	set
 d64:	3f 91       	pop	r19
 d66:	2a e0       	ldi	r18, 0x0A	; 10
 d68:	26 9f       	mul	r18, r22
 d6a:	11 24       	eor	r1, r1
 d6c:	30 19       	sub	r19, r0
 d6e:	30 5d       	subi	r19, 0xD0	; 208
 d70:	31 93       	st	Z+, r19
 d72:	de f6       	brtc	.-74     	; 0xd2a <__ultoa_invert+0xe>
 d74:	cf 01       	movw	r24, r30
 d76:	08 95       	ret
 d78:	46 2f       	mov	r20, r22
 d7a:	47 70       	andi	r20, 0x07	; 7
 d7c:	40 5d       	subi	r20, 0xD0	; 208
 d7e:	41 93       	st	Z+, r20
 d80:	b3 e0       	ldi	r27, 0x03	; 3
 d82:	0f d0       	rcall	.+30     	; 0xda2 <__ultoa_invert+0x86>
 d84:	c9 f7       	brne	.-14     	; 0xd78 <__ultoa_invert+0x5c>
 d86:	f6 cf       	rjmp	.-20     	; 0xd74 <__ultoa_invert+0x58>
 d88:	46 2f       	mov	r20, r22
 d8a:	4f 70       	andi	r20, 0x0F	; 15
 d8c:	40 5d       	subi	r20, 0xD0	; 208
 d8e:	4a 33       	cpi	r20, 0x3A	; 58
 d90:	18 f0       	brcs	.+6      	; 0xd98 <__ultoa_invert+0x7c>
 d92:	49 5d       	subi	r20, 0xD9	; 217
 d94:	31 fd       	sbrc	r19, 1
 d96:	40 52       	subi	r20, 0x20	; 32
 d98:	41 93       	st	Z+, r20
 d9a:	02 d0       	rcall	.+4      	; 0xda0 <__ultoa_invert+0x84>
 d9c:	a9 f7       	brne	.-22     	; 0xd88 <__ultoa_invert+0x6c>
 d9e:	ea cf       	rjmp	.-44     	; 0xd74 <__ultoa_invert+0x58>
 da0:	b4 e0       	ldi	r27, 0x04	; 4
 da2:	a6 95       	lsr	r26
 da4:	97 95       	ror	r25
 da6:	87 95       	ror	r24
 da8:	77 95       	ror	r23
 daa:	67 95       	ror	r22
 dac:	ba 95       	dec	r27
 dae:	c9 f7       	brne	.-14     	; 0xda2 <__ultoa_invert+0x86>
 db0:	00 97       	sbiw	r24, 0x00	; 0
 db2:	61 05       	cpc	r22, r1
 db4:	71 05       	cpc	r23, r1
 db6:	08 95       	ret
 db8:	9b 01       	movw	r18, r22
 dba:	ac 01       	movw	r20, r24
 dbc:	0a 2e       	mov	r0, r26
 dbe:	06 94       	lsr	r0
 dc0:	57 95       	ror	r21
 dc2:	47 95       	ror	r20
 dc4:	37 95       	ror	r19
 dc6:	27 95       	ror	r18
 dc8:	ba 95       	dec	r27
 dca:	c9 f7       	brne	.-14     	; 0xdbe <__ultoa_invert+0xa2>
 dcc:	62 0f       	add	r22, r18
 dce:	73 1f       	adc	r23, r19
 dd0:	84 1f       	adc	r24, r20
 dd2:	95 1f       	adc	r25, r21
 dd4:	a0 1d       	adc	r26, r0
 dd6:	08 95       	ret

00000dd8 <_exit>:
 dd8:	f8 94       	cli

00000dda <__stop_program>:
 dda:	ff cf       	rjmp	.-2      	; 0xdda <__stop_program>
