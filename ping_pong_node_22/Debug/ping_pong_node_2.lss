
ping_pong_node_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800200  00000e5a  00000eee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002da  008002da  00000fc8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010ec  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bd  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008d1  00000000  00000000  000029d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000298  00000000  00000000  000032a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dd  00000000  00000000  00003540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007dc  00000000  00000000  0000391d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000040f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e5       	ldi	r30, 0x5A	; 90
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 3d       	cpi	r26, 0xDA	; 218
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa ed       	ldi	r26, 0xDA	; 218
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 3e       	cpi	r26, 0xE4	; 228
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	09 d1       	rcall	.+530    	; 0x332 <main>
 120:	9a c6       	rjmp	.+3380   	; 0xe56 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <can_init>:


// "Main" for using can:

void can_init()
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	2a 97       	sbiw	r28, 0x0a	; 10
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
	mcp2515_init(); //Init
 138:	67 d1       	rcall	.+718    	; 0x408 <mcp2515_init>
	mcp2515_bit_modify(MCP_RXF0SIDL, 0xE0 , 0x00);
	mcp2515_bit_modify(MCP_CANCTRL, 0xE0 , MODE_LOOPBACK);
	*/	
	
	//mcp2515_bit_modify(MCP_RXF0SIDH, 0xff, 0x00);
	mcp2515_write(MCP_RXB0CTRL, MCP_RXBnCTRL_NOFILTER_bm, 1); // Set to no filter
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	60 e6       	ldi	r22, 0x60	; 96
 13e:	80 e6       	ldi	r24, 0x60	; 96
 140:	85 d1       	rcall	.+778    	; 0x44c <mcp2515_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	9f e8       	ldi	r25, 0x8F	; 143
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <can_init+0x22>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <can_init+0x28>
 14c:	00 00       	nop
	_delay_ms(30);
	
	
	
	mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 1); // Enable Interrupt when message is received
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	8b e2       	ldi	r24, 0x2B	; 43
 154:	a1 d1       	rcall	.+834    	; 0x498 <mcp2515_bit_modify>
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	9f e8       	ldi	r25, 0x8F	; 143
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <can_init+0x36>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <can_init+0x3c>
 160:	00 00       	nop
	_delay_ms(30);

	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);//0b11100000 instead of MODE_MASK
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	60 ee       	ldi	r22, 0xE0	; 224
 166:	8f e0       	ldi	r24, 0x0F	; 15
 168:	97 d1       	rcall	.+814    	; 0x498 <mcp2515_bit_modify>
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	9f e8       	ldi	r25, 0x8F	; 143
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <can_init+0x4a>
 172:	00 c0       	rjmp	.+0      	; 0x174 <can_init+0x50>
 174:	00 00       	nop
	_delay_ms(30);
	
	uint8_t mode_bits;
	uint8_t data[MAX_CAN_LENGTH];
	mcp2515_read(MCP_CANSTAT, data, MAX_CAN_LENGTH);
 176:	4a e0       	ldi	r20, 0x0A	; 10
 178:	be 01       	movw	r22, r28
 17a:	6f 5f       	subi	r22, 0xFF	; 255
 17c:	7f 4f       	sbci	r23, 0xFF	; 255
 17e:	8e e0       	ldi	r24, 0x0E	; 14
 180:	46 d1       	rcall	.+652    	; 0x40e <mcp2515_read>
	uint8_t val = data[0];
	
	mode_bits = (val & MODE_MASK);
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	80 7e       	andi	r24, 0xE0	; 224
	if(mode_bits != MODE_NORMAL){
 186:	99 f0       	breq	.+38     	; 0x1ae <can_init+0x8a>
		
		printf("MCP2515 is NOT in correct mode after reset! Its config bits are %x\n", mode_bits);
 188:	1f 92       	push	r1
 18a:	8f 93       	push	r24
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	9f 93       	push	r25
 192:	8f 93       	push	r24
 194:	46 d2       	rcall	.+1164   	; 0x622 <printf>
		printf("\n\r");
 196:	87 ed       	ldi	r24, 0xD7	; 215
 198:	92 e0       	ldi	r25, 0x02	; 2
 19a:	9f 93       	push	r25
 19c:	8f 93       	push	r24
 19e:	41 d2       	rcall	.+1154   	; 0x622 <printf>
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <can_init+0x98>
	}
	else
		printf("in mode normal \n\r");
 1ae:	8a e4       	ldi	r24, 0x4A	; 74
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	9f 93       	push	r25
 1b4:	8f 93       	push	r24
 1b6:	35 d2       	rcall	.+1130   	; 0x622 <printf>
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
	
}
 1bc:	2a 96       	adiw	r28, 0x0a	; 10
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <can_message_send>:

void can_message_send(struct can_message* msg)
{
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	8c 01       	movw	r16, r24
	
	//prinf("Sending message of length %d with id %d with data[0] %d", msg->length, msg->id)
	
	mcp2515_write(MCP_TXB0DLC, msg->length, 1);
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	fc 01       	movw	r30, r24
 1e2:	62 81       	ldd	r22, Z+2	; 0x02
 1e4:	85 e3       	ldi	r24, 0x35	; 53
 1e6:	32 d1       	rcall	.+612    	; 0x44c <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	f8 01       	movw	r30, r16
 1ec:	60 81       	ld	r22, Z
 1ee:	81 e3       	ldi	r24, 0x31	; 49
 1f0:	2d d1       	rcall	.+602    	; 0x44c <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, msg->id, 1);
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	f8 01       	movw	r30, r16
 1f6:	60 81       	ld	r22, Z
 1f8:	82 e3       	ldi	r24, 0x32	; 50
 1fa:	28 d1       	rcall	.+592    	; 0x44c <mcp2515_write>
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
 1fc:	f8 01       	movw	r30, r16
 1fe:	82 81       	ldd	r24, Z+2	; 0x02
 200:	88 23       	and	r24, r24
 202:	e9 f0       	breq	.+58     	; 0x23e <can_message_send+0x70>
 204:	d1 2c       	mov	r13, r1
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
		printf("can message send %d", msg->data[i]);
 206:	0f 2e       	mov	r0, r31
 208:	fc e5       	ldi	r31, 0x5C	; 92
 20a:	ef 2e       	mov	r14, r31
 20c:	f2 e0       	ldi	r31, 0x02	; 2
 20e:	ff 2e       	mov	r15, r31
 210:	f0 2d       	mov	r31, r0
	mcp2515_write(MCP_TXB0SIDL, msg->id, 1);
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
 212:	e8 01       	movw	r28, r16
 214:	cd 0d       	add	r28, r13
 216:	d1 1d       	adc	r29, r1
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	6b 81       	ldd	r22, Y+3	; 0x03
 21c:	86 e3       	ldi	r24, 0x36	; 54
 21e:	16 d1       	rcall	.+556    	; 0x44c <mcp2515_write>
		printf("can message send %d", msg->data[i]);
 220:	8b 81       	ldd	r24, Y+3	; 0x03
 222:	1f 92       	push	r1
 224:	8f 93       	push	r24
 226:	ff 92       	push	r15
 228:	ef 92       	push	r14
 22a:	fb d1       	rcall	.+1014   	; 0x622 <printf>
	mcp2515_write(MCP_TXB0DLC, msg->length, 1);
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
	mcp2515_write(MCP_TXB0SIDL, msg->id, 1);
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
 22c:	d3 94       	inc	r13
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	f8 01       	movw	r30, r16
 238:	82 81       	ldd	r24, Z+2	; 0x02
 23a:	d8 16       	cp	r13, r24
 23c:	50 f3       	brcs	.-44     	; 0x212 <can_message_send+0x44>
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
		printf("can message send %d", msg->data[i]);
	}
	printf("\n\r");
 23e:	87 ed       	ldi	r24, 0xD7	; 215
 240:	92 e0       	ldi	r25, 0x02	; 2
 242:	9f 93       	push	r25
 244:	8f 93       	push	r24
 246:	ed d1       	rcall	.+986    	; 0x622 <printf>
	mcp2515_request(MCP_RTS_TX0);
 248:	81 e8       	ldi	r24, 0x81	; 129
 24a:	16 d1       	rcall	.+556    	; 0x478 <mcp2515_request>
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
	//Do something...
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	df 90       	pop	r13
 25e:	08 95       	ret

00000260 <can_data_receive>:
{
	
}
*/
void can_data_receive(struct can_message* msg)
{
 260:	df 92       	push	r13
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	2a 97       	sbiw	r28, 0x0a	; 10
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	8c 01       	movw	r16, r24
	uint8_t result[MAX_CAN_LENGTH];
	
	int a = 1;
	
	mcp2515_read(MCP_CANINTF, result, 1);
 280:	41 e0       	ldi	r20, 0x01	; 1
 282:	be 01       	movw	r22, r28
 284:	6f 5f       	subi	r22, 0xFF	; 255
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	8c e2       	ldi	r24, 0x2C	; 44
 28a:	c1 d0       	rcall	.+386    	; 0x40e <mcp2515_read>

	if (!result[0]){
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	81 11       	cpse	r24, r1
 290:	0b c0       	rjmp	.+22     	; 0x2a8 <can_data_receive+0x48>
		printf("CANINTF out %d \n\r", result[0] & 0b1);
 292:	1f 92       	push	r1
 294:	1f 92       	push	r1
 296:	80 e7       	ldi	r24, 0x70	; 112
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	9f 93       	push	r25
 29c:	8f 93       	push	r24
 29e:	c1 d1       	rcall	.+898    	; 0x622 <printf>
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
	mcp2515_read(MCP_RXB0D(0) + buffer, result, 1);
	
	for(i=0; i < msg->length; i++)
		msg->data[i] = result[i];
	*/
	for (i = 0; i < msg->length; i++)
 2a8:	f8 01       	movw	r30, r16
 2aa:	82 81       	ldd	r24, Z+2	; 0x02
 2ac:	88 23       	and	r24, r24
 2ae:	41 f1       	breq	.+80     	; 0x300 <can_data_receive+0xa0>
 2b0:	d1 2c       	mov	r13, r1
	{
		mcp2515_read(MCP_RXB0D(0), result, 1);
		msg->data[i] = result[i];
		printf("can messsage received %d", msg->data[i]);
 2b2:	0f 2e       	mov	r0, r31
 2b4:	f2 e8       	ldi	r31, 0x82	; 130
 2b6:	ef 2e       	mov	r14, r31
 2b8:	f2 e0       	ldi	r31, 0x02	; 2
 2ba:	ff 2e       	mov	r15, r31
 2bc:	f0 2d       	mov	r31, r0
	for(i=0; i < msg->length; i++)
		msg->data[i] = result[i];
	*/
	for (i = 0; i < msg->length; i++)
	{
		mcp2515_read(MCP_RXB0D(0), result, 1);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	be 01       	movw	r22, r28
 2c2:	6f 5f       	subi	r22, 0xFF	; 255
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	86 e6       	ldi	r24, 0x66	; 102
 2c8:	a2 d0       	rcall	.+324    	; 0x40e <mcp2515_read>
		msg->data[i] = result[i];
 2ca:	2d 2d       	mov	r18, r13
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	e1 e0       	ldi	r30, 0x01	; 1
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	ec 0f       	add	r30, r28
 2d4:	fd 1f       	adc	r31, r29
 2d6:	e2 0f       	add	r30, r18
 2d8:	f3 1f       	adc	r31, r19
 2da:	80 81       	ld	r24, Z
 2dc:	f8 01       	movw	r30, r16
 2de:	e2 0f       	add	r30, r18
 2e0:	f3 1f       	adc	r31, r19
 2e2:	83 83       	std	Z+3, r24	; 0x03
		printf("can messsage received %d", msg->data[i]);
 2e4:	1f 92       	push	r1
 2e6:	8f 93       	push	r24
 2e8:	ff 92       	push	r15
 2ea:	ef 92       	push	r14
 2ec:	9a d1       	rcall	.+820    	; 0x622 <printf>
	mcp2515_read(MCP_RXB0D(0) + buffer, result, 1);
	
	for(i=0; i < msg->length; i++)
		msg->data[i] = result[i];
	*/
	for (i = 0; i < msg->length; i++)
 2ee:	d3 94       	inc	r13
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	f8 01       	movw	r30, r16
 2fa:	82 81       	ldd	r24, Z+2	; 0x02
 2fc:	d8 16       	cp	r13, r24
 2fe:	f8 f2       	brcs	.-66     	; 0x2be <can_data_receive+0x5e>
	{
		mcp2515_read(MCP_RXB0D(0), result, 1);
		msg->data[i] = result[i];
		printf("can messsage received %d", msg->data[i]);
	}
	printf("\n\r");
 300:	87 ed       	ldi	r24, 0xD7	; 215
 302:	92 e0       	ldi	r25, 0x02	; 2
 304:	9f 93       	push	r25
 306:	8f 93       	push	r24
 308:	8c d1       	rcall	.+792    	; 0x622 <printf>
	
	mcp2515_bit_modify(MCP_CANINTF, 0x01, 0x00);
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	8c e2       	ldi	r24, 0x2C	; 44
 310:	c3 d0       	rcall	.+390    	; 0x498 <mcp2515_bit_modify>
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
}
 316:	2a 96       	adiw	r28, 0x0a	; 10
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	df 90       	pop	r13
 330:	08 95       	ret

00000332 <main>:
#include "usart.h"
#include "can_controller.h"
#include "spi.h"


int main(void){
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	6a 97       	sbiw	r28, 0x1a	; 26
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
	
	USART_Init(MYUBRR);
 346:	87 e6       	ldi	r24, 0x67	; 103
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	11 d1       	rcall	.+546    	; 0x56e <USART_Init>
	printf("start \n\r \n");
 34c:	8b e9       	ldi	r24, 0x9B	; 155
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	79 d1       	rcall	.+754    	; 0x644 <puts>
	
	can_init();
 352:	e8 de       	rcall	.-560    	; 0x124 <can_init>
	

	
	struct can_message message;
	message.id = 3;
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	9a 83       	std	Y+2, r25	; 0x02
 35a:	89 83       	std	Y+1, r24	; 0x01
	message.length = 1;
 35c:	31 e0       	ldi	r19, 0x01	; 1
 35e:	3b 83       	std	Y+3, r19	; 0x03
	message.data[0] = (uint8_t) 'c';
 360:	23 e6       	ldi	r18, 0x63	; 99
 362:	2c 83       	std	Y+4, r18	; 0x04
	
	
	struct can_message message2;
	message2.id = 3;
 364:	9f 87       	std	Y+15, r25	; 0x0f
 366:	8e 87       	std	Y+14, r24	; 0x0e
	message2.length = 1;
 368:	38 8b       	std	Y+16, r19	; 0x10
	
	
	
	
	printf("In the main send %c \n\r", message.data[0]);
 36a:	1f 92       	push	r1
 36c:	2f 93       	push	r18
 36e:	85 ea       	ldi	r24, 0xA5	; 165
 370:	92 e0       	ldi	r25, 0x02	; 2
 372:	9f 93       	push	r25
 374:	8f 93       	push	r24
 376:	55 d1       	rcall	.+682    	; 0x622 <printf>
	
	can_message_send(&message);
 378:	ce 01       	movw	r24, r28
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	28 df       	rcall	.-432    	; 0x1ce <can_message_send>
 37e:	83 ed       	ldi	r24, 0xD3	; 211
 380:	90 e3       	ldi	r25, 0x30	; 48
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0x50>
 386:	00 c0       	rjmp	.+0      	; 0x388 <main+0x56>
 388:	00 00       	nop
	_delay_ms(50);
	can_data_receive(&message2);
 38a:	ce 01       	movw	r24, r28
 38c:	0e 96       	adiw	r24, 0x0e	; 14
 38e:	68 df       	rcall	.-304    	; 0x260 <can_data_receive>
	
	
	printf("In the main received %c \n\r \n\r", message2.data[0]);
 390:	89 89       	ldd	r24, Y+17	; 0x11
 392:	1f 92       	push	r1
 394:	8f 93       	push	r24
 396:	8c eb       	ldi	r24, 0xBC	; 188
 398:	92 e0       	ldi	r25, 0x02	; 2
 39a:	9f 93       	push	r25
 39c:	8f 93       	push	r24
 39e:	41 d1       	rcall	.+642    	; 0x622 <printf>
	
	message.data[0] = (uint8_t) 'g';
 3a0:	87 e6       	ldi	r24, 0x67	; 103
 3a2:	8c 83       	std	Y+4, r24	; 0x04
	
	printf("In the main send %c \n\r", message.data[0]);
 3a4:	1f 92       	push	r1
 3a6:	8f 93       	push	r24
 3a8:	85 ea       	ldi	r24, 0xA5	; 165
 3aa:	92 e0       	ldi	r25, 0x02	; 2
 3ac:	9f 93       	push	r25
 3ae:	8f 93       	push	r24
 3b0:	38 d1       	rcall	.+624    	; 0x622 <printf>
	
	can_message_send(&message);
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	0b df       	rcall	.-490    	; 0x1ce <can_message_send>
 3b8:	83 ed       	ldi	r24, 0xD3	; 211
 3ba:	90 e3       	ldi	r25, 0x30	; 48
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <main+0x8a>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x90>
 3c2:	00 00       	nop
	_delay_ms(50);
	can_data_receive(&message2);
 3c4:	ce 01       	movw	r24, r28
 3c6:	0e 96       	adiw	r24, 0x0e	; 14
 3c8:	4b df       	rcall	.-362    	; 0x260 <can_data_receive>
	
	
	printf("In the main received %c \n\r \n\r", message2.data[0]);
 3ca:	89 89       	ldd	r24, Y+17	; 0x11
 3cc:	1f 92       	push	r1
 3ce:	8f 93       	push	r24
 3d0:	8c eb       	ldi	r24, 0xBC	; 188
 3d2:	92 e0       	ldi	r25, 0x02	; 2
 3d4:	9f 93       	push	r25
 3d6:	8f 93       	push	r24
 3d8:	24 d1       	rcall	.+584    	; 0x622 <printf>
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <main+0xb2>

000003e6 <mcp2515_reset>:
	 spi_init();
	 mcp2515_reset();
}

void mcp2515_reset()
{
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	1f 92       	push	r1
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PB7); // Select CAN-controller
 3f0:	2f 98       	cbi	0x05, 7	; 5
	//SPSR &= ~(1 << SPIF);	
	
	uint8_t reset[] = {MCP_RESET};
 3f2:	80 ec       	ldi	r24, 0xC0	; 192
 3f4:	89 83       	std	Y+1, r24	; 0x01
	spi_write(reset, 1);
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	ce 01       	movw	r24, r28
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	94 d0       	rcall	.+296    	; 0x526 <spi_write>
	
	PORTB |= (1<<PB7); // DeselectCAN-controller
 3fe:	2f 9a       	sbi	0x05, 7	; 5
}
 400:	0f 90       	pop	r0
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <mcp2515_init>:
#include "MCP2515_driver.h"


void mcp2515_init() 
{
	 spi_init();
 408:	5f d0       	rcall	.+190    	; 0x4c8 <spi_init>
	 mcp2515_reset();
 40a:	ed cf       	rjmp	.-38     	; 0x3e6 <mcp2515_reset>
 40c:	08 95       	ret

0000040e <mcp2515_read>:
	PORTB |= (1<<PB7); // DeselectCAN-controller
}


void mcp2515_read(uint8_t address, uint8_t result[MAX_CAN_LENGTH], uint8_t data_size)
{	
 40e:	ff 92       	push	r15
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	1f 92       	push	r1
 41a:	1f 92       	push	r1
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
 420:	8b 01       	movw	r16, r22
 422:	f4 2e       	mov	r15, r20
	PORTB &= ~(1<<PB7); // Select CAN-controller pb7  PINB0
 424:	2f 98       	cbi	0x05, 7	; 5
	//SPSR &= ~(1 << SPIF); 
	
	uint8_t write[] = {MCP_READ, address};
 426:	93 e0       	ldi	r25, 0x03	; 3
 428:	99 83       	std	Y+1, r25	; 0x01
 42a:	8a 83       	std	Y+2, r24	; 0x02
	spi_write(write, 2); // Send read instruction
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	ce 01       	movw	r24, r28
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	79 d0       	rcall	.+242    	; 0x526 <spi_write>
	
	spi_read(result, data_size); // Readresult
 434:	6f 2d       	mov	r22, r15
 436:	c8 01       	movw	r24, r16
 438:	50 d0       	rcall	.+160    	; 0x4da <spi_read>
	
	PORTB |= (1<<PB7); // DeselectCAN-controller
 43a:	2f 9a       	sbi	0x05, 7	; 5
	
	
}
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	08 95       	ret

0000044c <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data, uint8_t data_size)
{
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	00 d0       	rcall	.+0      	; 0x452 <mcp2515_write+0x6>
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PB7); // Select CAN-controller
 456:	2f 98       	cbi	0x05, 7	; 5
	//SPSR &= ~(1 << SPIF);
	
	uint8_t write[] = {MCP_WRITE, address, data};
 458:	92 e0       	ldi	r25, 0x02	; 2
 45a:	99 83       	std	Y+1, r25	; 0x01
 45c:	8a 83       	std	Y+2, r24	; 0x02
 45e:	6b 83       	std	Y+3, r22	; 0x03
	spi_write(write, data_size + 2); // Send read instruction
 460:	62 e0       	ldi	r22, 0x02	; 2
 462:	64 0f       	add	r22, r20
 464:	ce 01       	movw	r24, r28
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	5e d0       	rcall	.+188    	; 0x526 <spi_write>
	
	PORTB |= (1<<PB7); // DeselectCAN-controller
 46a:	2f 9a       	sbi	0x05, 7	; 5
		
}
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <mcp2515_request>:

void mcp2515_request(uint8_t rqs)
{
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	1f 92       	push	r1
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PB7); // Select CAN-controller
 482:	2f 98       	cbi	0x05, 7	; 5
	//SPSR &= ~(1 << SPIF);		
		
	uint8_t cmd[] = {rqs};
 484:	89 83       	std	Y+1, r24	; 0x01
	spi_write(cmd, 1);		
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	ce 01       	movw	r24, r28
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	4c d0       	rcall	.+152    	; 0x526 <spi_write>
	
	PORTB |= (1<<PB7); // Deselect CAN-controller
 48e:	2f 9a       	sbi	0x05, 7	; 5
}
 490:	0f 90       	pop	r0
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

00000498 <mcp2515_bit_modify>:

// Modify bits in the register / See datasheet 12.10
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) 
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	00 d0       	rcall	.+0      	; 0x49e <mcp2515_bit_modify+0x6>
 49e:	1f 92       	push	r1
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PB7); // Select CAN-controller
 4a4:	2f 98       	cbi	0x05, 7	; 5
	//SPSR &= ~(1 << SPIF);	

	uint8_t bit_list[] = {MCP_BITMOD, address, mask, data};
 4a6:	95 e0       	ldi	r25, 0x05	; 5
 4a8:	99 83       	std	Y+1, r25	; 0x01
 4aa:	8a 83       	std	Y+2, r24	; 0x02
 4ac:	6b 83       	std	Y+3, r22	; 0x03
 4ae:	4c 83       	std	Y+4, r20	; 0x04
	spi_write(bit_list, 4);	
 4b0:	64 e0       	ldi	r22, 0x04	; 4
 4b2:	ce 01       	movw	r24, r28
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	37 d0       	rcall	.+110    	; 0x526 <spi_write>
	
	PORTB |= (1<<PB7); //Deselect CAN-controller
 4b8:	2f 9a       	sbi	0x05, 7	; 5

}
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <spi_init>:
#define MISO_PIN PB3

void spi_init() {

  /* Set MOSI and SCK and CS output, all others input */
  DDRB |= (1 << MOSI_PIN) | (1 << SCK_PIN) | (1 << SS_PIN) | (1 << PB0);
 4c8:	84 b1       	in	r24, 0x04	; 4
 4ca:	87 68       	ori	r24, 0x87	; 135
 4cc:	84 b9       	out	0x04, r24	; 4
  PORTB |= (1 << SS_PIN) | (1 << PB0); // Set Master mode
 4ce:	85 b1       	in	r24, 0x05	; 5
 4d0:	81 68       	ori	r24, 0x81	; 129
 4d2:	85 b9       	out	0x05, r24	; 5
  /* Enable interrupt */
  // SPSR = (1<<SPIF);

  /* Enable SPI interrupt, SPI, Master, set clock rate fck/16 , SPI mode 0 by
   * default*/
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 4d4:	81 e5       	ldi	r24, 0x51	; 81
 4d6:	8c bd       	out	0x2c, r24	; 44
 4d8:	08 95       	ret

000004da <spi_read>:
}

void spi_read(uint8_t *receive_data, uint8_t data_length) 
{
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	2a 97       	sbiw	r28, 0x0a	; 10
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	f8 94       	cli
 4e8:	de bf       	out	0x3e, r29	; 62
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	cd bf       	out	0x3d, r28	; 61
	uint8_t dummy_data[MAX_CAN_LENGTH];
	
	for (int i = 0; i < data_length; i++)
 4ee:	66 23       	and	r22, r22
 4f0:	89 f0       	breq	.+34     	; 0x514 <spi_read+0x3a>
 4f2:	fe 01       	movw	r30, r28
 4f4:	31 96       	adiw	r30, 0x01	; 1
 4f6:	a8 2f       	mov	r26, r24
 4f8:	b9 2f       	mov	r27, r25
 4fa:	cf 01       	movw	r24, r30
 4fc:	86 0f       	add	r24, r22
 4fe:	91 1d       	adc	r25, r1
	{
		SPDR = dummy_data[i];
 500:	21 91       	ld	r18, Z+
 502:	2e bd       	out	0x2e, r18	; 46
		int j = 0;
		while (!(SPSR & (1 << SPIF))){
 504:	0d b4       	in	r0, 0x2d	; 45
 506:	07 fe       	sbrs	r0, 7
 508:	fd cf       	rjmp	.-6      	; 0x504 <spi_read+0x2a>
			//printf("I am stuck here %d\n\r ",j++);			
		}
		receive_data[i] = SPDR;
 50a:	2e b5       	in	r18, 0x2e	; 46
 50c:	2d 93       	st	X+, r18

void spi_read(uint8_t *receive_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	
	for (int i = 0; i < data_length; i++)
 50e:	e8 17       	cp	r30, r24
 510:	f9 07       	cpc	r31, r25
 512:	b1 f7       	brne	.-20     	; 0x500 <spi_read+0x26>
			//printf("I am stuck here %d\n\r ",j++);			
		}
		receive_data[i] = SPDR;
	}
	
}
 514:	2a 96       	adiw	r28, 0x0a	; 10
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	f8 94       	cli
 51a:	de bf       	out	0x3e, r29	; 62
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	cd bf       	out	0x3d, r28	; 61
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <spi_write>:

void spi_write(uint8_t *send_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	for (int i = 0; i < data_length; i++)
 526:	26 2f       	mov	r18, r22
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	12 16       	cp	r1, r18
 52c:	13 06       	cpc	r1, r19
 52e:	74 f4       	brge	.+28     	; 0x54c <spi_write+0x26>
 530:	e8 2f       	mov	r30, r24
 532:	f9 2f       	mov	r31, r25
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
	{
		SPDR = send_data[i];
 538:	41 91       	ld	r20, Z+
 53a:	4e bd       	out	0x2e, r20	; 46
		while (!(SPSR & (1 << SPIF)));
 53c:	0d b4       	in	r0, 0x2d	; 45
 53e:	07 fe       	sbrs	r0, 7
 540:	fd cf       	rjmp	.-6      	; 0x53c <spi_write+0x16>
		dummy_data[i] = SPDR;
 542:	4e b5       	in	r20, 0x2e	; 46
}

void spi_write(uint8_t *send_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	for (int i = 0; i < data_length; i++)
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	82 17       	cp	r24, r18
 548:	93 07       	cpc	r25, r19
 54a:	b4 f3       	brlt	.-20     	; 0x538 <spi_write+0x12>
 54c:	08 95       	ret

0000054e <USART_Transmit>:
 54e:	e0 ec       	ldi	r30, 0xC0	; 192
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	90 81       	ld	r25, Z
 554:	95 ff       	sbrs	r25, 5
 556:	fd cf       	rjmp	.-6      	; 0x552 <USART_Transmit+0x4>
 558:	80 93 c6 00 	sts	0x00C6, r24
 55c:	08 95       	ret

0000055e <USART_Receive>:
 55e:	e0 ec       	ldi	r30, 0xC0	; 192
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	88 23       	and	r24, r24
 566:	ec f3       	brlt	.-6      	; 0x562 <USART_Receive+0x4>
 568:	80 91 c6 00 	lds	r24, 0x00C6
 56c:	08 95       	ret

0000056e <USART_Init>:
 56e:	90 93 c5 00 	sts	0x00C5, r25
 572:	80 93 c4 00 	sts	0x00C4, r24
 576:	88 e1       	ldi	r24, 0x18	; 24
 578:	80 93 c1 00 	sts	0x00C1, r24
 57c:	8e e0       	ldi	r24, 0x0E	; 14
 57e:	80 93 c2 00 	sts	0x00C2, r24
 582:	6f ea       	ldi	r22, 0xAF	; 175
 584:	72 e0       	ldi	r23, 0x02	; 2
 586:	87 ea       	ldi	r24, 0xA7	; 167
 588:	92 e0       	ldi	r25, 0x02	; 2
 58a:	01 c0       	rjmp	.+2      	; 0x58e <fdevopen>
 58c:	08 95       	ret

0000058e <fdevopen>:
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	ec 01       	movw	r28, r24
 598:	8b 01       	movw	r16, r22
 59a:	00 97       	sbiw	r24, 0x00	; 0
 59c:	31 f4       	brne	.+12     	; 0x5aa <fdevopen+0x1c>
 59e:	61 15       	cp	r22, r1
 5a0:	71 05       	cpc	r23, r1
 5a2:	19 f4       	brne	.+6      	; 0x5aa <fdevopen+0x1c>
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	37 c0       	rjmp	.+110    	; 0x618 <fdevopen+0x8a>
 5aa:	6e e0       	ldi	r22, 0x0E	; 14
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	63 d2       	rcall	.+1222   	; 0xa7a <calloc>
 5b4:	fc 01       	movw	r30, r24
 5b6:	00 97       	sbiw	r24, 0x00	; 0
 5b8:	a9 f3       	breq	.-22     	; 0x5a4 <fdevopen+0x16>
 5ba:	80 e8       	ldi	r24, 0x80	; 128
 5bc:	83 83       	std	Z+3, r24	; 0x03
 5be:	01 15       	cp	r16, r1
 5c0:	11 05       	cpc	r17, r1
 5c2:	71 f0       	breq	.+28     	; 0x5e0 <fdevopen+0x52>
 5c4:	13 87       	std	Z+11, r17	; 0x0b
 5c6:	02 87       	std	Z+10, r16	; 0x0a
 5c8:	81 e8       	ldi	r24, 0x81	; 129
 5ca:	83 83       	std	Z+3, r24	; 0x03
 5cc:	80 91 da 02 	lds	r24, 0x02DA
 5d0:	90 91 db 02 	lds	r25, 0x02DB
 5d4:	89 2b       	or	r24, r25
 5d6:	21 f4       	brne	.+8      	; 0x5e0 <fdevopen+0x52>
 5d8:	f0 93 db 02 	sts	0x02DB, r31
 5dc:	e0 93 da 02 	sts	0x02DA, r30
 5e0:	20 97       	sbiw	r28, 0x00	; 0
 5e2:	c9 f0       	breq	.+50     	; 0x616 <fdevopen+0x88>
 5e4:	d1 87       	std	Z+9, r29	; 0x09
 5e6:	c0 87       	std	Z+8, r28	; 0x08
 5e8:	83 81       	ldd	r24, Z+3	; 0x03
 5ea:	82 60       	ori	r24, 0x02	; 2
 5ec:	83 83       	std	Z+3, r24	; 0x03
 5ee:	80 91 dc 02 	lds	r24, 0x02DC
 5f2:	90 91 dd 02 	lds	r25, 0x02DD
 5f6:	89 2b       	or	r24, r25
 5f8:	71 f4       	brne	.+28     	; 0x616 <fdevopen+0x88>
 5fa:	f0 93 dd 02 	sts	0x02DD, r31
 5fe:	e0 93 dc 02 	sts	0x02DC, r30
 602:	80 91 de 02 	lds	r24, 0x02DE
 606:	90 91 df 02 	lds	r25, 0x02DF
 60a:	89 2b       	or	r24, r25
 60c:	21 f4       	brne	.+8      	; 0x616 <fdevopen+0x88>
 60e:	f0 93 df 02 	sts	0x02DF, r31
 612:	e0 93 de 02 	sts	0x02DE, r30
 616:	cf 01       	movw	r24, r30
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	1f 91       	pop	r17
 61e:	0f 91       	pop	r16
 620:	08 95       	ret

00000622 <printf>:
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
 62a:	fe 01       	movw	r30, r28
 62c:	36 96       	adiw	r30, 0x06	; 6
 62e:	61 91       	ld	r22, Z+
 630:	71 91       	ld	r23, Z+
 632:	af 01       	movw	r20, r30
 634:	80 91 dc 02 	lds	r24, 0x02DC
 638:	90 91 dd 02 	lds	r25, 0x02DD
 63c:	30 d0       	rcall	.+96     	; 0x69e <vfprintf>
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <puts>:
 644:	0f 93       	push	r16
 646:	1f 93       	push	r17
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	e0 91 dc 02 	lds	r30, 0x02DC
 650:	f0 91 dd 02 	lds	r31, 0x02DD
 654:	23 81       	ldd	r18, Z+3	; 0x03
 656:	21 ff       	sbrs	r18, 1
 658:	1b c0       	rjmp	.+54     	; 0x690 <puts+0x4c>
 65a:	ec 01       	movw	r28, r24
 65c:	00 e0       	ldi	r16, 0x00	; 0
 65e:	10 e0       	ldi	r17, 0x00	; 0
 660:	89 91       	ld	r24, Y+
 662:	60 91 dc 02 	lds	r22, 0x02DC
 666:	70 91 dd 02 	lds	r23, 0x02DD
 66a:	db 01       	movw	r26, r22
 66c:	18 96       	adiw	r26, 0x08	; 8
 66e:	ed 91       	ld	r30, X+
 670:	fc 91       	ld	r31, X
 672:	19 97       	sbiw	r26, 0x09	; 9
 674:	88 23       	and	r24, r24
 676:	31 f0       	breq	.+12     	; 0x684 <puts+0x40>
 678:	19 95       	eicall
 67a:	89 2b       	or	r24, r25
 67c:	89 f3       	breq	.-30     	; 0x660 <puts+0x1c>
 67e:	0f ef       	ldi	r16, 0xFF	; 255
 680:	1f ef       	ldi	r17, 0xFF	; 255
 682:	ee cf       	rjmp	.-36     	; 0x660 <puts+0x1c>
 684:	8a e0       	ldi	r24, 0x0A	; 10
 686:	19 95       	eicall
 688:	89 2b       	or	r24, r25
 68a:	11 f4       	brne	.+4      	; 0x690 <puts+0x4c>
 68c:	c8 01       	movw	r24, r16
 68e:	02 c0       	rjmp	.+4      	; 0x694 <puts+0x50>
 690:	8f ef       	ldi	r24, 0xFF	; 255
 692:	9f ef       	ldi	r25, 0xFF	; 255
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	1f 91       	pop	r17
 69a:	0f 91       	pop	r16
 69c:	08 95       	ret

0000069e <vfprintf>:
 69e:	2f 92       	push	r2
 6a0:	3f 92       	push	r3
 6a2:	4f 92       	push	r4
 6a4:	5f 92       	push	r5
 6a6:	6f 92       	push	r6
 6a8:	7f 92       	push	r7
 6aa:	8f 92       	push	r8
 6ac:	9f 92       	push	r9
 6ae:	af 92       	push	r10
 6b0:	bf 92       	push	r11
 6b2:	cf 92       	push	r12
 6b4:	df 92       	push	r13
 6b6:	ef 92       	push	r14
 6b8:	ff 92       	push	r15
 6ba:	0f 93       	push	r16
 6bc:	1f 93       	push	r17
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	cd b7       	in	r28, 0x3d	; 61
 6c4:	de b7       	in	r29, 0x3e	; 62
 6c6:	2c 97       	sbiw	r28, 0x0c	; 12
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	f8 94       	cli
 6cc:	de bf       	out	0x3e, r29	; 62
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	cd bf       	out	0x3d, r28	; 61
 6d2:	7c 01       	movw	r14, r24
 6d4:	6b 01       	movw	r12, r22
 6d6:	8a 01       	movw	r16, r20
 6d8:	fc 01       	movw	r30, r24
 6da:	17 82       	std	Z+7, r1	; 0x07
 6dc:	16 82       	std	Z+6, r1	; 0x06
 6de:	83 81       	ldd	r24, Z+3	; 0x03
 6e0:	81 ff       	sbrs	r24, 1
 6e2:	b0 c1       	rjmp	.+864    	; 0xa44 <vfprintf+0x3a6>
 6e4:	ce 01       	movw	r24, r28
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	4c 01       	movw	r8, r24
 6ea:	f7 01       	movw	r30, r14
 6ec:	93 81       	ldd	r25, Z+3	; 0x03
 6ee:	f6 01       	movw	r30, r12
 6f0:	93 fd       	sbrc	r25, 3
 6f2:	85 91       	lpm	r24, Z+
 6f4:	93 ff       	sbrs	r25, 3
 6f6:	81 91       	ld	r24, Z+
 6f8:	6f 01       	movw	r12, r30
 6fa:	88 23       	and	r24, r24
 6fc:	09 f4       	brne	.+2      	; 0x700 <vfprintf+0x62>
 6fe:	9e c1       	rjmp	.+828    	; 0xa3c <vfprintf+0x39e>
 700:	85 32       	cpi	r24, 0x25	; 37
 702:	39 f4       	brne	.+14     	; 0x712 <vfprintf+0x74>
 704:	93 fd       	sbrc	r25, 3
 706:	85 91       	lpm	r24, Z+
 708:	93 ff       	sbrs	r25, 3
 70a:	81 91       	ld	r24, Z+
 70c:	6f 01       	movw	r12, r30
 70e:	85 32       	cpi	r24, 0x25	; 37
 710:	21 f4       	brne	.+8      	; 0x71a <vfprintf+0x7c>
 712:	b7 01       	movw	r22, r14
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0f d3       	rcall	.+1566   	; 0xd36 <fputc>
 718:	e8 cf       	rjmp	.-48     	; 0x6ea <vfprintf+0x4c>
 71a:	51 2c       	mov	r5, r1
 71c:	31 2c       	mov	r3, r1
 71e:	20 e0       	ldi	r18, 0x00	; 0
 720:	20 32       	cpi	r18, 0x20	; 32
 722:	a0 f4       	brcc	.+40     	; 0x74c <vfprintf+0xae>
 724:	8b 32       	cpi	r24, 0x2B	; 43
 726:	69 f0       	breq	.+26     	; 0x742 <vfprintf+0xa4>
 728:	30 f4       	brcc	.+12     	; 0x736 <vfprintf+0x98>
 72a:	80 32       	cpi	r24, 0x20	; 32
 72c:	59 f0       	breq	.+22     	; 0x744 <vfprintf+0xa6>
 72e:	83 32       	cpi	r24, 0x23	; 35
 730:	69 f4       	brne	.+26     	; 0x74c <vfprintf+0xae>
 732:	20 61       	ori	r18, 0x10	; 16
 734:	2c c0       	rjmp	.+88     	; 0x78e <vfprintf+0xf0>
 736:	8d 32       	cpi	r24, 0x2D	; 45
 738:	39 f0       	breq	.+14     	; 0x748 <vfprintf+0xaa>
 73a:	80 33       	cpi	r24, 0x30	; 48
 73c:	39 f4       	brne	.+14     	; 0x74c <vfprintf+0xae>
 73e:	21 60       	ori	r18, 0x01	; 1
 740:	26 c0       	rjmp	.+76     	; 0x78e <vfprintf+0xf0>
 742:	22 60       	ori	r18, 0x02	; 2
 744:	24 60       	ori	r18, 0x04	; 4
 746:	23 c0       	rjmp	.+70     	; 0x78e <vfprintf+0xf0>
 748:	28 60       	ori	r18, 0x08	; 8
 74a:	21 c0       	rjmp	.+66     	; 0x78e <vfprintf+0xf0>
 74c:	27 fd       	sbrc	r18, 7
 74e:	27 c0       	rjmp	.+78     	; 0x79e <vfprintf+0x100>
 750:	30 ed       	ldi	r19, 0xD0	; 208
 752:	38 0f       	add	r19, r24
 754:	3a 30       	cpi	r19, 0x0A	; 10
 756:	78 f4       	brcc	.+30     	; 0x776 <vfprintf+0xd8>
 758:	26 ff       	sbrs	r18, 6
 75a:	06 c0       	rjmp	.+12     	; 0x768 <vfprintf+0xca>
 75c:	fa e0       	ldi	r31, 0x0A	; 10
 75e:	5f 9e       	mul	r5, r31
 760:	30 0d       	add	r19, r0
 762:	11 24       	eor	r1, r1
 764:	53 2e       	mov	r5, r19
 766:	13 c0       	rjmp	.+38     	; 0x78e <vfprintf+0xf0>
 768:	8a e0       	ldi	r24, 0x0A	; 10
 76a:	38 9e       	mul	r3, r24
 76c:	30 0d       	add	r19, r0
 76e:	11 24       	eor	r1, r1
 770:	33 2e       	mov	r3, r19
 772:	20 62       	ori	r18, 0x20	; 32
 774:	0c c0       	rjmp	.+24     	; 0x78e <vfprintf+0xf0>
 776:	8e 32       	cpi	r24, 0x2E	; 46
 778:	21 f4       	brne	.+8      	; 0x782 <vfprintf+0xe4>
 77a:	26 fd       	sbrc	r18, 6
 77c:	5f c1       	rjmp	.+702    	; 0xa3c <vfprintf+0x39e>
 77e:	20 64       	ori	r18, 0x40	; 64
 780:	06 c0       	rjmp	.+12     	; 0x78e <vfprintf+0xf0>
 782:	8c 36       	cpi	r24, 0x6C	; 108
 784:	11 f4       	brne	.+4      	; 0x78a <vfprintf+0xec>
 786:	20 68       	ori	r18, 0x80	; 128
 788:	02 c0       	rjmp	.+4      	; 0x78e <vfprintf+0xf0>
 78a:	88 36       	cpi	r24, 0x68	; 104
 78c:	41 f4       	brne	.+16     	; 0x79e <vfprintf+0x100>
 78e:	f6 01       	movw	r30, r12
 790:	93 fd       	sbrc	r25, 3
 792:	85 91       	lpm	r24, Z+
 794:	93 ff       	sbrs	r25, 3
 796:	81 91       	ld	r24, Z+
 798:	6f 01       	movw	r12, r30
 79a:	81 11       	cpse	r24, r1
 79c:	c1 cf       	rjmp	.-126    	; 0x720 <vfprintf+0x82>
 79e:	98 2f       	mov	r25, r24
 7a0:	9f 7d       	andi	r25, 0xDF	; 223
 7a2:	95 54       	subi	r25, 0x45	; 69
 7a4:	93 30       	cpi	r25, 0x03	; 3
 7a6:	28 f4       	brcc	.+10     	; 0x7b2 <vfprintf+0x114>
 7a8:	0c 5f       	subi	r16, 0xFC	; 252
 7aa:	1f 4f       	sbci	r17, 0xFF	; 255
 7ac:	ff e3       	ldi	r31, 0x3F	; 63
 7ae:	f9 83       	std	Y+1, r31	; 0x01
 7b0:	0d c0       	rjmp	.+26     	; 0x7cc <vfprintf+0x12e>
 7b2:	83 36       	cpi	r24, 0x63	; 99
 7b4:	31 f0       	breq	.+12     	; 0x7c2 <vfprintf+0x124>
 7b6:	83 37       	cpi	r24, 0x73	; 115
 7b8:	71 f0       	breq	.+28     	; 0x7d6 <vfprintf+0x138>
 7ba:	83 35       	cpi	r24, 0x53	; 83
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <vfprintf+0x122>
 7be:	57 c0       	rjmp	.+174    	; 0x86e <vfprintf+0x1d0>
 7c0:	21 c0       	rjmp	.+66     	; 0x804 <vfprintf+0x166>
 7c2:	f8 01       	movw	r30, r16
 7c4:	80 81       	ld	r24, Z
 7c6:	89 83       	std	Y+1, r24	; 0x01
 7c8:	0e 5f       	subi	r16, 0xFE	; 254
 7ca:	1f 4f       	sbci	r17, 0xFF	; 255
 7cc:	44 24       	eor	r4, r4
 7ce:	43 94       	inc	r4
 7d0:	51 2c       	mov	r5, r1
 7d2:	54 01       	movw	r10, r8
 7d4:	14 c0       	rjmp	.+40     	; 0x7fe <vfprintf+0x160>
 7d6:	38 01       	movw	r6, r16
 7d8:	f2 e0       	ldi	r31, 0x02	; 2
 7da:	6f 0e       	add	r6, r31
 7dc:	71 1c       	adc	r7, r1
 7de:	f8 01       	movw	r30, r16
 7e0:	a0 80       	ld	r10, Z
 7e2:	b1 80       	ldd	r11, Z+1	; 0x01
 7e4:	26 ff       	sbrs	r18, 6
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <vfprintf+0x150>
 7e8:	65 2d       	mov	r22, r5
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <vfprintf+0x154>
 7ee:	6f ef       	ldi	r22, 0xFF	; 255
 7f0:	7f ef       	ldi	r23, 0xFF	; 255
 7f2:	c5 01       	movw	r24, r10
 7f4:	2c 87       	std	Y+12, r18	; 0x0c
 7f6:	94 d2       	rcall	.+1320   	; 0xd20 <strnlen>
 7f8:	2c 01       	movw	r4, r24
 7fa:	83 01       	movw	r16, r6
 7fc:	2c 85       	ldd	r18, Y+12	; 0x0c
 7fe:	2f 77       	andi	r18, 0x7F	; 127
 800:	22 2e       	mov	r2, r18
 802:	16 c0       	rjmp	.+44     	; 0x830 <vfprintf+0x192>
 804:	38 01       	movw	r6, r16
 806:	f2 e0       	ldi	r31, 0x02	; 2
 808:	6f 0e       	add	r6, r31
 80a:	71 1c       	adc	r7, r1
 80c:	f8 01       	movw	r30, r16
 80e:	a0 80       	ld	r10, Z
 810:	b1 80       	ldd	r11, Z+1	; 0x01
 812:	26 ff       	sbrs	r18, 6
 814:	03 c0       	rjmp	.+6      	; 0x81c <vfprintf+0x17e>
 816:	65 2d       	mov	r22, r5
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <vfprintf+0x182>
 81c:	6f ef       	ldi	r22, 0xFF	; 255
 81e:	7f ef       	ldi	r23, 0xFF	; 255
 820:	c5 01       	movw	r24, r10
 822:	2c 87       	std	Y+12, r18	; 0x0c
 824:	6b d2       	rcall	.+1238   	; 0xcfc <strnlen_P>
 826:	2c 01       	movw	r4, r24
 828:	2c 85       	ldd	r18, Y+12	; 0x0c
 82a:	20 68       	ori	r18, 0x80	; 128
 82c:	22 2e       	mov	r2, r18
 82e:	83 01       	movw	r16, r6
 830:	23 fc       	sbrc	r2, 3
 832:	19 c0       	rjmp	.+50     	; 0x866 <vfprintf+0x1c8>
 834:	83 2d       	mov	r24, r3
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	48 16       	cp	r4, r24
 83a:	59 06       	cpc	r5, r25
 83c:	a0 f4       	brcc	.+40     	; 0x866 <vfprintf+0x1c8>
 83e:	b7 01       	movw	r22, r14
 840:	80 e2       	ldi	r24, 0x20	; 32
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	78 d2       	rcall	.+1264   	; 0xd36 <fputc>
 846:	3a 94       	dec	r3
 848:	f5 cf       	rjmp	.-22     	; 0x834 <vfprintf+0x196>
 84a:	f5 01       	movw	r30, r10
 84c:	27 fc       	sbrc	r2, 7
 84e:	85 91       	lpm	r24, Z+
 850:	27 fe       	sbrs	r2, 7
 852:	81 91       	ld	r24, Z+
 854:	5f 01       	movw	r10, r30
 856:	b7 01       	movw	r22, r14
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	6d d2       	rcall	.+1242   	; 0xd36 <fputc>
 85c:	31 10       	cpse	r3, r1
 85e:	3a 94       	dec	r3
 860:	f1 e0       	ldi	r31, 0x01	; 1
 862:	4f 1a       	sub	r4, r31
 864:	51 08       	sbc	r5, r1
 866:	41 14       	cp	r4, r1
 868:	51 04       	cpc	r5, r1
 86a:	79 f7       	brne	.-34     	; 0x84a <vfprintf+0x1ac>
 86c:	de c0       	rjmp	.+444    	; 0xa2a <vfprintf+0x38c>
 86e:	84 36       	cpi	r24, 0x64	; 100
 870:	11 f0       	breq	.+4      	; 0x876 <vfprintf+0x1d8>
 872:	89 36       	cpi	r24, 0x69	; 105
 874:	31 f5       	brne	.+76     	; 0x8c2 <vfprintf+0x224>
 876:	f8 01       	movw	r30, r16
 878:	27 ff       	sbrs	r18, 7
 87a:	07 c0       	rjmp	.+14     	; 0x88a <vfprintf+0x1ec>
 87c:	60 81       	ld	r22, Z
 87e:	71 81       	ldd	r23, Z+1	; 0x01
 880:	82 81       	ldd	r24, Z+2	; 0x02
 882:	93 81       	ldd	r25, Z+3	; 0x03
 884:	0c 5f       	subi	r16, 0xFC	; 252
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	08 c0       	rjmp	.+16     	; 0x89a <vfprintf+0x1fc>
 88a:	60 81       	ld	r22, Z
 88c:	71 81       	ldd	r23, Z+1	; 0x01
 88e:	88 27       	eor	r24, r24
 890:	77 fd       	sbrc	r23, 7
 892:	80 95       	com	r24
 894:	98 2f       	mov	r25, r24
 896:	0e 5f       	subi	r16, 0xFE	; 254
 898:	1f 4f       	sbci	r17, 0xFF	; 255
 89a:	2f 76       	andi	r18, 0x6F	; 111
 89c:	b2 2e       	mov	r11, r18
 89e:	97 ff       	sbrs	r25, 7
 8a0:	09 c0       	rjmp	.+18     	; 0x8b4 <vfprintf+0x216>
 8a2:	90 95       	com	r25
 8a4:	80 95       	com	r24
 8a6:	70 95       	com	r23
 8a8:	61 95       	neg	r22
 8aa:	7f 4f       	sbci	r23, 0xFF	; 255
 8ac:	8f 4f       	sbci	r24, 0xFF	; 255
 8ae:	9f 4f       	sbci	r25, 0xFF	; 255
 8b0:	20 68       	ori	r18, 0x80	; 128
 8b2:	b2 2e       	mov	r11, r18
 8b4:	2a e0       	ldi	r18, 0x0A	; 10
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	a4 01       	movw	r20, r8
 8ba:	6f d2       	rcall	.+1246   	; 0xd9a <__ultoa_invert>
 8bc:	a8 2e       	mov	r10, r24
 8be:	a8 18       	sub	r10, r8
 8c0:	43 c0       	rjmp	.+134    	; 0x948 <vfprintf+0x2aa>
 8c2:	85 37       	cpi	r24, 0x75	; 117
 8c4:	29 f4       	brne	.+10     	; 0x8d0 <vfprintf+0x232>
 8c6:	2f 7e       	andi	r18, 0xEF	; 239
 8c8:	b2 2e       	mov	r11, r18
 8ca:	2a e0       	ldi	r18, 0x0A	; 10
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	25 c0       	rjmp	.+74     	; 0x91a <vfprintf+0x27c>
 8d0:	f2 2f       	mov	r31, r18
 8d2:	f9 7f       	andi	r31, 0xF9	; 249
 8d4:	bf 2e       	mov	r11, r31
 8d6:	8f 36       	cpi	r24, 0x6F	; 111
 8d8:	c1 f0       	breq	.+48     	; 0x90a <vfprintf+0x26c>
 8da:	18 f4       	brcc	.+6      	; 0x8e2 <vfprintf+0x244>
 8dc:	88 35       	cpi	r24, 0x58	; 88
 8de:	79 f0       	breq	.+30     	; 0x8fe <vfprintf+0x260>
 8e0:	ad c0       	rjmp	.+346    	; 0xa3c <vfprintf+0x39e>
 8e2:	80 37       	cpi	r24, 0x70	; 112
 8e4:	19 f0       	breq	.+6      	; 0x8ec <vfprintf+0x24e>
 8e6:	88 37       	cpi	r24, 0x78	; 120
 8e8:	21 f0       	breq	.+8      	; 0x8f2 <vfprintf+0x254>
 8ea:	a8 c0       	rjmp	.+336    	; 0xa3c <vfprintf+0x39e>
 8ec:	2f 2f       	mov	r18, r31
 8ee:	20 61       	ori	r18, 0x10	; 16
 8f0:	b2 2e       	mov	r11, r18
 8f2:	b4 fe       	sbrs	r11, 4
 8f4:	0d c0       	rjmp	.+26     	; 0x910 <vfprintf+0x272>
 8f6:	8b 2d       	mov	r24, r11
 8f8:	84 60       	ori	r24, 0x04	; 4
 8fa:	b8 2e       	mov	r11, r24
 8fc:	09 c0       	rjmp	.+18     	; 0x910 <vfprintf+0x272>
 8fe:	24 ff       	sbrs	r18, 4
 900:	0a c0       	rjmp	.+20     	; 0x916 <vfprintf+0x278>
 902:	9f 2f       	mov	r25, r31
 904:	96 60       	ori	r25, 0x06	; 6
 906:	b9 2e       	mov	r11, r25
 908:	06 c0       	rjmp	.+12     	; 0x916 <vfprintf+0x278>
 90a:	28 e0       	ldi	r18, 0x08	; 8
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	05 c0       	rjmp	.+10     	; 0x91a <vfprintf+0x27c>
 910:	20 e1       	ldi	r18, 0x10	; 16
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	02 c0       	rjmp	.+4      	; 0x91a <vfprintf+0x27c>
 916:	20 e1       	ldi	r18, 0x10	; 16
 918:	32 e0       	ldi	r19, 0x02	; 2
 91a:	f8 01       	movw	r30, r16
 91c:	b7 fe       	sbrs	r11, 7
 91e:	07 c0       	rjmp	.+14     	; 0x92e <vfprintf+0x290>
 920:	60 81       	ld	r22, Z
 922:	71 81       	ldd	r23, Z+1	; 0x01
 924:	82 81       	ldd	r24, Z+2	; 0x02
 926:	93 81       	ldd	r25, Z+3	; 0x03
 928:	0c 5f       	subi	r16, 0xFC	; 252
 92a:	1f 4f       	sbci	r17, 0xFF	; 255
 92c:	06 c0       	rjmp	.+12     	; 0x93a <vfprintf+0x29c>
 92e:	60 81       	ld	r22, Z
 930:	71 81       	ldd	r23, Z+1	; 0x01
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 5f       	subi	r16, 0xFE	; 254
 938:	1f 4f       	sbci	r17, 0xFF	; 255
 93a:	a4 01       	movw	r20, r8
 93c:	2e d2       	rcall	.+1116   	; 0xd9a <__ultoa_invert>
 93e:	a8 2e       	mov	r10, r24
 940:	a8 18       	sub	r10, r8
 942:	fb 2d       	mov	r31, r11
 944:	ff 77       	andi	r31, 0x7F	; 127
 946:	bf 2e       	mov	r11, r31
 948:	b6 fe       	sbrs	r11, 6
 94a:	0b c0       	rjmp	.+22     	; 0x962 <vfprintf+0x2c4>
 94c:	2b 2d       	mov	r18, r11
 94e:	2e 7f       	andi	r18, 0xFE	; 254
 950:	a5 14       	cp	r10, r5
 952:	50 f4       	brcc	.+20     	; 0x968 <vfprintf+0x2ca>
 954:	b4 fe       	sbrs	r11, 4
 956:	0a c0       	rjmp	.+20     	; 0x96c <vfprintf+0x2ce>
 958:	b2 fc       	sbrc	r11, 2
 95a:	08 c0       	rjmp	.+16     	; 0x96c <vfprintf+0x2ce>
 95c:	2b 2d       	mov	r18, r11
 95e:	2e 7e       	andi	r18, 0xEE	; 238
 960:	05 c0       	rjmp	.+10     	; 0x96c <vfprintf+0x2ce>
 962:	7a 2c       	mov	r7, r10
 964:	2b 2d       	mov	r18, r11
 966:	03 c0       	rjmp	.+6      	; 0x96e <vfprintf+0x2d0>
 968:	7a 2c       	mov	r7, r10
 96a:	01 c0       	rjmp	.+2      	; 0x96e <vfprintf+0x2d0>
 96c:	75 2c       	mov	r7, r5
 96e:	24 ff       	sbrs	r18, 4
 970:	0d c0       	rjmp	.+26     	; 0x98c <vfprintf+0x2ee>
 972:	fe 01       	movw	r30, r28
 974:	ea 0d       	add	r30, r10
 976:	f1 1d       	adc	r31, r1
 978:	80 81       	ld	r24, Z
 97a:	80 33       	cpi	r24, 0x30	; 48
 97c:	11 f4       	brne	.+4      	; 0x982 <vfprintf+0x2e4>
 97e:	29 7e       	andi	r18, 0xE9	; 233
 980:	09 c0       	rjmp	.+18     	; 0x994 <vfprintf+0x2f6>
 982:	22 ff       	sbrs	r18, 2
 984:	06 c0       	rjmp	.+12     	; 0x992 <vfprintf+0x2f4>
 986:	73 94       	inc	r7
 988:	73 94       	inc	r7
 98a:	04 c0       	rjmp	.+8      	; 0x994 <vfprintf+0x2f6>
 98c:	82 2f       	mov	r24, r18
 98e:	86 78       	andi	r24, 0x86	; 134
 990:	09 f0       	breq	.+2      	; 0x994 <vfprintf+0x2f6>
 992:	73 94       	inc	r7
 994:	23 fd       	sbrc	r18, 3
 996:	12 c0       	rjmp	.+36     	; 0x9bc <vfprintf+0x31e>
 998:	20 ff       	sbrs	r18, 0
 99a:	06 c0       	rjmp	.+12     	; 0x9a8 <vfprintf+0x30a>
 99c:	5a 2c       	mov	r5, r10
 99e:	73 14       	cp	r7, r3
 9a0:	18 f4       	brcc	.+6      	; 0x9a8 <vfprintf+0x30a>
 9a2:	53 0c       	add	r5, r3
 9a4:	57 18       	sub	r5, r7
 9a6:	73 2c       	mov	r7, r3
 9a8:	73 14       	cp	r7, r3
 9aa:	60 f4       	brcc	.+24     	; 0x9c4 <vfprintf+0x326>
 9ac:	b7 01       	movw	r22, r14
 9ae:	80 e2       	ldi	r24, 0x20	; 32
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	2c 87       	std	Y+12, r18	; 0x0c
 9b4:	c0 d1       	rcall	.+896    	; 0xd36 <fputc>
 9b6:	73 94       	inc	r7
 9b8:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ba:	f6 cf       	rjmp	.-20     	; 0x9a8 <vfprintf+0x30a>
 9bc:	73 14       	cp	r7, r3
 9be:	10 f4       	brcc	.+4      	; 0x9c4 <vfprintf+0x326>
 9c0:	37 18       	sub	r3, r7
 9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <vfprintf+0x328>
 9c4:	31 2c       	mov	r3, r1
 9c6:	24 ff       	sbrs	r18, 4
 9c8:	11 c0       	rjmp	.+34     	; 0x9ec <vfprintf+0x34e>
 9ca:	b7 01       	movw	r22, r14
 9cc:	80 e3       	ldi	r24, 0x30	; 48
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	2c 87       	std	Y+12, r18	; 0x0c
 9d2:	b1 d1       	rcall	.+866    	; 0xd36 <fputc>
 9d4:	2c 85       	ldd	r18, Y+12	; 0x0c
 9d6:	22 ff       	sbrs	r18, 2
 9d8:	16 c0       	rjmp	.+44     	; 0xa06 <vfprintf+0x368>
 9da:	21 ff       	sbrs	r18, 1
 9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <vfprintf+0x346>
 9de:	88 e5       	ldi	r24, 0x58	; 88
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <vfprintf+0x34a>
 9e4:	88 e7       	ldi	r24, 0x78	; 120
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	b7 01       	movw	r22, r14
 9ea:	0c c0       	rjmp	.+24     	; 0xa04 <vfprintf+0x366>
 9ec:	82 2f       	mov	r24, r18
 9ee:	86 78       	andi	r24, 0x86	; 134
 9f0:	51 f0       	breq	.+20     	; 0xa06 <vfprintf+0x368>
 9f2:	21 fd       	sbrc	r18, 1
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <vfprintf+0x35c>
 9f6:	80 e2       	ldi	r24, 0x20	; 32
 9f8:	01 c0       	rjmp	.+2      	; 0x9fc <vfprintf+0x35e>
 9fa:	8b e2       	ldi	r24, 0x2B	; 43
 9fc:	27 fd       	sbrc	r18, 7
 9fe:	8d e2       	ldi	r24, 0x2D	; 45
 a00:	b7 01       	movw	r22, r14
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	98 d1       	rcall	.+816    	; 0xd36 <fputc>
 a06:	a5 14       	cp	r10, r5
 a08:	30 f4       	brcc	.+12     	; 0xa16 <vfprintf+0x378>
 a0a:	b7 01       	movw	r22, r14
 a0c:	80 e3       	ldi	r24, 0x30	; 48
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	92 d1       	rcall	.+804    	; 0xd36 <fputc>
 a12:	5a 94       	dec	r5
 a14:	f8 cf       	rjmp	.-16     	; 0xa06 <vfprintf+0x368>
 a16:	aa 94       	dec	r10
 a18:	f4 01       	movw	r30, r8
 a1a:	ea 0d       	add	r30, r10
 a1c:	f1 1d       	adc	r31, r1
 a1e:	80 81       	ld	r24, Z
 a20:	b7 01       	movw	r22, r14
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	88 d1       	rcall	.+784    	; 0xd36 <fputc>
 a26:	a1 10       	cpse	r10, r1
 a28:	f6 cf       	rjmp	.-20     	; 0xa16 <vfprintf+0x378>
 a2a:	33 20       	and	r3, r3
 a2c:	09 f4       	brne	.+2      	; 0xa30 <vfprintf+0x392>
 a2e:	5d ce       	rjmp	.-838    	; 0x6ea <vfprintf+0x4c>
 a30:	b7 01       	movw	r22, r14
 a32:	80 e2       	ldi	r24, 0x20	; 32
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	7f d1       	rcall	.+766    	; 0xd36 <fputc>
 a38:	3a 94       	dec	r3
 a3a:	f7 cf       	rjmp	.-18     	; 0xa2a <vfprintf+0x38c>
 a3c:	f7 01       	movw	r30, r14
 a3e:	86 81       	ldd	r24, Z+6	; 0x06
 a40:	97 81       	ldd	r25, Z+7	; 0x07
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <vfprintf+0x3aa>
 a44:	8f ef       	ldi	r24, 0xFF	; 255
 a46:	9f ef       	ldi	r25, 0xFF	; 255
 a48:	2c 96       	adiw	r28, 0x0c	; 12
 a4a:	0f b6       	in	r0, 0x3f	; 63
 a4c:	f8 94       	cli
 a4e:	de bf       	out	0x3e, r29	; 62
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	cd bf       	out	0x3d, r28	; 61
 a54:	df 91       	pop	r29
 a56:	cf 91       	pop	r28
 a58:	1f 91       	pop	r17
 a5a:	0f 91       	pop	r16
 a5c:	ff 90       	pop	r15
 a5e:	ef 90       	pop	r14
 a60:	df 90       	pop	r13
 a62:	cf 90       	pop	r12
 a64:	bf 90       	pop	r11
 a66:	af 90       	pop	r10
 a68:	9f 90       	pop	r9
 a6a:	8f 90       	pop	r8
 a6c:	7f 90       	pop	r7
 a6e:	6f 90       	pop	r6
 a70:	5f 90       	pop	r5
 a72:	4f 90       	pop	r4
 a74:	3f 90       	pop	r3
 a76:	2f 90       	pop	r2
 a78:	08 95       	ret

00000a7a <calloc>:
 a7a:	0f 93       	push	r16
 a7c:	1f 93       	push	r17
 a7e:	cf 93       	push	r28
 a80:	df 93       	push	r29
 a82:	86 9f       	mul	r24, r22
 a84:	80 01       	movw	r16, r0
 a86:	87 9f       	mul	r24, r23
 a88:	10 0d       	add	r17, r0
 a8a:	96 9f       	mul	r25, r22
 a8c:	10 0d       	add	r17, r0
 a8e:	11 24       	eor	r1, r1
 a90:	c8 01       	movw	r24, r16
 a92:	0d d0       	rcall	.+26     	; 0xaae <malloc>
 a94:	ec 01       	movw	r28, r24
 a96:	00 97       	sbiw	r24, 0x00	; 0
 a98:	21 f0       	breq	.+8      	; 0xaa2 <calloc+0x28>
 a9a:	a8 01       	movw	r20, r16
 a9c:	60 e0       	ldi	r22, 0x00	; 0
 a9e:	70 e0       	ldi	r23, 0x00	; 0
 aa0:	38 d1       	rcall	.+624    	; 0xd12 <memset>
 aa2:	ce 01       	movw	r24, r28
 aa4:	df 91       	pop	r29
 aa6:	cf 91       	pop	r28
 aa8:	1f 91       	pop	r17
 aaa:	0f 91       	pop	r16
 aac:	08 95       	ret

00000aae <malloc>:
 aae:	cf 93       	push	r28
 ab0:	df 93       	push	r29
 ab2:	82 30       	cpi	r24, 0x02	; 2
 ab4:	91 05       	cpc	r25, r1
 ab6:	10 f4       	brcc	.+4      	; 0xabc <malloc+0xe>
 ab8:	82 e0       	ldi	r24, 0x02	; 2
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	e0 91 e2 02 	lds	r30, 0x02E2
 ac0:	f0 91 e3 02 	lds	r31, 0x02E3
 ac4:	20 e0       	ldi	r18, 0x00	; 0
 ac6:	30 e0       	ldi	r19, 0x00	; 0
 ac8:	a0 e0       	ldi	r26, 0x00	; 0
 aca:	b0 e0       	ldi	r27, 0x00	; 0
 acc:	30 97       	sbiw	r30, 0x00	; 0
 ace:	39 f1       	breq	.+78     	; 0xb1e <malloc+0x70>
 ad0:	40 81       	ld	r20, Z
 ad2:	51 81       	ldd	r21, Z+1	; 0x01
 ad4:	48 17       	cp	r20, r24
 ad6:	59 07       	cpc	r21, r25
 ad8:	b8 f0       	brcs	.+46     	; 0xb08 <malloc+0x5a>
 ada:	48 17       	cp	r20, r24
 adc:	59 07       	cpc	r21, r25
 ade:	71 f4       	brne	.+28     	; 0xafc <malloc+0x4e>
 ae0:	82 81       	ldd	r24, Z+2	; 0x02
 ae2:	93 81       	ldd	r25, Z+3	; 0x03
 ae4:	10 97       	sbiw	r26, 0x00	; 0
 ae6:	29 f0       	breq	.+10     	; 0xaf2 <malloc+0x44>
 ae8:	13 96       	adiw	r26, 0x03	; 3
 aea:	9c 93       	st	X, r25
 aec:	8e 93       	st	-X, r24
 aee:	12 97       	sbiw	r26, 0x02	; 2
 af0:	2c c0       	rjmp	.+88     	; 0xb4a <malloc+0x9c>
 af2:	90 93 e3 02 	sts	0x02E3, r25
 af6:	80 93 e2 02 	sts	0x02E2, r24
 afa:	27 c0       	rjmp	.+78     	; 0xb4a <malloc+0x9c>
 afc:	21 15       	cp	r18, r1
 afe:	31 05       	cpc	r19, r1
 b00:	31 f0       	breq	.+12     	; 0xb0e <malloc+0x60>
 b02:	42 17       	cp	r20, r18
 b04:	53 07       	cpc	r21, r19
 b06:	18 f0       	brcs	.+6      	; 0xb0e <malloc+0x60>
 b08:	a9 01       	movw	r20, r18
 b0a:	db 01       	movw	r26, r22
 b0c:	01 c0       	rjmp	.+2      	; 0xb10 <malloc+0x62>
 b0e:	ef 01       	movw	r28, r30
 b10:	9a 01       	movw	r18, r20
 b12:	bd 01       	movw	r22, r26
 b14:	df 01       	movw	r26, r30
 b16:	02 80       	ldd	r0, Z+2	; 0x02
 b18:	f3 81       	ldd	r31, Z+3	; 0x03
 b1a:	e0 2d       	mov	r30, r0
 b1c:	d7 cf       	rjmp	.-82     	; 0xacc <malloc+0x1e>
 b1e:	21 15       	cp	r18, r1
 b20:	31 05       	cpc	r19, r1
 b22:	f9 f0       	breq	.+62     	; 0xb62 <malloc+0xb4>
 b24:	28 1b       	sub	r18, r24
 b26:	39 0b       	sbc	r19, r25
 b28:	24 30       	cpi	r18, 0x04	; 4
 b2a:	31 05       	cpc	r19, r1
 b2c:	80 f4       	brcc	.+32     	; 0xb4e <malloc+0xa0>
 b2e:	8a 81       	ldd	r24, Y+2	; 0x02
 b30:	9b 81       	ldd	r25, Y+3	; 0x03
 b32:	61 15       	cp	r22, r1
 b34:	71 05       	cpc	r23, r1
 b36:	21 f0       	breq	.+8      	; 0xb40 <malloc+0x92>
 b38:	fb 01       	movw	r30, r22
 b3a:	93 83       	std	Z+3, r25	; 0x03
 b3c:	82 83       	std	Z+2, r24	; 0x02
 b3e:	04 c0       	rjmp	.+8      	; 0xb48 <malloc+0x9a>
 b40:	90 93 e3 02 	sts	0x02E3, r25
 b44:	80 93 e2 02 	sts	0x02E2, r24
 b48:	fe 01       	movw	r30, r28
 b4a:	32 96       	adiw	r30, 0x02	; 2
 b4c:	44 c0       	rjmp	.+136    	; 0xbd6 <malloc+0x128>
 b4e:	fe 01       	movw	r30, r28
 b50:	e2 0f       	add	r30, r18
 b52:	f3 1f       	adc	r31, r19
 b54:	81 93       	st	Z+, r24
 b56:	91 93       	st	Z+, r25
 b58:	22 50       	subi	r18, 0x02	; 2
 b5a:	31 09       	sbc	r19, r1
 b5c:	39 83       	std	Y+1, r19	; 0x01
 b5e:	28 83       	st	Y, r18
 b60:	3a c0       	rjmp	.+116    	; 0xbd6 <malloc+0x128>
 b62:	20 91 e0 02 	lds	r18, 0x02E0
 b66:	30 91 e1 02 	lds	r19, 0x02E1
 b6a:	23 2b       	or	r18, r19
 b6c:	41 f4       	brne	.+16     	; 0xb7e <malloc+0xd0>
 b6e:	20 91 02 02 	lds	r18, 0x0202
 b72:	30 91 03 02 	lds	r19, 0x0203
 b76:	30 93 e1 02 	sts	0x02E1, r19
 b7a:	20 93 e0 02 	sts	0x02E0, r18
 b7e:	20 91 00 02 	lds	r18, 0x0200
 b82:	30 91 01 02 	lds	r19, 0x0201
 b86:	21 15       	cp	r18, r1
 b88:	31 05       	cpc	r19, r1
 b8a:	41 f4       	brne	.+16     	; 0xb9c <malloc+0xee>
 b8c:	2d b7       	in	r18, 0x3d	; 61
 b8e:	3e b7       	in	r19, 0x3e	; 62
 b90:	40 91 04 02 	lds	r20, 0x0204
 b94:	50 91 05 02 	lds	r21, 0x0205
 b98:	24 1b       	sub	r18, r20
 b9a:	35 0b       	sbc	r19, r21
 b9c:	e0 91 e0 02 	lds	r30, 0x02E0
 ba0:	f0 91 e1 02 	lds	r31, 0x02E1
 ba4:	e2 17       	cp	r30, r18
 ba6:	f3 07       	cpc	r31, r19
 ba8:	a0 f4       	brcc	.+40     	; 0xbd2 <malloc+0x124>
 baa:	2e 1b       	sub	r18, r30
 bac:	3f 0b       	sbc	r19, r31
 bae:	28 17       	cp	r18, r24
 bb0:	39 07       	cpc	r19, r25
 bb2:	78 f0       	brcs	.+30     	; 0xbd2 <malloc+0x124>
 bb4:	ac 01       	movw	r20, r24
 bb6:	4e 5f       	subi	r20, 0xFE	; 254
 bb8:	5f 4f       	sbci	r21, 0xFF	; 255
 bba:	24 17       	cp	r18, r20
 bbc:	35 07       	cpc	r19, r21
 bbe:	48 f0       	brcs	.+18     	; 0xbd2 <malloc+0x124>
 bc0:	4e 0f       	add	r20, r30
 bc2:	5f 1f       	adc	r21, r31
 bc4:	50 93 e1 02 	sts	0x02E1, r21
 bc8:	40 93 e0 02 	sts	0x02E0, r20
 bcc:	81 93       	st	Z+, r24
 bce:	91 93       	st	Z+, r25
 bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <malloc+0x128>
 bd2:	e0 e0       	ldi	r30, 0x00	; 0
 bd4:	f0 e0       	ldi	r31, 0x00	; 0
 bd6:	cf 01       	movw	r24, r30
 bd8:	df 91       	pop	r29
 bda:	cf 91       	pop	r28
 bdc:	08 95       	ret

00000bde <free>:
 bde:	cf 93       	push	r28
 be0:	df 93       	push	r29
 be2:	00 97       	sbiw	r24, 0x00	; 0
 be4:	09 f4       	brne	.+2      	; 0xbe8 <free+0xa>
 be6:	87 c0       	rjmp	.+270    	; 0xcf6 <free+0x118>
 be8:	fc 01       	movw	r30, r24
 bea:	32 97       	sbiw	r30, 0x02	; 2
 bec:	13 82       	std	Z+3, r1	; 0x03
 bee:	12 82       	std	Z+2, r1	; 0x02
 bf0:	c0 91 e2 02 	lds	r28, 0x02E2
 bf4:	d0 91 e3 02 	lds	r29, 0x02E3
 bf8:	20 97       	sbiw	r28, 0x00	; 0
 bfa:	81 f4       	brne	.+32     	; 0xc1c <free+0x3e>
 bfc:	20 81       	ld	r18, Z
 bfe:	31 81       	ldd	r19, Z+1	; 0x01
 c00:	28 0f       	add	r18, r24
 c02:	39 1f       	adc	r19, r25
 c04:	80 91 e0 02 	lds	r24, 0x02E0
 c08:	90 91 e1 02 	lds	r25, 0x02E1
 c0c:	82 17       	cp	r24, r18
 c0e:	93 07       	cpc	r25, r19
 c10:	79 f5       	brne	.+94     	; 0xc70 <free+0x92>
 c12:	f0 93 e1 02 	sts	0x02E1, r31
 c16:	e0 93 e0 02 	sts	0x02E0, r30
 c1a:	6d c0       	rjmp	.+218    	; 0xcf6 <free+0x118>
 c1c:	de 01       	movw	r26, r28
 c1e:	20 e0       	ldi	r18, 0x00	; 0
 c20:	30 e0       	ldi	r19, 0x00	; 0
 c22:	ae 17       	cp	r26, r30
 c24:	bf 07       	cpc	r27, r31
 c26:	50 f4       	brcc	.+20     	; 0xc3c <free+0x5e>
 c28:	12 96       	adiw	r26, 0x02	; 2
 c2a:	4d 91       	ld	r20, X+
 c2c:	5c 91       	ld	r21, X
 c2e:	13 97       	sbiw	r26, 0x03	; 3
 c30:	9d 01       	movw	r18, r26
 c32:	41 15       	cp	r20, r1
 c34:	51 05       	cpc	r21, r1
 c36:	09 f1       	breq	.+66     	; 0xc7a <free+0x9c>
 c38:	da 01       	movw	r26, r20
 c3a:	f3 cf       	rjmp	.-26     	; 0xc22 <free+0x44>
 c3c:	b3 83       	std	Z+3, r27	; 0x03
 c3e:	a2 83       	std	Z+2, r26	; 0x02
 c40:	40 81       	ld	r20, Z
 c42:	51 81       	ldd	r21, Z+1	; 0x01
 c44:	84 0f       	add	r24, r20
 c46:	95 1f       	adc	r25, r21
 c48:	8a 17       	cp	r24, r26
 c4a:	9b 07       	cpc	r25, r27
 c4c:	71 f4       	brne	.+28     	; 0xc6a <free+0x8c>
 c4e:	8d 91       	ld	r24, X+
 c50:	9c 91       	ld	r25, X
 c52:	11 97       	sbiw	r26, 0x01	; 1
 c54:	84 0f       	add	r24, r20
 c56:	95 1f       	adc	r25, r21
 c58:	02 96       	adiw	r24, 0x02	; 2
 c5a:	91 83       	std	Z+1, r25	; 0x01
 c5c:	80 83       	st	Z, r24
 c5e:	12 96       	adiw	r26, 0x02	; 2
 c60:	8d 91       	ld	r24, X+
 c62:	9c 91       	ld	r25, X
 c64:	13 97       	sbiw	r26, 0x03	; 3
 c66:	93 83       	std	Z+3, r25	; 0x03
 c68:	82 83       	std	Z+2, r24	; 0x02
 c6a:	21 15       	cp	r18, r1
 c6c:	31 05       	cpc	r19, r1
 c6e:	29 f4       	brne	.+10     	; 0xc7a <free+0x9c>
 c70:	f0 93 e3 02 	sts	0x02E3, r31
 c74:	e0 93 e2 02 	sts	0x02E2, r30
 c78:	3e c0       	rjmp	.+124    	; 0xcf6 <free+0x118>
 c7a:	d9 01       	movw	r26, r18
 c7c:	13 96       	adiw	r26, 0x03	; 3
 c7e:	fc 93       	st	X, r31
 c80:	ee 93       	st	-X, r30
 c82:	12 97       	sbiw	r26, 0x02	; 2
 c84:	4d 91       	ld	r20, X+
 c86:	5d 91       	ld	r21, X+
 c88:	a4 0f       	add	r26, r20
 c8a:	b5 1f       	adc	r27, r21
 c8c:	ea 17       	cp	r30, r26
 c8e:	fb 07       	cpc	r31, r27
 c90:	79 f4       	brne	.+30     	; 0xcb0 <free+0xd2>
 c92:	80 81       	ld	r24, Z
 c94:	91 81       	ldd	r25, Z+1	; 0x01
 c96:	84 0f       	add	r24, r20
 c98:	95 1f       	adc	r25, r21
 c9a:	02 96       	adiw	r24, 0x02	; 2
 c9c:	d9 01       	movw	r26, r18
 c9e:	11 96       	adiw	r26, 0x01	; 1
 ca0:	9c 93       	st	X, r25
 ca2:	8e 93       	st	-X, r24
 ca4:	82 81       	ldd	r24, Z+2	; 0x02
 ca6:	93 81       	ldd	r25, Z+3	; 0x03
 ca8:	13 96       	adiw	r26, 0x03	; 3
 caa:	9c 93       	st	X, r25
 cac:	8e 93       	st	-X, r24
 cae:	12 97       	sbiw	r26, 0x02	; 2
 cb0:	e0 e0       	ldi	r30, 0x00	; 0
 cb2:	f0 e0       	ldi	r31, 0x00	; 0
 cb4:	8a 81       	ldd	r24, Y+2	; 0x02
 cb6:	9b 81       	ldd	r25, Y+3	; 0x03
 cb8:	00 97       	sbiw	r24, 0x00	; 0
 cba:	19 f0       	breq	.+6      	; 0xcc2 <free+0xe4>
 cbc:	fe 01       	movw	r30, r28
 cbe:	ec 01       	movw	r28, r24
 cc0:	f9 cf       	rjmp	.-14     	; 0xcb4 <free+0xd6>
 cc2:	ce 01       	movw	r24, r28
 cc4:	02 96       	adiw	r24, 0x02	; 2
 cc6:	28 81       	ld	r18, Y
 cc8:	39 81       	ldd	r19, Y+1	; 0x01
 cca:	82 0f       	add	r24, r18
 ccc:	93 1f       	adc	r25, r19
 cce:	20 91 e0 02 	lds	r18, 0x02E0
 cd2:	30 91 e1 02 	lds	r19, 0x02E1
 cd6:	28 17       	cp	r18, r24
 cd8:	39 07       	cpc	r19, r25
 cda:	69 f4       	brne	.+26     	; 0xcf6 <free+0x118>
 cdc:	30 97       	sbiw	r30, 0x00	; 0
 cde:	29 f4       	brne	.+10     	; 0xcea <free+0x10c>
 ce0:	10 92 e3 02 	sts	0x02E3, r1
 ce4:	10 92 e2 02 	sts	0x02E2, r1
 ce8:	02 c0       	rjmp	.+4      	; 0xcee <free+0x110>
 cea:	13 82       	std	Z+3, r1	; 0x03
 cec:	12 82       	std	Z+2, r1	; 0x02
 cee:	d0 93 e1 02 	sts	0x02E1, r29
 cf2:	c0 93 e0 02 	sts	0x02E0, r28
 cf6:	df 91       	pop	r29
 cf8:	cf 91       	pop	r28
 cfa:	08 95       	ret

00000cfc <strnlen_P>:
 cfc:	fc 01       	movw	r30, r24
 cfe:	05 90       	lpm	r0, Z+
 d00:	61 50       	subi	r22, 0x01	; 1
 d02:	70 40       	sbci	r23, 0x00	; 0
 d04:	01 10       	cpse	r0, r1
 d06:	d8 f7       	brcc	.-10     	; 0xcfe <strnlen_P+0x2>
 d08:	80 95       	com	r24
 d0a:	90 95       	com	r25
 d0c:	8e 0f       	add	r24, r30
 d0e:	9f 1f       	adc	r25, r31
 d10:	08 95       	ret

00000d12 <memset>:
 d12:	dc 01       	movw	r26, r24
 d14:	01 c0       	rjmp	.+2      	; 0xd18 <memset+0x6>
 d16:	6d 93       	st	X+, r22
 d18:	41 50       	subi	r20, 0x01	; 1
 d1a:	50 40       	sbci	r21, 0x00	; 0
 d1c:	e0 f7       	brcc	.-8      	; 0xd16 <memset+0x4>
 d1e:	08 95       	ret

00000d20 <strnlen>:
 d20:	fc 01       	movw	r30, r24
 d22:	61 50       	subi	r22, 0x01	; 1
 d24:	70 40       	sbci	r23, 0x00	; 0
 d26:	01 90       	ld	r0, Z+
 d28:	01 10       	cpse	r0, r1
 d2a:	d8 f7       	brcc	.-10     	; 0xd22 <strnlen+0x2>
 d2c:	80 95       	com	r24
 d2e:	90 95       	com	r25
 d30:	8e 0f       	add	r24, r30
 d32:	9f 1f       	adc	r25, r31
 d34:	08 95       	ret

00000d36 <fputc>:
 d36:	0f 93       	push	r16
 d38:	1f 93       	push	r17
 d3a:	cf 93       	push	r28
 d3c:	df 93       	push	r29
 d3e:	18 2f       	mov	r17, r24
 d40:	09 2f       	mov	r16, r25
 d42:	eb 01       	movw	r28, r22
 d44:	8b 81       	ldd	r24, Y+3	; 0x03
 d46:	81 fd       	sbrc	r24, 1
 d48:	03 c0       	rjmp	.+6      	; 0xd50 <fputc+0x1a>
 d4a:	8f ef       	ldi	r24, 0xFF	; 255
 d4c:	9f ef       	ldi	r25, 0xFF	; 255
 d4e:	20 c0       	rjmp	.+64     	; 0xd90 <fputc+0x5a>
 d50:	82 ff       	sbrs	r24, 2
 d52:	10 c0       	rjmp	.+32     	; 0xd74 <fputc+0x3e>
 d54:	4e 81       	ldd	r20, Y+6	; 0x06
 d56:	5f 81       	ldd	r21, Y+7	; 0x07
 d58:	2c 81       	ldd	r18, Y+4	; 0x04
 d5a:	3d 81       	ldd	r19, Y+5	; 0x05
 d5c:	42 17       	cp	r20, r18
 d5e:	53 07       	cpc	r21, r19
 d60:	7c f4       	brge	.+30     	; 0xd80 <fputc+0x4a>
 d62:	e8 81       	ld	r30, Y
 d64:	f9 81       	ldd	r31, Y+1	; 0x01
 d66:	9f 01       	movw	r18, r30
 d68:	2f 5f       	subi	r18, 0xFF	; 255
 d6a:	3f 4f       	sbci	r19, 0xFF	; 255
 d6c:	39 83       	std	Y+1, r19	; 0x01
 d6e:	28 83       	st	Y, r18
 d70:	10 83       	st	Z, r17
 d72:	06 c0       	rjmp	.+12     	; 0xd80 <fputc+0x4a>
 d74:	e8 85       	ldd	r30, Y+8	; 0x08
 d76:	f9 85       	ldd	r31, Y+9	; 0x09
 d78:	81 2f       	mov	r24, r17
 d7a:	19 95       	eicall
 d7c:	89 2b       	or	r24, r25
 d7e:	29 f7       	brne	.-54     	; 0xd4a <fputc+0x14>
 d80:	2e 81       	ldd	r18, Y+6	; 0x06
 d82:	3f 81       	ldd	r19, Y+7	; 0x07
 d84:	2f 5f       	subi	r18, 0xFF	; 255
 d86:	3f 4f       	sbci	r19, 0xFF	; 255
 d88:	3f 83       	std	Y+7, r19	; 0x07
 d8a:	2e 83       	std	Y+6, r18	; 0x06
 d8c:	81 2f       	mov	r24, r17
 d8e:	90 2f       	mov	r25, r16
 d90:	df 91       	pop	r29
 d92:	cf 91       	pop	r28
 d94:	1f 91       	pop	r17
 d96:	0f 91       	pop	r16
 d98:	08 95       	ret

00000d9a <__ultoa_invert>:
 d9a:	fa 01       	movw	r30, r20
 d9c:	aa 27       	eor	r26, r26
 d9e:	28 30       	cpi	r18, 0x08	; 8
 da0:	51 f1       	breq	.+84     	; 0xdf6 <__ultoa_invert+0x5c>
 da2:	20 31       	cpi	r18, 0x10	; 16
 da4:	81 f1       	breq	.+96     	; 0xe06 <__ultoa_invert+0x6c>
 da6:	e8 94       	clt
 da8:	6f 93       	push	r22
 daa:	6e 7f       	andi	r22, 0xFE	; 254
 dac:	6e 5f       	subi	r22, 0xFE	; 254
 dae:	7f 4f       	sbci	r23, 0xFF	; 255
 db0:	8f 4f       	sbci	r24, 0xFF	; 255
 db2:	9f 4f       	sbci	r25, 0xFF	; 255
 db4:	af 4f       	sbci	r26, 0xFF	; 255
 db6:	b1 e0       	ldi	r27, 0x01	; 1
 db8:	3e d0       	rcall	.+124    	; 0xe36 <__ultoa_invert+0x9c>
 dba:	b4 e0       	ldi	r27, 0x04	; 4
 dbc:	3c d0       	rcall	.+120    	; 0xe36 <__ultoa_invert+0x9c>
 dbe:	67 0f       	add	r22, r23
 dc0:	78 1f       	adc	r23, r24
 dc2:	89 1f       	adc	r24, r25
 dc4:	9a 1f       	adc	r25, r26
 dc6:	a1 1d       	adc	r26, r1
 dc8:	68 0f       	add	r22, r24
 dca:	79 1f       	adc	r23, r25
 dcc:	8a 1f       	adc	r24, r26
 dce:	91 1d       	adc	r25, r1
 dd0:	a1 1d       	adc	r26, r1
 dd2:	6a 0f       	add	r22, r26
 dd4:	71 1d       	adc	r23, r1
 dd6:	81 1d       	adc	r24, r1
 dd8:	91 1d       	adc	r25, r1
 dda:	a1 1d       	adc	r26, r1
 ddc:	20 d0       	rcall	.+64     	; 0xe1e <__ultoa_invert+0x84>
 dde:	09 f4       	brne	.+2      	; 0xde2 <__ultoa_invert+0x48>
 de0:	68 94       	set
 de2:	3f 91       	pop	r19
 de4:	2a e0       	ldi	r18, 0x0A	; 10
 de6:	26 9f       	mul	r18, r22
 de8:	11 24       	eor	r1, r1
 dea:	30 19       	sub	r19, r0
 dec:	30 5d       	subi	r19, 0xD0	; 208
 dee:	31 93       	st	Z+, r19
 df0:	de f6       	brtc	.-74     	; 0xda8 <__ultoa_invert+0xe>
 df2:	cf 01       	movw	r24, r30
 df4:	08 95       	ret
 df6:	46 2f       	mov	r20, r22
 df8:	47 70       	andi	r20, 0x07	; 7
 dfa:	40 5d       	subi	r20, 0xD0	; 208
 dfc:	41 93       	st	Z+, r20
 dfe:	b3 e0       	ldi	r27, 0x03	; 3
 e00:	0f d0       	rcall	.+30     	; 0xe20 <__ultoa_invert+0x86>
 e02:	c9 f7       	brne	.-14     	; 0xdf6 <__ultoa_invert+0x5c>
 e04:	f6 cf       	rjmp	.-20     	; 0xdf2 <__ultoa_invert+0x58>
 e06:	46 2f       	mov	r20, r22
 e08:	4f 70       	andi	r20, 0x0F	; 15
 e0a:	40 5d       	subi	r20, 0xD0	; 208
 e0c:	4a 33       	cpi	r20, 0x3A	; 58
 e0e:	18 f0       	brcs	.+6      	; 0xe16 <__ultoa_invert+0x7c>
 e10:	49 5d       	subi	r20, 0xD9	; 217
 e12:	31 fd       	sbrc	r19, 1
 e14:	40 52       	subi	r20, 0x20	; 32
 e16:	41 93       	st	Z+, r20
 e18:	02 d0       	rcall	.+4      	; 0xe1e <__ultoa_invert+0x84>
 e1a:	a9 f7       	brne	.-22     	; 0xe06 <__ultoa_invert+0x6c>
 e1c:	ea cf       	rjmp	.-44     	; 0xdf2 <__ultoa_invert+0x58>
 e1e:	b4 e0       	ldi	r27, 0x04	; 4
 e20:	a6 95       	lsr	r26
 e22:	97 95       	ror	r25
 e24:	87 95       	ror	r24
 e26:	77 95       	ror	r23
 e28:	67 95       	ror	r22
 e2a:	ba 95       	dec	r27
 e2c:	c9 f7       	brne	.-14     	; 0xe20 <__ultoa_invert+0x86>
 e2e:	00 97       	sbiw	r24, 0x00	; 0
 e30:	61 05       	cpc	r22, r1
 e32:	71 05       	cpc	r23, r1
 e34:	08 95       	ret
 e36:	9b 01       	movw	r18, r22
 e38:	ac 01       	movw	r20, r24
 e3a:	0a 2e       	mov	r0, r26
 e3c:	06 94       	lsr	r0
 e3e:	57 95       	ror	r21
 e40:	47 95       	ror	r20
 e42:	37 95       	ror	r19
 e44:	27 95       	ror	r18
 e46:	ba 95       	dec	r27
 e48:	c9 f7       	brne	.-14     	; 0xe3c <__ultoa_invert+0xa2>
 e4a:	62 0f       	add	r22, r18
 e4c:	73 1f       	adc	r23, r19
 e4e:	84 1f       	adc	r24, r20
 e50:	95 1f       	adc	r25, r21
 e52:	a0 1d       	adc	r26, r0
 e54:	08 95       	ret

00000e56 <_exit>:
 e56:	f8 94       	cli

00000e58 <__stop_program>:
 e58:	ff cf       	rjmp	.-2      	; 0xe58 <__stop_program>
