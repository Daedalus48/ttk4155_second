
ping_pong_node_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800200  00001b1a  00001bae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  008002ac  008002ac  00001c5a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c5a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  00001cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f16  00000000  00000000  00001ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e58  00000000  00000000  00003de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012ca  00000000  00000000  00004c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004e8  00000000  00000000  00005f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000765  00000000  00000000  000063f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000111c  00000000  00000000  00006b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00007c71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	14 c6       	rjmp	.+3112   	; 0xcc6 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	7e 06       	cpc	r7, r30
      e6:	d0 06       	cpc	r13, r16
      e8:	d0 06       	cpc	r13, r16
      ea:	d0 06       	cpc	r13, r16
      ec:	d0 06       	cpc	r13, r16
      ee:	d0 06       	cpc	r13, r16
      f0:	d0 06       	cpc	r13, r16
      f2:	d0 06       	cpc	r13, r16
      f4:	7e 06       	cpc	r7, r30
      f6:	d0 06       	cpc	r13, r16
      f8:	d0 06       	cpc	r13, r16
      fa:	d0 06       	cpc	r13, r16
      fc:	d0 06       	cpc	r13, r16
      fe:	d0 06       	cpc	r13, r16
     100:	d0 06       	cpc	r13, r16
     102:	d0 06       	cpc	r13, r16
     104:	80 06       	cpc	r8, r16
     106:	d0 06       	cpc	r13, r16
     108:	d0 06       	cpc	r13, r16
     10a:	d0 06       	cpc	r13, r16
     10c:	d0 06       	cpc	r13, r16
     10e:	d0 06       	cpc	r13, r16
     110:	d0 06       	cpc	r13, r16
     112:	d0 06       	cpc	r13, r16
     114:	d0 06       	cpc	r13, r16
     116:	d0 06       	cpc	r13, r16
     118:	d0 06       	cpc	r13, r16
     11a:	d0 06       	cpc	r13, r16
     11c:	d0 06       	cpc	r13, r16
     11e:	d0 06       	cpc	r13, r16
     120:	d0 06       	cpc	r13, r16
     122:	d0 06       	cpc	r13, r16
     124:	80 06       	cpc	r8, r16
     126:	d0 06       	cpc	r13, r16
     128:	d0 06       	cpc	r13, r16
     12a:	d0 06       	cpc	r13, r16
     12c:	d0 06       	cpc	r13, r16
     12e:	d0 06       	cpc	r13, r16
     130:	d0 06       	cpc	r13, r16
     132:	d0 06       	cpc	r13, r16
     134:	d0 06       	cpc	r13, r16
     136:	d0 06       	cpc	r13, r16
     138:	d0 06       	cpc	r13, r16
     13a:	d0 06       	cpc	r13, r16
     13c:	d0 06       	cpc	r13, r16
     13e:	d0 06       	cpc	r13, r16
     140:	d0 06       	cpc	r13, r16
     142:	d0 06       	cpc	r13, r16
     144:	cc 06       	cpc	r12, r28
     146:	d0 06       	cpc	r13, r16
     148:	d0 06       	cpc	r13, r16
     14a:	d0 06       	cpc	r13, r16
     14c:	d0 06       	cpc	r13, r16
     14e:	d0 06       	cpc	r13, r16
     150:	d0 06       	cpc	r13, r16
     152:	d0 06       	cpc	r13, r16
     154:	a9 06       	cpc	r10, r25
     156:	d0 06       	cpc	r13, r16
     158:	d0 06       	cpc	r13, r16
     15a:	d0 06       	cpc	r13, r16
     15c:	d0 06       	cpc	r13, r16
     15e:	d0 06       	cpc	r13, r16
     160:	d0 06       	cpc	r13, r16
     162:	d0 06       	cpc	r13, r16
     164:	d0 06       	cpc	r13, r16
     166:	d0 06       	cpc	r13, r16
     168:	d0 06       	cpc	r13, r16
     16a:	d0 06       	cpc	r13, r16
     16c:	d0 06       	cpc	r13, r16
     16e:	d0 06       	cpc	r13, r16
     170:	d0 06       	cpc	r13, r16
     172:	d0 06       	cpc	r13, r16
     174:	9d 06       	cpc	r9, r29
     176:	d0 06       	cpc	r13, r16
     178:	d0 06       	cpc	r13, r16
     17a:	d0 06       	cpc	r13, r16
     17c:	d0 06       	cpc	r13, r16
     17e:	d0 06       	cpc	r13, r16
     180:	d0 06       	cpc	r13, r16
     182:	d0 06       	cpc	r13, r16
     184:	bb 06       	cpc	r11, r27

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ea e1       	ldi	r30, 0x1A	; 26
     19e:	fb e1       	ldi	r31, 0x1B	; 27
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	ac 3a       	cpi	r26, 0xAC	; 172
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	ac ea       	ldi	r26, 0xAC	; 172
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a1 3c       	cpi	r26, 0xC1	; 193
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	44 d1       	rcall	.+648    	; 0x44a <main>
     1c2:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <adc_init>:
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	87 60       	ori	r24, 0x07	; 7
     1d0:	80 83       	st	Z, r24
     1d2:	80 81       	ld	r24, Z
     1d4:	80 68       	ori	r24, 0x80	; 128
     1d6:	80 83       	st	Z, r24
     1d8:	08 95       	ret

000001da <adc_read>:
     1da:	ec e7       	ldi	r30, 0x7C	; 124
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	80 68       	ori	r24, 0x80	; 128
     1e2:	80 83       	st	Z, r24
     1e4:	ea e7       	ldi	r30, 0x7A	; 122
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	80 64       	ori	r24, 0x40	; 64
     1ec:	80 83       	st	Z, r24
     1ee:	80 81       	ld	r24, Z
     1f0:	86 fd       	sbrc	r24, 6
     1f2:	fd cf       	rjmp	.-6      	; 0x1ee <adc_read+0x14>
     1f4:	20 91 78 00 	lds	r18, 0x0078
     1f8:	30 91 79 00 	lds	r19, 0x0079
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	24 36       	cpi	r18, 0x64	; 100
     202:	31 05       	cpc	r19, r1
     204:	10 f4       	brcc	.+4      	; 0x20a <adc_read+0x30>
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	08 95       	ret

0000020c <can_init>:
#include "spi.h"



void can_init()
{
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	2a 97       	sbiw	r28, 0x0a	; 10
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	f8 94       	cli
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	cd bf       	out	0x3d, r28	; 61
	mcp2515_init(); //Init
     220:	e2 d1       	rcall	.+964    	; 0x5e6 <mcp2515_init>
	
	mcp2515_write(MCP_RXB0CTRL, MCP_RXBnCTRL_NOFILTER_bm, 1); // Set to no filter
     222:	41 e0       	ldi	r20, 0x01	; 1
     224:	60 e6       	ldi	r22, 0x60	; 96
     226:	80 e6       	ldi	r24, 0x60	; 96
     228:	00 d2       	rcall	.+1024   	; 0x62a <mcp2515_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22a:	8f ef       	ldi	r24, 0xFF	; 255
     22c:	9f e8       	ldi	r25, 0x8F	; 143
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <can_init+0x22>
     232:	00 c0       	rjmp	.+0      	; 0x234 <can_init+0x28>
     234:	00 00       	nop
	_delay_ms(30);
	
	
	
	mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 1); // Enable Interrupt when message is received
     236:	41 e0       	ldi	r20, 0x01	; 1
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	8b e2       	ldi	r24, 0x2B	; 43
     23c:	1c d2       	rcall	.+1080   	; 0x676 <mcp2515_bit_modify>
     23e:	8f ef       	ldi	r24, 0xFF	; 255
     240:	9f e8       	ldi	r25, 0x8F	; 143
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <can_init+0x36>
     246:	00 c0       	rjmp	.+0      	; 0x248 <can_init+0x3c>
     248:	00 00       	nop
	_delay_ms(30);

	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);//0b11100000 instead of MODE_MASK
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	60 ee       	ldi	r22, 0xE0	; 224
     24e:	8f e0       	ldi	r24, 0x0F	; 15
     250:	12 d2       	rcall	.+1060   	; 0x676 <mcp2515_bit_modify>
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	9f e8       	ldi	r25, 0x8F	; 143
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <can_init+0x4a>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <can_init+0x50>
     25c:	00 00       	nop
	_delay_ms(30);
	
	uint8_t mode_bits;
	uint8_t data[MAX_CAN_LENGTH];
	mcp2515_read(MCP_CANSTAT, data, MAX_CAN_LENGTH);
     25e:	4a e0       	ldi	r20, 0x0A	; 10
     260:	be 01       	movw	r22, r28
     262:	6f 5f       	subi	r22, 0xFF	; 255
     264:	7f 4f       	sbci	r23, 0xFF	; 255
     266:	8e e0       	ldi	r24, 0x0E	; 14
     268:	c1 d1       	rcall	.+898    	; 0x5ec <mcp2515_read>
	uint8_t val = data[0];
	
	mode_bits = (val & MODE_MASK);
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	80 7e       	andi	r24, 0xE0	; 224
	if(mode_bits != MODE_NORMAL){
     26e:	a9 f0       	breq	.+42     	; 0x29a <can_init+0x8e>
		
		printf("MCP2515 is NOT in correct mode after reset! Its config bits are %x\n", mode_bits);
     270:	1f 92       	push	r1
     272:	8f 93       	push	r24
     274:	87 e1       	ldi	r24, 0x17	; 23
     276:	92 e0       	ldi	r25, 0x02	; 2
     278:	9f 93       	push	r25
     27a:	8f 93       	push	r24
     27c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <printf>
		printf("\n\r");
     280:	88 ea       	ldi	r24, 0xA8	; 168
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	9f 93       	push	r25
     286:	8f 93       	push	r24
     288:	0e 94 71 09 	call	0x12e2	; 0x12e2 <printf>
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	08 c0       	rjmp	.+16     	; 0x2aa <can_init+0x9e>
	}
	else
		printf("in mode normal \n\r");
     29a:	8b e5       	ldi	r24, 0x5B	; 91
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	9f 93       	push	r25
     2a0:	8f 93       	push	r24
     2a2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <printf>
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
	
}
     2aa:	2a 96       	adiw	r28, 0x0a	; 10
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <can_message_send>:

void can_message_send(struct can_message* msg)
{	
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	ec 01       	movw	r28, r24
	mcp2515_write(MCP_TXB0DLC, msg->length, 1);
     2c4:	41 e0       	ldi	r20, 0x01	; 1
     2c6:	6a 81       	ldd	r22, Y+2	; 0x02
     2c8:	85 e3       	ldi	r24, 0x35	; 53
     2ca:	af d1       	rcall	.+862    	; 0x62a <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
     2cc:	41 e0       	ldi	r20, 0x01	; 1
     2ce:	68 81       	ld	r22, Y
     2d0:	81 e3       	ldi	r24, 0x31	; 49
     2d2:	ab d1       	rcall	.+854    	; 0x62a <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, msg->id, 1);
     2d4:	41 e0       	ldi	r20, 0x01	; 1
     2d6:	68 81       	ld	r22, Y
     2d8:	82 e3       	ldi	r24, 0x32	; 50
     2da:	a7 d1       	rcall	.+846    	; 0x62a <mcp2515_write>
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
     2dc:	8a 81       	ldd	r24, Y+2	; 0x02
     2de:	88 23       	and	r24, r24
     2e0:	61 f0       	breq	.+24     	; 0x2fa <can_message_send+0x3e>
     2e2:	10 e0       	ldi	r17, 0x00	; 0
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
     2e4:	fe 01       	movw	r30, r28
     2e6:	e1 0f       	add	r30, r17
     2e8:	f1 1d       	adc	r31, r1
     2ea:	41 e0       	ldi	r20, 0x01	; 1
     2ec:	63 81       	ldd	r22, Z+3	; 0x03
     2ee:	86 e3       	ldi	r24, 0x36	; 54
     2f0:	9c d1       	rcall	.+824    	; 0x62a <mcp2515_write>
	mcp2515_write(MCP_TXB0DLC, msg->length, 1);
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
	mcp2515_write(MCP_TXB0SIDL, msg->id, 1);
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
     2f2:	1f 5f       	subi	r17, 0xFF	; 255
     2f4:	8a 81       	ldd	r24, Y+2	; 0x02
     2f6:	18 17       	cp	r17, r24
     2f8:	a8 f3       	brcs	.-22     	; 0x2e4 <can_message_send+0x28>
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
	}
	printf("\n\r");
     2fa:	88 ea       	ldi	r24, 0xA8	; 168
     2fc:	92 e0       	ldi	r25, 0x02	; 2
     2fe:	9f 93       	push	r25
     300:	8f 93       	push	r24
     302:	ef d7       	rcall	.+4062   	; 0x12e2 <printf>
	mcp2515_request(MCP_RTS_TX0);
     304:	81 e8       	ldi	r24, 0x81	; 129
     306:	a7 d1       	rcall	.+846    	; 0x656 <mcp2515_request>
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
}
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	08 95       	ret

00000314 <can_data_receive>:


void can_data_receive(struct can_message* msg, int buffer)
{
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	2a 97       	sbiw	r28, 0x0a	; 10
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	de bf       	out	0x3e, r29	; 62
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	cd bf       	out	0x3d, r28	; 61
     32e:	8c 01       	movw	r16, r24
     330:	f6 2e       	mov	r15, r22
	uint8_t result[MAX_CAN_LENGTH];
	
		
	mcp2515_read(MCP_CANINTF, result, 1);
     332:	41 e0       	ldi	r20, 0x01	; 1
     334:	be 01       	movw	r22, r28
     336:	6f 5f       	subi	r22, 0xFF	; 255
     338:	7f 4f       	sbci	r23, 0xFF	; 255
     33a:	8c e2       	ldi	r24, 0x2C	; 44
     33c:	57 d1       	rcall	.+686    	; 0x5ec <mcp2515_read>

	if (!result[0]){
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	81 11       	cpse	r24, r1
     342:	0b c0       	rjmp	.+22     	; 0x35a <can_data_receive+0x46>
		printf("CANINTF out %d \n\r", result[0] & 0b1);
     344:	1f 92       	push	r1
     346:	1f 92       	push	r1
     348:	2d e6       	ldi	r18, 0x6D	; 109
     34a:	32 e0       	ldi	r19, 0x02	; 2
     34c:	3f 93       	push	r19
     34e:	2f 93       	push	r18
     350:	c8 d7       	rcall	.+3984   	; 0x12e2 <printf>
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
	}
	
	uint8_t i;
	
	mcp2515_read(MCP_RXB0DLC + buffer, result, 1);
     35a:	41 e0       	ldi	r20, 0x01	; 1
     35c:	be 01       	movw	r22, r28
     35e:	6f 5f       	subi	r22, 0xFF	; 255
     360:	7f 4f       	sbci	r23, 0xFF	; 255
     362:	85 e6       	ldi	r24, 0x65	; 101
     364:	8f 0d       	add	r24, r15
     366:	42 d1       	rcall	.+644    	; 0x5ec <mcp2515_read>
	msg->length = result[0];
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	f8 01       	movw	r30, r16
     36c:	82 83       	std	Z+2, r24	; 0x02
	
	mcp2515_read(MCP_RXB0SIDH + buffer, result, 1);
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	be 01       	movw	r22, r28
     372:	6f 5f       	subi	r22, 0xFF	; 255
     374:	7f 4f       	sbci	r23, 0xFF	; 255
     376:	81 e6       	ldi	r24, 0x61	; 97
     378:	8f 0d       	add	r24, r15
     37a:	38 d1       	rcall	.+624    	; 0x5ec <mcp2515_read>
	msg->id = result[0];
     37c:	29 81       	ldd	r18, Y+1	; 0x01
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	f8 01       	movw	r30, r16
     382:	31 83       	std	Z+1, r19	; 0x01
     384:	20 83       	st	Z, r18
	
	mcp2515_read(MCP_RXB0D(0) + buffer, result, msg->length);
     386:	42 81       	ldd	r20, Z+2	; 0x02
     388:	be 01       	movw	r22, r28
     38a:	6f 5f       	subi	r22, 0xFF	; 255
     38c:	7f 4f       	sbci	r23, 0xFF	; 255
     38e:	86 e6       	ldi	r24, 0x66	; 102
     390:	8f 0d       	add	r24, r15
     392:	2c d1       	rcall	.+600    	; 0x5ec <mcp2515_read>
	
	for (i = 0; i < msg->length; i++)
     394:	f8 01       	movw	r30, r16
     396:	92 81       	ldd	r25, Z+2	; 0x02
     398:	99 23       	and	r25, r25
     39a:	61 f0       	breq	.+24     	; 0x3b4 <can_data_receive+0xa0>
     39c:	9e 01       	movw	r18, r28
     39e:	2f 5f       	subi	r18, 0xFF	; 255
     3a0:	3f 4f       	sbci	r19, 0xFF	; 255
     3a2:	d8 01       	movw	r26, r16
     3a4:	13 96       	adiw	r26, 0x03	; 3
     3a6:	f9 01       	movw	r30, r18
	{
		msg->data[i] = result[i];
     3a8:	81 91       	ld	r24, Z+
     3aa:	8d 93       	st	X+, r24
     3ac:	8e 2f       	mov	r24, r30
     3ae:	82 1b       	sub	r24, r18
	mcp2515_read(MCP_RXB0SIDH + buffer, result, 1);
	msg->id = result[0];
	
	mcp2515_read(MCP_RXB0D(0) + buffer, result, msg->length);
	
	for (i = 0; i < msg->length; i++)
     3b0:	89 17       	cp	r24, r25
     3b2:	d0 f3       	brcs	.-12     	; 0x3a8 <can_data_receive+0x94>
	{
		msg->data[i] = result[i];
	}
	
	mcp2515_bit_modify(MCP_CANINTF, 0x01, 0x00);
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	8c e2       	ldi	r24, 0x2C	; 44
     3ba:	5d d1       	rcall	.+698    	; 0x676 <mcp2515_bit_modify>
}
     3bc:	2a 96       	adiw	r28, 0x0a	; 10
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	ff 90       	pop	r15
     3d2:	08 95       	ret

000003d4 <can_get_message>:

int can_get_message(struct can_message* message)
{
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	2a 97       	sbiw	r28, 0x0a	; 10
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	8c 01       	movw	r16, r24
	uint8_t result[MAX_CAN_LENGTH];
	mcp2515_read(MCP_CANINTF, result, 1);
     3ee:	41 e0       	ldi	r20, 0x01	; 1
     3f0:	be 01       	movw	r22, r28
     3f2:	6f 5f       	subi	r22, 0xFF	; 255
     3f4:	7f 4f       	sbci	r23, 0xFF	; 255
     3f6:	8c e2       	ldi	r24, 0x2C	; 44
     3f8:	f9 d0       	rcall	.+498    	; 0x5ec <mcp2515_read>

	
	if ((result[0] & 0x01) == 0x01)
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	80 ff       	sbrs	r24, 0
     3fe:	0b c0       	rjmp	.+22     	; 0x416 <can_get_message+0x42>
	{
		can_data_receive(message,0);
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	c8 01       	movw	r24, r16
     406:	86 df       	rcall	.-244    	; 0x314 <can_data_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x01,0x00);
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	8c e2       	ldi	r24, 0x2C	; 44
     40e:	33 d1       	rcall	.+614    	; 0x676 <mcp2515_bit_modify>
		return 1;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0f c0       	rjmp	.+30     	; 0x434 <can_get_message+0x60>
	}
	else if ((result[0] & 0x02) == 0x02)
     416:	81 ff       	sbrs	r24, 1
     418:	0b c0       	rjmp	.+22     	; 0x430 <can_get_message+0x5c>
	{
		can_data_receive(message,1);
     41a:	61 e0       	ldi	r22, 0x01	; 1
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	c8 01       	movw	r24, r16
     420:	79 df       	rcall	.-270    	; 0x314 <can_data_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x02,0x00);
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	62 e0       	ldi	r22, 0x02	; 2
     426:	8c e2       	ldi	r24, 0x2C	; 44
     428:	26 d1       	rcall	.+588    	; 0x676 <mcp2515_bit_modify>
		return 1;
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	02 c0       	rjmp	.+4      	; 0x434 <can_get_message+0x60>
	}
	else
	{
		return 0;
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
	}
	
     434:	2a 96       	adiw	r28, 0x0a	; 10
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	08 95       	ret

0000044a <main>:
#include "pwm.h"
#include "adc.h"
#include "motor.h"


int main(void){
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	6a 97       	sbiw	r28, 0x1a	; 26
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
	
	DDRD |= (1 << PD3);//init solenoid
     45e:	53 9a       	sbi	0x0a, 3	; 10
	PORTD &= (1 << PD3);//init solenoid
     460:	8b b1       	in	r24, 0x0b	; 11
     462:	88 70       	andi	r24, 0x08	; 8
     464:	8b b9       	out	0x0b, r24	; 11
	
	USART_Init(MYUBRR);
     466:	87 e6       	ldi	r24, 0x67	; 103
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	c0 d4       	rcall	.+2432   	; 0xdec <USART_Init>
	printf("start \n\r \n");
     46c:	8f e7       	ldi	r24, 0x7F	; 127
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	49 d7       	rcall	.+3730   	; 0x1304 <puts>
	
	can_init();
     472:	cc de       	rcall	.-616    	; 0x20c <can_init>
	
	struct can_message message_input;
	message_input.id = 1;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	9a 83       	std	Y+2, r25	; 0x02
     47a:	89 83       	std	Y+1, r24	; 0x01
	message_input.length = 1;
     47c:	21 e0       	ldi	r18, 0x01	; 1
     47e:	2b 83       	std	Y+3, r18	; 0x03
	message_input.data[0] = (uint8_t) 0;
     480:	1c 82       	std	Y+4, r1	; 0x04
	
	struct can_message message_score;
	message_score.id = 1;
     482:	9f 87       	std	Y+15, r25	; 0x0f
     484:	8e 87       	std	Y+14, r24	; 0x0e
	message_score.length = 1;
     486:	28 8b       	std	Y+16, r18	; 0x10
	message_score.data[0] = (uint8_t) 1;	
     488:	29 8b       	std	Y+17, r18	; 0x11

	pwm_init();	
     48a:	3b d3       	rcall	.+1654   	; 0xb02 <pwm_init>
	adc_init();
     48c:	9d de       	rcall	.-710    	; 0x1c8 <adc_init>
	
	float pw = 1500;
	float x_val = 130;
	
	int old_val = adc_read();
     48e:	a5 de       	rcall	.-694    	; 0x1da <adc_read>
     490:	8c 01       	movw	r16, r24
	int new_val = adc_read();
     492:	a3 de       	rcall	.-698    	; 0x1da <adc_read>
	
	int succesfull_bounce = 0;
	sei();
     494:	78 94       	sei
	motor_init();
     496:	28 d1       	rcall	.+592    	; 0x6e8 <motor_init>
	printf("init\n\r");
     498:	89 e8       	ldi	r24, 0x89	; 137
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	9f 93       	push	r25
     49e:	8f 93       	push	r24
     4a0:	20 d7       	rcall	.+3648   	; 0x12e2 <printf>
     4a2:	2f ef       	ldi	r18, 0xFF	; 255
     4a4:	87 ea       	ldi	r24, 0xA7	; 167
     4a6:	91 e6       	ldi	r25, 0x61	; 97
     4a8:	21 50       	subi	r18, 0x01	; 1
     4aa:	80 40       	sbci	r24, 0x00	; 0
     4ac:	90 40       	sbci	r25, 0x00	; 0
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <main+0x5e>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <main+0x68>
     4b2:	00 00       	nop
	_delay_ms(2000);
	printf("init finish\n\r");
     4b4:	80 e9       	ldi	r24, 0x90	; 144
     4b6:	92 e0       	ldi	r25, 0x02	; 2
     4b8:	9f 93       	push	r25
     4ba:	8f 93       	push	r24
     4bc:	12 d7       	rcall	.+3620   	; 0x12e2 <printf>
	motor_reset_encoder();
     4be:	5e d1       	rcall	.+700    	; 0x77c <motor_reset_encoder>
	motor_dac_write(0);
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	f1 d0       	rcall	.+482    	; 0x6a6 <motor_dac_write>
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
	int16_t encoder = 0;
	
	int enable_game_fail = 0;
	
	uint8_t gain_choise = 0;
     4cc:	d1 2c       	mov	r13, r1
	printf("init finish\n\r");
	motor_reset_encoder();
	motor_dac_write(0);
	int16_t encoder = 0;
	
	int enable_game_fail = 0;
     4ce:	e1 2c       	mov	r14, r1
     4d0:	f1 2c       	mov	r15, r1
			}
			else if(message_input.id == 3){				
				PORTD |= (1 << PD3);
				_delay_ms(100);
				PORTD &= ~(1 << PD3);
				message_score.data[0] = 1;
     4d2:	88 24       	eor	r8, r8
     4d4:	83 94       	inc	r8
				can_message_send(&message_score);
				enable_game_fail = 1;				
     4d6:	bb 24       	eor	r11, r11
     4d8:	b3 94       	inc	r11
     4da:	c1 2c       	mov	r12, r1
		}
		else if( (old_val == 1) && (new_val == 0) && enable_game_fail)
		{
			old_val = 0;
			_delay_ms(50);
			enable_game_fail = 0;
     4dc:	91 2c       	mov	r9, r1
     4de:	a1 2c       	mov	r10, r1
	uint8_t gain_val = 0;
	
	int live_counter = 3;

    while(1){
		if(can_get_message(&message_input)){
     4e0:	ce 01       	movw	r24, r28
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	77 df       	rcall	.-274    	; 0x3d4 <can_get_message>
     4e6:	89 2b       	or	r24, r25
     4e8:	09 f4       	brne	.+2      	; 0x4ec <main+0xa2>
     4ea:	3c c0       	rjmp	.+120    	; 0x564 <main+0x11a>
			if(message_input.id == 1){
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	91 05       	cpc	r25, r1
     4f4:	79 f4       	brne	.+30     	; 0x514 <main+0xca>
				x_val = 255-(float) message_input.data[0];
     4f6:	6c 81       	ldd	r22, Y+4	; 0x04
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	88 d5       	rcall	.+2832   	; 0x1010 <__floatunsisf>
     500:	9b 01       	movw	r18, r22
     502:	ac 01       	movw	r20, r24
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	8f e7       	ldi	r24, 0x7F	; 127
     50a:	93 e4       	ldi	r25, 0x43	; 67
     50c:	7f d4       	rcall	.+2302   	; 0xe0c <__subsf3>
				pw = pwm_scale_joystick_val(x_val);
     50e:	61 d3       	rcall	.+1730   	; 0xbd2 <pwm_scale_joystick_val>
				pwm_set_pulse_width(pw);
     510:	17 d3       	rcall	.+1582   	; 0xb40 <pwm_set_pulse_width>
     512:	28 c0       	rjmp	.+80     	; 0x564 <main+0x11a>
				
			}
			else if(message_input.id == 2){
     514:	82 30       	cpi	r24, 0x02	; 2
     516:	91 05       	cpc	r25, r1
     518:	19 f4       	brne	.+6      	; 0x520 <main+0xd6>
				motor_pid_controller(message_input.data[0]);
     51a:	8c 81       	ldd	r24, Y+4	; 0x04
     51c:	3c d1       	rcall	.+632    	; 0x796 <motor_pid_controller>
     51e:	22 c0       	rjmp	.+68     	; 0x564 <main+0x11a>
				//motor_speed_control(message_input.data[0]);
			}
			else if(message_input.id == 3){				
     520:	83 30       	cpi	r24, 0x03	; 3
     522:	91 05       	cpc	r25, r1
     524:	91 f4       	brne	.+36     	; 0x54a <main+0x100>
				PORTD |= (1 << PD3);
     526:	5b 9a       	sbi	0x0b, 3	; 11
     528:	2f ef       	ldi	r18, 0xFF	; 255
     52a:	81 ee       	ldi	r24, 0xE1	; 225
     52c:	94 e0       	ldi	r25, 0x04	; 4
     52e:	21 50       	subi	r18, 0x01	; 1
     530:	80 40       	sbci	r24, 0x00	; 0
     532:	90 40       	sbci	r25, 0x00	; 0
     534:	e1 f7       	brne	.-8      	; 0x52e <main+0xe4>
     536:	00 c0       	rjmp	.+0      	; 0x538 <main+0xee>
     538:	00 00       	nop
				_delay_ms(100);
				PORTD &= ~(1 << PD3);
     53a:	5b 98       	cbi	0x0b, 3	; 11
				message_score.data[0] = 1;
     53c:	89 8a       	std	Y+17, r8	; 0x11
				can_message_send(&message_score);
     53e:	ce 01       	movw	r24, r28
     540:	0e 96       	adiw	r24, 0x0e	; 14
     542:	bc de       	rcall	.-648    	; 0x2bc <can_message_send>
				enable_game_fail = 1;				
     544:	eb 2c       	mov	r14, r11
     546:	fc 2c       	mov	r15, r12
     548:	0d c0       	rjmp	.+26     	; 0x564 <main+0x11a>
			}
			else if (message_input.id == 4){
     54a:	84 30       	cpi	r24, 0x04	; 4
     54c:	91 05       	cpc	r25, r1
     54e:	29 f4       	brne	.+10     	; 0x55a <main+0x110>
				gain_choise = message_input.data[0];
     550:	dc 80       	ldd	r13, Y+4	; 0x04
				motor_set_gain(gain_choise);
     552:	8d 2d       	mov	r24, r13
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	16 d2       	rcall	.+1068   	; 0x984 <motor_set_gain>
     558:	05 c0       	rjmp	.+10     	; 0x564 <main+0x11a>
			}else if (message_input.id == 5){
     55a:	05 97       	sbiw	r24, 0x05	; 5
     55c:	19 f4       	brne	.+6      	; 0x564 <main+0x11a>
				gain_val = message_input.data[0];
				motor_tune_gain(gain_choise, gain_val);
     55e:	6c 81       	ldd	r22, Y+4	; 0x04
     560:	8d 2d       	mov	r24, r13
     562:	81 d2       	rcall	.+1282   	; 0xa66 <motor_tune_gain>
			}			
		}

		
		
		new_val = adc_read();
     564:	3a de       	rcall	.-908    	; 0x1da <adc_read>

		
		if( (old_val == 0) && (new_val == 1) )
     566:	01 15       	cp	r16, r1
     568:	11 05       	cpc	r17, r1
     56a:	79 f4       	brne	.+30     	; 0x58a <main+0x140>
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	09 f0       	breq	.+2      	; 0x572 <main+0x128>
     570:	b7 cf       	rjmp	.-146    	; 0x4e0 <main+0x96>
     572:	2f ef       	ldi	r18, 0xFF	; 255
     574:	80 e7       	ldi	r24, 0x70	; 112
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	21 50       	subi	r18, 0x01	; 1
     57a:	80 40       	sbci	r24, 0x00	; 0
     57c:	90 40       	sbci	r25, 0x00	; 0
     57e:	e1 f7       	brne	.-8      	; 0x578 <main+0x12e>
     580:	00 c0       	rjmp	.+0      	; 0x582 <main+0x138>
     582:	00 00       	nop
		{
			old_val = 1;
     584:	0b 2d       	mov	r16, r11
     586:	1c 2d       	mov	r17, r12
     588:	ab cf       	rjmp	.-170    	; 0x4e0 <main+0x96>
			_delay_ms(50);
		}
		else if( (old_val == 1) && (new_val == 0) && enable_game_fail)
     58a:	01 30       	cpi	r16, 0x01	; 1
     58c:	11 05       	cpc	r17, r1
     58e:	09 f0       	breq	.+2      	; 0x592 <main+0x148>
     590:	a7 cf       	rjmp	.-178    	; 0x4e0 <main+0x96>
     592:	89 2b       	or	r24, r25
     594:	09 f0       	breq	.+2      	; 0x598 <main+0x14e>
     596:	a4 cf       	rjmp	.-184    	; 0x4e0 <main+0x96>
     598:	e1 14       	cp	r14, r1
     59a:	f1 04       	cpc	r15, r1
     59c:	09 f4       	brne	.+2      	; 0x5a0 <main+0x156>
     59e:	a0 cf       	rjmp	.-192    	; 0x4e0 <main+0x96>
     5a0:	2f ef       	ldi	r18, 0xFF	; 255
     5a2:	80 e7       	ldi	r24, 0x70	; 112
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	80 40       	sbci	r24, 0x00	; 0
     5aa:	90 40       	sbci	r25, 0x00	; 0
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <main+0x15c>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <main+0x166>
     5b0:	00 00       	nop
		{
			old_val = 0;
			_delay_ms(50);
			enable_game_fail = 0;
			message_score.data[0] = 0;
     5b2:	19 8a       	std	Y+17, r1	; 0x11
			can_message_send(&message_score);
     5b4:	ce 01       	movw	r24, r28
     5b6:	0e 96       	adiw	r24, 0x0e	; 14
     5b8:	81 de       	rcall	.-766    	; 0x2bc <can_message_send>
		}
		else if( (old_val == 1) && (new_val == 0) && enable_game_fail)
		{
			old_val = 0;
			_delay_ms(50);
			enable_game_fail = 0;
     5ba:	e9 2c       	mov	r14, r9
     5bc:	fa 2c       	mov	r15, r10
			old_val = 1;
			_delay_ms(50);
		}
		else if( (old_val == 1) && (new_val == 0) && enable_game_fail)
		{
			old_val = 0;
     5be:	09 2d       	mov	r16, r9
     5c0:	1a 2d       	mov	r17, r10
     5c2:	8e cf       	rjmp	.-228    	; 0x4e0 <main+0x96>

000005c4 <mcp2515_reset>:
	 spi_init();
	 mcp2515_reset();
}

void mcp2515_reset()
{
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	1f 92       	push	r1
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PB7); // Select CAN-controller
     5ce:	2f 98       	cbi	0x05, 7	; 5
	
	uint8_t reset[] = {MCP_RESET};
     5d0:	80 ec       	ldi	r24, 0xC0	; 192
     5d2:	89 83       	std	Y+1, r24	; 0x01
	spi_write(reset, 1);
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	ce 01       	movw	r24, r28
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	35 d3       	rcall	.+1642   	; 0xc46 <spi_write>
	
	PORTB |= (1<<PB7); // DeselectCAN-controller
     5dc:	2f 9a       	sbi	0x05, 7	; 5
}
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <mcp2515_init>:
#include "MCP2515_driver.h"


void mcp2515_init() 
{
	 spi_init();
     5e6:	00 d3       	rcall	.+1536   	; 0xbe8 <spi_init>
	 mcp2515_reset();
     5e8:	ed cf       	rjmp	.-38     	; 0x5c4 <mcp2515_reset>
     5ea:	08 95       	ret

000005ec <mcp2515_read>:
	PORTB |= (1<<PB7); // DeselectCAN-controller
}


void mcp2515_read(uint8_t address, uint8_t result[MAX_CAN_LENGTH], uint8_t data_size)
{	
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	1f 92       	push	r1
     5f8:	1f 92       	push	r1
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
     5fe:	8b 01       	movw	r16, r22
     600:	f4 2e       	mov	r15, r20
	PORTB &= ~(1<<PB7); // Select CAN-controller pb7  PINB0
     602:	2f 98       	cbi	0x05, 7	; 5
	
	uint8_t write[] = {MCP_READ, address};
     604:	93 e0       	ldi	r25, 0x03	; 3
     606:	99 83       	std	Y+1, r25	; 0x01
     608:	8a 83       	std	Y+2, r24	; 0x02
	spi_write(write, 2); // Send read instruction
     60a:	62 e0       	ldi	r22, 0x02	; 2
     60c:	ce 01       	movw	r24, r28
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	1a d3       	rcall	.+1588   	; 0xc46 <spi_write>
	
	spi_read(result, data_size); // Readresult
     612:	6f 2d       	mov	r22, r15
     614:	c8 01       	movw	r24, r16
     616:	f1 d2       	rcall	.+1506   	; 0xbfa <spi_read>
	
	PORTB |= (1<<PB7); // DeselectCAN-controller
     618:	2f 9a       	sbi	0x05, 7	; 5
	
	
}
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	08 95       	ret

0000062a <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data, uint8_t data_size)
{
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	00 d0       	rcall	.+0      	; 0x630 <mcp2515_write+0x6>
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PB7); // Select CAN-controller
     634:	2f 98       	cbi	0x05, 7	; 5
	
	uint8_t write[] = {MCP_WRITE, address, data};
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	99 83       	std	Y+1, r25	; 0x01
     63a:	8a 83       	std	Y+2, r24	; 0x02
     63c:	6b 83       	std	Y+3, r22	; 0x03
	spi_write(write, data_size + 2); // Send read instruction
     63e:	62 e0       	ldi	r22, 0x02	; 2
     640:	64 0f       	add	r22, r20
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	ff d2       	rcall	.+1534   	; 0xc46 <spi_write>
	
	PORTB |= (1<<PB7); // DeselectCAN-controller
     648:	2f 9a       	sbi	0x05, 7	; 5
		
}
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <mcp2515_request>:

void mcp2515_request(uint8_t rqs)
{
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	1f 92       	push	r1
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PB7); // Select CAN-controller	
     660:	2f 98       	cbi	0x05, 7	; 5
		
	uint8_t cmd[] = {rqs};
     662:	89 83       	std	Y+1, r24	; 0x01
	spi_write(cmd, 1);		
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	ce 01       	movw	r24, r28
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	ed d2       	rcall	.+1498   	; 0xc46 <spi_write>
	
	PORTB |= (1<<PB7); // Deselect CAN-controller
     66c:	2f 9a       	sbi	0x05, 7	; 5
}
     66e:	0f 90       	pop	r0
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <mcp2515_bit_modify>:

// Modify bits in the register / See datasheet 12.10
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) 
{
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	00 d0       	rcall	.+0      	; 0x67c <mcp2515_bit_modify+0x6>
     67c:	1f 92       	push	r1
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PB7); // Select CAN-controller
     682:	2f 98       	cbi	0x05, 7	; 5

	uint8_t bit_list[] = {MCP_BITMOD, address, mask, data};
     684:	95 e0       	ldi	r25, 0x05	; 5
     686:	99 83       	std	Y+1, r25	; 0x01
     688:	8a 83       	std	Y+2, r24	; 0x02
     68a:	6b 83       	std	Y+3, r22	; 0x03
     68c:	4c 83       	std	Y+4, r20	; 0x04
	spi_write(bit_list, 4);	
     68e:	64 e0       	ldi	r22, 0x04	; 4
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	d8 d2       	rcall	.+1456   	; 0xc46 <spi_write>
	
	PORTB |= (1<<PB7); //Deselect CAN-controller
     696:	2f 9a       	sbi	0x05, 7	; 5

}
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <motor_dac_write>:
	}
	else {
		motor_set_dir(1);
		motor_dac_write((slider_pos - 127) * 0.5*2);
	}
}
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	00 d0       	rcall	.+0      	; 0x6ac <motor_dac_write+0x6>
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	90 e5       	ldi	r25, 0x50	; 80
     6b2:	99 83       	std	Y+1, r25	; 0x01
     6b4:	1a 82       	std	Y+2, r1	; 0x02
     6b6:	8b 83       	std	Y+3, r24	; 0x03
     6b8:	64 e0       	ldi	r22, 0x04	; 4
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	e1 d2       	rcall	.+1474   	; 0xc82 <TWI_Start_Transceiver_With_Data>
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <motor_set_dir>:
     6cc:	88 23       	and	r24, r24
     6ce:	31 f0       	breq	.+12     	; 0x6dc <motor_set_dir+0x10>
     6d0:	e2 e0       	ldi	r30, 0x02	; 2
     6d2:	f1 e0       	ldi	r31, 0x01	; 1
     6d4:	80 81       	ld	r24, Z
     6d6:	82 60       	ori	r24, 0x02	; 2
     6d8:	80 83       	st	Z, r24
     6da:	08 95       	ret
     6dc:	e2 e0       	ldi	r30, 0x02	; 2
     6de:	f1 e0       	ldi	r31, 0x01	; 1
     6e0:	80 81       	ld	r24, Z
     6e2:	8d 7f       	andi	r24, 0xFD	; 253
     6e4:	80 83       	st	Z, r24
     6e6:	08 95       	ret

000006e8 <motor_init>:
     6e8:	c2 d2       	rcall	.+1412   	; 0xc6e <TWI_Master_Initialise>
     6ea:	e1 e0       	ldi	r30, 0x01	; 1
     6ec:	f1 e0       	ldi	r31, 0x01	; 1
     6ee:	80 81       	ld	r24, Z
     6f0:	8a 67       	ori	r24, 0x7A	; 122
     6f2:	80 83       	st	Z, r24
     6f4:	e2 e0       	ldi	r30, 0x02	; 2
     6f6:	f1 e0       	ldi	r31, 0x01	; 1
     6f8:	80 81       	ld	r24, Z
     6fa:	82 60       	ori	r24, 0x02	; 2
     6fc:	80 83       	st	Z, r24
     6fe:	80 81       	ld	r24, Z
     700:	80 61       	ori	r24, 0x10	; 16
     702:	80 83       	st	Z, r24
     704:	10 92 07 01 	sts	0x0107, r1
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	e0 df       	rcall	.-64     	; 0x6cc <motor_set_dir>
     70c:	80 e5       	ldi	r24, 0x50	; 80
     70e:	cb cf       	rjmp	.-106    	; 0x6a6 <motor_dac_write>
     710:	08 95       	ret

00000712 <motor_read_encoder>:

int16_t motor_read_encoder(){
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	00 d0       	rcall	.+0      	; 0x718 <motor_read_encoder+0x6>
     718:	1f 92       	push	r1
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
	volatile int16_t encoder_val;
	volatile uint8_t lsb;
	volatile uint8_t msb;
	
	PORTH &= ~(1 << PH5); //set !OE low. enable output
     71e:	e2 e0       	ldi	r30, 0x02	; 2
     720:	f1 e0       	ldi	r31, 0x01	; 1
     722:	80 81       	ld	r24, Z
     724:	8f 7d       	andi	r24, 0xDF	; 223
     726:	80 83       	st	Z, r24
	PORTH &= ~(1 << PH3); //set SEL low to get high byte
     728:	80 81       	ld	r24, Z
     72a:	87 7f       	andi	r24, 0xF7	; 247
     72c:	80 83       	st	Z, r24
     72e:	87 e8       	ldi	r24, 0x87	; 135
     730:	93 e1       	ldi	r25, 0x13	; 19
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <motor_read_encoder+0x20>
     736:	00 c0       	rjmp	.+0      	; 0x738 <motor_read_encoder+0x26>
     738:	00 00       	nop
	
	_delay_ms(20);
	
	msb = PINK; // read msb
     73a:	80 91 06 01 	lds	r24, 0x0106
     73e:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTH |= (1 << PH3); // set SEL high to get low byte
     740:	80 81       	ld	r24, Z
     742:	88 60       	ori	r24, 0x08	; 8
     744:	80 83       	st	Z, r24
     746:	87 e8       	ldi	r24, 0x87	; 135
     748:	93 e1       	ldi	r25, 0x13	; 19
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <motor_read_encoder+0x38>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <motor_read_encoder+0x3e>
     750:	00 00       	nop
	
	_delay_ms(20);
	
	lsb = PINK; // read lsb
     752:	80 91 06 01 	lds	r24, 0x0106
     756:	8b 83       	std	Y+3, r24	; 0x03
	
	PORTH |= (1 << PH5); // Disable encoder read
     758:	80 81       	ld	r24, Z
     75a:	80 62       	ori	r24, 0x20	; 32
     75c:	80 83       	st	Z, r24
	
	encoder_val = ((msb<<8) | lsb); //process data
     75e:	2c 81       	ldd	r18, Y+4	; 0x04
     760:	8b 81       	ldd	r24, Y+3	; 0x03
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	92 2b       	or	r25, r18
     766:	9a 83       	std	Y+2, r25	; 0x02
     768:	89 83       	std	Y+1, r24	; 0x01
	return encoder_val;
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <motor_reset_encoder>:

void motor_reset_encoder() {
	PORTH &= ~(1<<PH6);
     77c:	e2 e0       	ldi	r30, 0x02	; 2
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	80 81       	ld	r24, Z
     782:	8f 7b       	andi	r24, 0xBF	; 191
     784:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     786:	82 e4       	ldi	r24, 0x42	; 66
     788:	8a 95       	dec	r24
     78a:	f1 f7       	brne	.-4      	; 0x788 <motor_reset_encoder+0xc>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <motor_reset_encoder+0x12>
	_delay_us(200);
	PORTH |= (1<<PH6);
     78e:	80 81       	ld	r24, Z
     790:	80 64       	ori	r24, 0x40	; 64
     792:	80 83       	st	Z, r24
     794:	08 95       	ret

00000796 <motor_pid_controller>:
}

void motor_pid_controller(uint8_t reference){
     796:	af 92       	push	r10
     798:	bf 92       	push	r11
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	c8 2f       	mov	r28, r24
	reference = -reference;
	uint16_t encoder = motor_read_encoder();
     7ac:	b2 df       	rcall	.-156    	; 0x712 <motor_read_encoder>
	_delay_us(200);
	PORTH |= (1<<PH6);
}

void motor_pid_controller(uint8_t reference){
	reference = -reference;
     7ae:	c1 95       	neg	r28
	uint16_t encoder = motor_read_encoder();
	double scalor = 0.033031;	// 255 / (encoder_max - encoder_min)
	double encoder_diff =(double) encoder - (double) encoder_min;
	double measured_val = encoder_diff * scalor;
	int error = reference - (int) measured_val;
     7b0:	d0 e0       	ldi	r29, 0x00	; 0

void motor_pid_controller(uint8_t reference){
	reference = -reference;
	uint16_t encoder = motor_read_encoder();
	double scalor = 0.033031;	// 255 / (encoder_max - encoder_min)
	double encoder_diff =(double) encoder - (double) encoder_min;
     7b2:	bc 01       	movw	r22, r24
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	2b d4       	rcall	.+2134   	; 0x1010 <__floatunsisf>
     7ba:	6b 01       	movw	r12, r22
     7bc:	7c 01       	movw	r14, r24
     7be:	60 91 06 02 	lds	r22, 0x0206
     7c2:	70 91 07 02 	lds	r23, 0x0207
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	22 d4       	rcall	.+2116   	; 0x1010 <__floatunsisf>
     7cc:	9b 01       	movw	r18, r22
     7ce:	ac 01       	movw	r20, r24
     7d0:	c7 01       	movw	r24, r14
     7d2:	b6 01       	movw	r22, r12
     7d4:	1b d3       	rcall	.+1590   	; 0xe0c <__subsf3>
	double measured_val = encoder_diff * scalor;
     7d6:	24 e8       	ldi	r18, 0x84	; 132
     7d8:	3b e4       	ldi	r19, 0x4B	; 75
     7da:	47 e0       	ldi	r20, 0x07	; 7
     7dc:	5d e3       	ldi	r21, 0x3D	; 61
     7de:	ce d4       	rcall	.+2460   	; 0x117c <__mulsf3>
	int error = reference - (int) measured_val;
     7e0:	e6 d3       	rcall	.+1996   	; 0xfae <__fixsfsi>
     7e2:	c6 1b       	sub	r28, r22
     7e4:	d7 0b       	sbc	r29, r23
	//int error = reference - (encoder - encoder_min) * 255 / (encoder_max - encoder_min); 
	sum_error += error;
     7e6:	80 91 ac 02 	lds	r24, 0x02AC
     7ea:	90 91 ad 02 	lds	r25, 0x02AD
     7ee:	8c 0f       	add	r24, r28
     7f0:	9d 1f       	adc	r25, r29
	if (sum_error < -500){sum_error = -500;}
     7f2:	8c 30       	cpi	r24, 0x0C	; 12
     7f4:	2e ef       	ldi	r18, 0xFE	; 254
     7f6:	92 07       	cpc	r25, r18
     7f8:	3c f4       	brge	.+14     	; 0x808 <motor_pid_controller+0x72>
     7fa:	8c e0       	ldi	r24, 0x0C	; 12
     7fc:	9e ef       	ldi	r25, 0xFE	; 254
     7fe:	90 93 ad 02 	sts	0x02AD, r25
     802:	80 93 ac 02 	sts	0x02AC, r24
     806:	0f c0       	rjmp	.+30     	; 0x826 <motor_pid_controller+0x90>
	else if (sum_error > 500){sum_error = 500;}
     808:	85 3f       	cpi	r24, 0xF5	; 245
     80a:	21 e0       	ldi	r18, 0x01	; 1
     80c:	92 07       	cpc	r25, r18
     80e:	2c f4       	brge	.+10     	; 0x81a <motor_pid_controller+0x84>
	double scalor = 0.033031;	// 255 / (encoder_max - encoder_min)
	double encoder_diff =(double) encoder - (double) encoder_min;
	double measured_val = encoder_diff * scalor;
	int error = reference - (int) measured_val;
	//int error = reference - (encoder - encoder_min) * 255 / (encoder_max - encoder_min); 
	sum_error += error;
     810:	90 93 ad 02 	sts	0x02AD, r25
     814:	80 93 ac 02 	sts	0x02AC, r24
     818:	06 c0       	rjmp	.+12     	; 0x826 <motor_pid_controller+0x90>
	if (sum_error < -500){sum_error = -500;}
	else if (sum_error > 500){sum_error = 500;}
     81a:	84 ef       	ldi	r24, 0xF4	; 244
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	90 93 ad 02 	sts	0x02AD, r25
     822:	80 93 ac 02 	sts	0x02AC, r24
	int integral_part = ( ki * sum_error / freq );
     826:	60 91 08 02 	lds	r22, 0x0208
     82a:	70 91 09 02 	lds	r23, 0x0209
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	ee d3       	rcall	.+2012   	; 0x1010 <__floatunsisf>
     834:	6b 01       	movw	r12, r22
     836:	7c 01       	movw	r14, r24
     838:	60 91 ac 02 	lds	r22, 0x02AC
     83c:	70 91 ad 02 	lds	r23, 0x02AD
     840:	88 27       	eor	r24, r24
     842:	77 fd       	sbrc	r23, 7
     844:	80 95       	com	r24
     846:	98 2f       	mov	r25, r24
     848:	e5 d3       	rcall	.+1994   	; 0x1014 <__floatsisf>
     84a:	20 91 0a 02 	lds	r18, 0x020A
     84e:	30 91 0b 02 	lds	r19, 0x020B
     852:	40 91 0c 02 	lds	r20, 0x020C
     856:	50 91 0d 02 	lds	r21, 0x020D
     85a:	90 d4       	rcall	.+2336   	; 0x117c <__mulsf3>
     85c:	a7 01       	movw	r20, r14
     85e:	96 01       	movw	r18, r12
     860:	3e d3       	rcall	.+1660   	; 0xede <__divsf3>
     862:	a5 d3       	rcall	.+1866   	; 0xfae <__fixsfsi>
     864:	5b 01       	movw	r10, r22
     866:	89 e2       	ldi	r24, 0x29	; 41
     868:	a8 16       	cp	r10, r24
     86a:	b1 04       	cpc	r11, r1
     86c:	2c f0       	brlt	.+10     	; 0x878 <motor_pid_controller+0xe2>
     86e:	0f 2e       	mov	r0, r31
     870:	f8 e2       	ldi	r31, 0x28	; 40
     872:	af 2e       	mov	r10, r31
     874:	b1 2c       	mov	r11, r1
     876:	f0 2d       	mov	r31, r0
	if (integral_part < -40){integral_part = -40;}
	else if (integral_part > 40){integral_part = 40;}
	int derivative_part = ( kd * (error - prev_error) * freq);
     878:	80 91 ae 02 	lds	r24, 0x02AE
     87c:	90 91 af 02 	lds	r25, 0x02AF
     880:	be 01       	movw	r22, r28
     882:	68 1b       	sub	r22, r24
     884:	79 0b       	sbc	r23, r25
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	c2 d3       	rcall	.+1924   	; 0x1010 <__floatunsisf>
     88c:	20 91 0e 02 	lds	r18, 0x020E
     890:	30 91 0f 02 	lds	r19, 0x020F
     894:	40 91 10 02 	lds	r20, 0x0210
     898:	50 91 11 02 	lds	r21, 0x0211
     89c:	6f d4       	rcall	.+2270   	; 0x117c <__mulsf3>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
     8a2:	c7 01       	movw	r24, r14
     8a4:	b6 01       	movw	r22, r12
     8a6:	6a d4       	rcall	.+2260   	; 0x117c <__mulsf3>
     8a8:	82 d3       	rcall	.+1796   	; 0xfae <__fixsfsi>
     8aa:	8b 01       	movw	r16, r22
     8ac:	69 32       	cpi	r22, 0x29	; 41
     8ae:	71 05       	cpc	r23, r1
     8b0:	14 f0       	brlt	.+4      	; 0x8b6 <motor_pid_controller+0x120>
     8b2:	08 e2       	ldi	r16, 0x28	; 40
     8b4:	10 e0       	ldi	r17, 0x00	; 0
	if (derivative_part < -40){derivative_part = -40;}
	else if (derivative_part > 40){derivative_part = 40;}
	int u = ( kp * error ) + integral_part + derivative_part;
     8b6:	be 01       	movw	r22, r28
     8b8:	88 27       	eor	r24, r24
     8ba:	77 fd       	sbrc	r23, 7
     8bc:	80 95       	com	r24
     8be:	98 2f       	mov	r25, r24
     8c0:	a9 d3       	rcall	.+1874   	; 0x1014 <__floatsisf>
     8c2:	20 91 12 02 	lds	r18, 0x0212
     8c6:	30 91 13 02 	lds	r19, 0x0213
     8ca:	40 91 14 02 	lds	r20, 0x0214
     8ce:	50 91 15 02 	lds	r21, 0x0215
     8d2:	54 d4       	rcall	.+2216   	; 0x117c <__mulsf3>
     8d4:	6b 01       	movw	r12, r22
     8d6:	7c 01       	movw	r14, r24
     8d8:	b5 01       	movw	r22, r10
     8da:	28 ed       	ldi	r18, 0xD8	; 216
     8dc:	a2 16       	cp	r10, r18
     8de:	2f ef       	ldi	r18, 0xFF	; 255
     8e0:	b2 06       	cpc	r11, r18
     8e2:	14 f4       	brge	.+4      	; 0x8e8 <motor_pid_controller+0x152>
     8e4:	68 ed       	ldi	r22, 0xD8	; 216
     8e6:	7f ef       	ldi	r23, 0xFF	; 255
     8e8:	88 27       	eor	r24, r24
     8ea:	77 fd       	sbrc	r23, 7
     8ec:	80 95       	com	r24
     8ee:	98 2f       	mov	r25, r24
     8f0:	91 d3       	rcall	.+1826   	; 0x1014 <__floatsisf>
     8f2:	9b 01       	movw	r18, r22
     8f4:	ac 01       	movw	r20, r24
     8f6:	c7 01       	movw	r24, r14
     8f8:	b6 01       	movw	r22, r12
     8fa:	89 d2       	rcall	.+1298   	; 0xe0e <__addsf3>
     8fc:	6b 01       	movw	r12, r22
     8fe:	7c 01       	movw	r14, r24
     900:	b8 01       	movw	r22, r16
     902:	08 3d       	cpi	r16, 0xD8	; 216
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	18 07       	cpc	r17, r24
     908:	14 f4       	brge	.+4      	; 0x90e <motor_pid_controller+0x178>
     90a:	68 ed       	ldi	r22, 0xD8	; 216
     90c:	7f ef       	ldi	r23, 0xFF	; 255
     90e:	88 27       	eor	r24, r24
     910:	77 fd       	sbrc	r23, 7
     912:	80 95       	com	r24
     914:	98 2f       	mov	r25, r24
     916:	7e d3       	rcall	.+1788   	; 0x1014 <__floatsisf>
     918:	9b 01       	movw	r18, r22
     91a:	ac 01       	movw	r20, r24
     91c:	c7 01       	movw	r24, r14
     91e:	b6 01       	movw	r22, r12
     920:	76 d2       	rcall	.+1260   	; 0xe0e <__addsf3>
     922:	45 d3       	rcall	.+1674   	; 0xfae <__fixsfsi>
     924:	6b 01       	movw	r12, r22
     926:	7c 01       	movw	r14, r24
     928:	8b 01       	movw	r16, r22
	prev_error = error;
     92a:	d0 93 af 02 	sts	0x02AF, r29
     92e:	c0 93 ae 02 	sts	0x02AE, r28
	printf("u_pid  %d \n\r", u);
     932:	df 92       	push	r13
     934:	6f 93       	push	r22
     936:	8e e9       	ldi	r24, 0x9E	; 158
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	d1 d4       	rcall	.+2466   	; 0x12e2 <printf>
	if (u > 0){
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	1c 14       	cp	r1, r12
     94a:	1d 04       	cpc	r1, r13
     94c:	1c f4       	brge	.+6      	; 0x954 <motor_pid_controller+0x1be>
		motor_set_dir(0);
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	bd de       	rcall	.-646    	; 0x6cc <motor_set_dir>
     952:	06 c0       	rjmp	.+12     	; 0x960 <motor_pid_controller+0x1ca>
	}
	else {
		u = -u;
     954:	00 27       	eor	r16, r16
     956:	11 27       	eor	r17, r17
     958:	0c 19       	sub	r16, r12
     95a:	1d 09       	sbc	r17, r13
		motor_set_dir(1);
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	b6 de       	rcall	.-660    	; 0x6cc <motor_set_dir>
     960:	c8 01       	movw	r24, r16
     962:	05 36       	cpi	r16, 0x65	; 101
     964:	11 05       	cpc	r17, r1
     966:	14 f0       	brlt	.+4      	; 0x96c <motor_pid_controller+0x1d6>
     968:	84 e6       	ldi	r24, 0x64	; 100
     96a:	90 e0       	ldi	r25, 0x00	; 0
	}
	if ( 100 < u ){ u = 100; }
	motor_dac_write(u);
     96c:	9c de       	rcall	.-712    	; 0x6a6 <motor_dac_write>
 	
}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	bf 90       	pop	r11
     980:	af 90       	pop	r10
     982:	08 95       	ret

00000984 <motor_set_gain>:

void motor_set_gain(int gain_choise){
	switch (gain_choise){
     984:	81 30       	cpi	r24, 0x01	; 1
     986:	91 05       	cpc	r25, r1
     988:	61 f1       	breq	.+88     	; 0x9e2 <motor_set_gain+0x5e>
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	91 05       	cpc	r25, r1
     98e:	09 f4       	brne	.+2      	; 0x992 <motor_set_gain+0xe>
     990:	4d c0       	rjmp	.+154    	; 0xa2c <motor_set_gain+0xa8>
     992:	89 2b       	or	r24, r25
     994:	09 f0       	breq	.+2      	; 0x998 <motor_set_gain+0x14>
     996:	66 c0       	rjmp	.+204    	; 0xa64 <motor_set_gain+0xe0>
		case 0:
			kp = 1.2;
     998:	8a e9       	ldi	r24, 0x9A	; 154
     99a:	99 e9       	ldi	r25, 0x99	; 153
     99c:	a9 e9       	ldi	r26, 0x99	; 153
     99e:	bf e3       	ldi	r27, 0x3F	; 63
     9a0:	80 93 12 02 	sts	0x0212, r24
     9a4:	90 93 13 02 	sts	0x0213, r25
     9a8:	a0 93 14 02 	sts	0x0214, r26
     9ac:	b0 93 15 02 	sts	0x0215, r27
			ki = 0.8;
     9b0:	8d ec       	ldi	r24, 0xCD	; 205
     9b2:	9c ec       	ldi	r25, 0xCC	; 204
     9b4:	ac e4       	ldi	r26, 0x4C	; 76
     9b6:	bf e3       	ldi	r27, 0x3F	; 63
     9b8:	80 93 0a 02 	sts	0x020A, r24
     9bc:	90 93 0b 02 	sts	0x020B, r25
     9c0:	a0 93 0c 02 	sts	0x020C, r26
     9c4:	b0 93 0d 02 	sts	0x020D, r27
			kd = 0.2;
     9c8:	8d ec       	ldi	r24, 0xCD	; 205
     9ca:	9c ec       	ldi	r25, 0xCC	; 204
     9cc:	ac e4       	ldi	r26, 0x4C	; 76
     9ce:	be e3       	ldi	r27, 0x3E	; 62
     9d0:	80 93 0e 02 	sts	0x020E, r24
     9d4:	90 93 0f 02 	sts	0x020F, r25
     9d8:	a0 93 10 02 	sts	0x0210, r26
     9dc:	b0 93 11 02 	sts	0x0211, r27
			break;
     9e0:	08 95       	ret
		case 1:
			kp = 0.6;
     9e2:	8a e9       	ldi	r24, 0x9A	; 154
     9e4:	99 e9       	ldi	r25, 0x99	; 153
     9e6:	a9 e1       	ldi	r26, 0x19	; 25
     9e8:	bf e3       	ldi	r27, 0x3F	; 63
     9ea:	80 93 12 02 	sts	0x0212, r24
     9ee:	90 93 13 02 	sts	0x0213, r25
     9f2:	a0 93 14 02 	sts	0x0214, r26
     9f6:	b0 93 15 02 	sts	0x0215, r27
			ki = 0.8;
     9fa:	8d ec       	ldi	r24, 0xCD	; 205
     9fc:	9c ec       	ldi	r25, 0xCC	; 204
     9fe:	ac e4       	ldi	r26, 0x4C	; 76
     a00:	bf e3       	ldi	r27, 0x3F	; 63
     a02:	80 93 0a 02 	sts	0x020A, r24
     a06:	90 93 0b 02 	sts	0x020B, r25
     a0a:	a0 93 0c 02 	sts	0x020C, r26
     a0e:	b0 93 0d 02 	sts	0x020D, r27
			kd = 0.2;
     a12:	8d ec       	ldi	r24, 0xCD	; 205
     a14:	9c ec       	ldi	r25, 0xCC	; 204
     a16:	ac e4       	ldi	r26, 0x4C	; 76
     a18:	be e3       	ldi	r27, 0x3E	; 62
     a1a:	80 93 0e 02 	sts	0x020E, r24
     a1e:	90 93 0f 02 	sts	0x020F, r25
     a22:	a0 93 10 02 	sts	0x0210, r26
     a26:	b0 93 11 02 	sts	0x0211, r27
			break;
     a2a:	08 95       	ret
		case 2:
			kp = 2.0;
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	a0 e0       	ldi	r26, 0x00	; 0
     a32:	b0 e4       	ldi	r27, 0x40	; 64
     a34:	80 93 12 02 	sts	0x0212, r24
     a38:	90 93 13 02 	sts	0x0213, r25
     a3c:	a0 93 14 02 	sts	0x0214, r26
     a40:	b0 93 15 02 	sts	0x0215, r27
			ki = 0.0;
     a44:	10 92 0a 02 	sts	0x020A, r1
     a48:	10 92 0b 02 	sts	0x020B, r1
     a4c:	10 92 0c 02 	sts	0x020C, r1
     a50:	10 92 0d 02 	sts	0x020D, r1
			kd = 0.0;
     a54:	10 92 0e 02 	sts	0x020E, r1
     a58:	10 92 0f 02 	sts	0x020F, r1
     a5c:	10 92 10 02 	sts	0x0210, r1
     a60:	10 92 11 02 	sts	0x0211, r1
     a64:	08 95       	ret

00000a66 <motor_tune_gain>:
			break;
	}
}
double b = 0;
void motor_tune_gain(uint8_t gain_choise, uint8_t gain_val){
	switch(gain_choise){
     a66:	84 30       	cpi	r24, 0x04	; 4
     a68:	b1 f0       	breq	.+44     	; 0xa96 <motor_tune_gain+0x30>
     a6a:	85 30       	cpi	r24, 0x05	; 5
     a6c:	31 f1       	breq	.+76     	; 0xaba <motor_tune_gain+0x54>
     a6e:	83 30       	cpi	r24, 0x03	; 3
     a70:	a9 f5       	brne	.+106    	; 0xadc <motor_tune_gain+0x76>
		case 3:
			kp = (double)(gain_val / 100.0);
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	cd d2       	rcall	.+1434   	; 0x1014 <__floatsisf>
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	48 ec       	ldi	r20, 0xC8	; 200
     a80:	52 e4       	ldi	r21, 0x42	; 66
     a82:	2d d2       	rcall	.+1114   	; 0xede <__divsf3>
     a84:	60 93 12 02 	sts	0x0212, r22
     a88:	70 93 13 02 	sts	0x0213, r23
     a8c:	80 93 14 02 	sts	0x0214, r24
     a90:	90 93 15 02 	sts	0x0215, r25
			break;
     a94:	08 95       	ret
		case 4:
			ki = (double)(gain_val / 100.0);
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	bb d2       	rcall	.+1398   	; 0x1014 <__floatsisf>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	48 ec       	ldi	r20, 0xC8	; 200
     aa4:	52 e4       	ldi	r21, 0x42	; 66
     aa6:	1b d2       	rcall	.+1078   	; 0xede <__divsf3>
     aa8:	60 93 0a 02 	sts	0x020A, r22
     aac:	70 93 0b 02 	sts	0x020B, r23
     ab0:	80 93 0c 02 	sts	0x020C, r24
     ab4:	90 93 0d 02 	sts	0x020D, r25
			break;
     ab8:	08 95       	ret
		case 5:
			kd = (double)(gain_val / 100.0);
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	a9 d2       	rcall	.+1362   	; 0x1014 <__floatsisf>
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	48 ec       	ldi	r20, 0xC8	; 200
     ac8:	52 e4       	ldi	r21, 0x42	; 66
     aca:	09 d2       	rcall	.+1042   	; 0xede <__divsf3>
     acc:	60 93 0e 02 	sts	0x020E, r22
     ad0:	70 93 0f 02 	sts	0x020F, r23
     ad4:	80 93 10 02 	sts	0x0210, r24
     ad8:	90 93 11 02 	sts	0x0211, r25
     adc:	08 95       	ret

00000ade <pwm_set_signal_period>:
	
}

void pwm_set_signal_period(){
	//prescale
	set_bit(TCCR1B, CS11);
     ade:	e1 e8       	ldi	r30, 0x81	; 129
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	80 81       	ld	r24, Z
     ae4:	82 60       	ori	r24, 0x02	; 2
     ae6:	80 83       	st	Z, r24
	clear_bit(TCCR1B, CS12);
     ae8:	80 81       	ld	r24, Z
     aea:	8b 7f       	andi	r24, 0xFB	; 251
     aec:	80 83       	st	Z, r24
	clear_bit(TCCR1B, CS10);
     aee:	80 81       	ld	r24, Z
     af0:	8e 7f       	andi	r24, 0xFE	; 254
     af2:	80 83       	st	Z, r24
	
	ICR1 = TOP_VALUE;	//set period to 20ms
     af4:	80 e4       	ldi	r24, 0x40	; 64
     af6:	9c e9       	ldi	r25, 0x9C	; 156
     af8:	90 93 87 00 	sts	0x0087, r25
     afc:	80 93 86 00 	sts	0x0086, r24
     b00:	08 95       	ret

00000b02 <pwm_init>:
#define  TOP_VALUE FOSC/8/50


void pwm_init(){
	// set mode to fast pwm
	set_bit(TCCR1B, WGM13);
     b02:	e1 e8       	ldi	r30, 0x81	; 129
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 81       	ld	r24, Z
     b08:	80 61       	ori	r24, 0x10	; 16
     b0a:	80 83       	st	Z, r24
	set_bit(TCCR1B, WGM12);
     b0c:	80 81       	ld	r24, Z
     b0e:	88 60       	ori	r24, 0x08	; 8
     b10:	80 83       	st	Z, r24
	set_bit(TCCR1A, WGM11);
     b12:	e0 e8       	ldi	r30, 0x80	; 128
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	80 81       	ld	r24, Z
     b18:	82 60       	ori	r24, 0x02	; 2
     b1a:	80 83       	st	Z, r24
	clear_bit(TCCR1A, WGM10);
     b1c:	80 81       	ld	r24, Z
     b1e:	8e 7f       	andi	r24, 0xFE	; 254
     b20:	80 83       	st	Z, r24
	
	//set output on PB5 to compare
	set_bit(TCCR1A, COM1A1);
     b22:	80 81       	ld	r24, Z
     b24:	80 68       	ori	r24, 0x80	; 128
     b26:	80 83       	st	Z, r24
	clear_bit(TCCR1A, COM1A0);
     b28:	80 81       	ld	r24, Z
     b2a:	8f 7b       	andi	r24, 0xBF	; 191
     b2c:	80 83       	st	Z, r24
	pwm_set_signal_period();
     b2e:	d7 df       	rcall	.-82     	; 0xade <pwm_set_signal_period>
	
	//set PB5 to output mode
	set_bit(DDRB, PB5);
     b30:	25 9a       	sbi	0x04, 5	; 4
void pwm_set_pulse_width(float pulse_width){
	//makes sure pulse with is within bounderies
	if (pulse_width<900.0){pulse_width=900.0;}
	if (pulse_width>2100.0){pulse_width=2100.0;}	
	int pulse = (int) (pulse_width/20000*TOP_VALUE);	//pw*2
	OCR1A = pulse;
     b32:	88 eb       	ldi	r24, 0xB8	; 184
     b34:	9b e0       	ldi	r25, 0x0B	; 11
     b36:	90 93 89 00 	sts	0x0089, r25
     b3a:	80 93 88 00 	sts	0x0088, r24
     b3e:	08 95       	ret

00000b40 <pwm_set_pulse_width>:
	clear_bit(TCCR1B, CS10);
	
	ICR1 = TOP_VALUE;	//set period to 20ms
}

void pwm_set_pulse_width(float pulse_width){
     b40:	cf 92       	push	r12
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	6b 01       	movw	r12, r22
     b4a:	7c 01       	movw	r14, r24
	//makes sure pulse with is within bounderies
	if (pulse_width<900.0){pulse_width=900.0;}
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	41 e6       	ldi	r20, 0x61	; 97
     b52:	54 e4       	ldi	r21, 0x44	; 68
     b54:	c0 d1       	rcall	.+896    	; 0xed6 <__cmpsf2>
     b56:	88 23       	and	r24, r24
     b58:	54 f0       	brlt	.+20     	; 0xb6e <pwm_set_pulse_width+0x2e>
	if (pulse_width>2100.0){pulse_width=2100.0;}	
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e4       	ldi	r19, 0x40	; 64
     b5e:	43 e0       	ldi	r20, 0x03	; 3
     b60:	55 e4       	ldi	r21, 0x45	; 69
     b62:	c7 01       	movw	r24, r14
     b64:	b6 01       	movw	r22, r12
     b66:	06 d3       	rcall	.+1548   	; 0x1174 <__gesf2>
     b68:	18 16       	cp	r1, r24
     b6a:	54 f0       	brlt	.+20     	; 0xb80 <pwm_set_pulse_width+0x40>
     b6c:	12 c0       	rjmp	.+36     	; 0xb92 <pwm_set_pulse_width+0x52>
	ICR1 = TOP_VALUE;	//set period to 20ms
}

void pwm_set_pulse_width(float pulse_width){
	//makes sure pulse with is within bounderies
	if (pulse_width<900.0){pulse_width=900.0;}
     b6e:	0f 2e       	mov	r0, r31
     b70:	c1 2c       	mov	r12, r1
     b72:	d1 2c       	mov	r13, r1
     b74:	f1 e6       	ldi	r31, 0x61	; 97
     b76:	ef 2e       	mov	r14, r31
     b78:	f4 e4       	ldi	r31, 0x44	; 68
     b7a:	ff 2e       	mov	r15, r31
     b7c:	f0 2d       	mov	r31, r0
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <pwm_set_pulse_width+0x52>
	if (pulse_width>2100.0){pulse_width=2100.0;}	
     b80:	0f 2e       	mov	r0, r31
     b82:	c1 2c       	mov	r12, r1
     b84:	f0 e4       	ldi	r31, 0x40	; 64
     b86:	df 2e       	mov	r13, r31
     b88:	f3 e0       	ldi	r31, 0x03	; 3
     b8a:	ef 2e       	mov	r14, r31
     b8c:	f5 e4       	ldi	r31, 0x45	; 69
     b8e:	ff 2e       	mov	r15, r31
     b90:	f0 2d       	mov	r31, r0
	int pulse = (int) (pulse_width/20000*TOP_VALUE);	//pw*2
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e4       	ldi	r19, 0x40	; 64
     b96:	4c e9       	ldi	r20, 0x9C	; 156
     b98:	56 e4       	ldi	r21, 0x46	; 70
     b9a:	c7 01       	movw	r24, r14
     b9c:	b6 01       	movw	r22, r12
     b9e:	9f d1       	rcall	.+830    	; 0xede <__divsf3>
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	34 e2       	ldi	r19, 0x24	; 36
     ba4:	44 e7       	ldi	r20, 0x74	; 116
     ba6:	5b e4       	ldi	r21, 0x4B	; 75
     ba8:	e9 d2       	rcall	.+1490   	; 0x117c <__mulsf3>
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	5e e3       	ldi	r21, 0x3E	; 62
     bb2:	e4 d2       	rcall	.+1480   	; 0x117c <__mulsf3>
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	48 e4       	ldi	r20, 0x48	; 72
     bba:	52 e4       	ldi	r21, 0x42	; 66
     bbc:	90 d1       	rcall	.+800    	; 0xede <__divsf3>
     bbe:	f7 d1       	rcall	.+1006   	; 0xfae <__fixsfsi>
	OCR1A = pulse;
     bc0:	70 93 89 00 	sts	0x0089, r23
     bc4:	60 93 88 00 	sts	0x0088, r22
}
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	df 90       	pop	r13
     bce:	cf 90       	pop	r12
     bd0:	08 95       	ret

00000bd2 <pwm_scale_joystick_val>:

float pwm_scale_joystick_val(float x_val){
		return (x_val*4.7059+900);	
     bd2:	2c eb       	ldi	r18, 0xBC	; 188
     bd4:	36 e9       	ldi	r19, 0x96	; 150
     bd6:	46 e9       	ldi	r20, 0x96	; 150
     bd8:	50 e4       	ldi	r21, 0x40	; 64
     bda:	d0 d2       	rcall	.+1440   	; 0x117c <__mulsf3>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	41 e6       	ldi	r20, 0x61	; 97
     be2:	54 e4       	ldi	r21, 0x44	; 68
     be4:	14 c1       	rjmp	.+552    	; 0xe0e <__addsf3>
     be6:	08 95       	ret

00000be8 <spi_init>:
#define MISO_PIN PB3

void spi_init() {

  /* Set MOSI and SCK and CS output, all others input */
  DDRB |= (1 << MOSI_PIN) | (1 << SCK_PIN) | (1 << SS_PIN) | (1 << PB0);
     be8:	84 b1       	in	r24, 0x04	; 4
     bea:	87 68       	ori	r24, 0x87	; 135
     bec:	84 b9       	out	0x04, r24	; 4
  PORTB |= (1 << SS_PIN) | (1 << PB0); // Set Master mode
     bee:	85 b1       	in	r24, 0x05	; 5
     bf0:	81 68       	ori	r24, 0x81	; 129
     bf2:	85 b9       	out	0x05, r24	; 5

  /* Enable SPI interrupt, SPI, Master, set clock rate fck/16 , SPI mode 0 by
   * default*/
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     bf4:	81 e5       	ldi	r24, 0x51	; 81
     bf6:	8c bd       	out	0x2c, r24	; 44
     bf8:	08 95       	ret

00000bfa <spi_read>:
}

void spi_read(uint8_t *receive_data, uint8_t data_length) 
{
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	2a 97       	sbiw	r28, 0x0a	; 10
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
	uint8_t dummy_data[MAX_CAN_LENGTH];
	
	for (int i = 0; i < data_length; i++)
     c0e:	66 23       	and	r22, r22
     c10:	89 f0       	breq	.+34     	; 0xc34 <spi_read+0x3a>
     c12:	fe 01       	movw	r30, r28
     c14:	31 96       	adiw	r30, 0x01	; 1
     c16:	a8 2f       	mov	r26, r24
     c18:	b9 2f       	mov	r27, r25
     c1a:	cf 01       	movw	r24, r30
     c1c:	86 0f       	add	r24, r22
     c1e:	91 1d       	adc	r25, r1
	{
		SPDR = dummy_data[i];
     c20:	21 91       	ld	r18, Z+
     c22:	2e bd       	out	0x2e, r18	; 46
		int j = 0;
		while (!(SPSR & (1 << SPIF))){		
     c24:	0d b4       	in	r0, 0x2d	; 45
     c26:	07 fe       	sbrs	r0, 7
     c28:	fd cf       	rjmp	.-6      	; 0xc24 <spi_read+0x2a>
		}
		receive_data[i] = SPDR;
     c2a:	2e b5       	in	r18, 0x2e	; 46
     c2c:	2d 93       	st	X+, r18

void spi_read(uint8_t *receive_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	
	for (int i = 0; i < data_length; i++)
     c2e:	e8 17       	cp	r30, r24
     c30:	f9 07       	cpc	r31, r25
     c32:	b1 f7       	brne	.-20     	; 0xc20 <spi_read+0x26>
		while (!(SPSR & (1 << SPIF))){		
		}
		receive_data[i] = SPDR;
	}
	
}
     c34:	2a 96       	adiw	r28, 0x0a	; 10
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	08 95       	ret

00000c46 <spi_write>:

void spi_write(uint8_t *send_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	for (int i = 0; i < data_length; i++)
     c46:	26 2f       	mov	r18, r22
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	12 16       	cp	r1, r18
     c4c:	13 06       	cpc	r1, r19
     c4e:	74 f4       	brge	.+28     	; 0xc6c <spi_write+0x26>
     c50:	e8 2f       	mov	r30, r24
     c52:	f9 2f       	mov	r31, r25
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
	{
		SPDR = send_data[i];
     c58:	41 91       	ld	r20, Z+
     c5a:	4e bd       	out	0x2e, r20	; 46
		while (!(SPSR & (1 << SPIF)));
     c5c:	0d b4       	in	r0, 0x2d	; 45
     c5e:	07 fe       	sbrs	r0, 7
     c60:	fd cf       	rjmp	.-6      	; 0xc5c <spi_write+0x16>
		dummy_data[i] = SPDR;
     c62:	4e b5       	in	r20, 0x2e	; 46
}

void spi_write(uint8_t *send_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	for (int i = 0; i < data_length; i++)
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	82 17       	cp	r24, r18
     c68:	93 07       	cpc	r25, r19
     c6a:	b4 f3       	brlt	.-20     	; 0xc58 <spi_write+0x12>
     c6c:	08 95       	ret

00000c6e <TWI_Master_Initialise>:
     c6e:	8c e0       	ldi	r24, 0x0C	; 12
     c70:	80 93 b8 00 	sts	0x00B8, r24
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	80 93 bb 00 	sts	0x00BB, r24
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	80 93 bc 00 	sts	0x00BC, r24
     c80:	08 95       	ret

00000c82 <TWI_Start_Transceiver_With_Data>:
     c82:	ec eb       	ldi	r30, 0xBC	; 188
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	20 81       	ld	r18, Z
     c88:	20 fd       	sbrc	r18, 0
     c8a:	fd cf       	rjmp	.-6      	; 0xc86 <TWI_Start_Transceiver_With_Data+0x4>
     c8c:	60 93 b2 02 	sts	0x02B2, r22
     c90:	fc 01       	movw	r30, r24
     c92:	20 81       	ld	r18, Z
     c94:	20 93 b3 02 	sts	0x02B3, r18
     c98:	20 fd       	sbrc	r18, 0
     c9a:	0c c0       	rjmp	.+24     	; 0xcb4 <TWI_Start_Transceiver_With_Data+0x32>
     c9c:	62 30       	cpi	r22, 0x02	; 2
     c9e:	50 f0       	brcs	.+20     	; 0xcb4 <TWI_Start_Transceiver_With_Data+0x32>
     ca0:	dc 01       	movw	r26, r24
     ca2:	11 96       	adiw	r26, 0x01	; 1
     ca4:	e4 eb       	ldi	r30, 0xB4	; 180
     ca6:	f2 e0       	ldi	r31, 0x02	; 2
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	9d 91       	ld	r25, X+
     cac:	91 93       	st	Z+, r25
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	86 13       	cpse	r24, r22
     cb2:	fb cf       	rjmp	.-10     	; 0xcaa <TWI_Start_Transceiver_With_Data+0x28>
     cb4:	10 92 b1 02 	sts	0x02B1, r1
     cb8:	88 ef       	ldi	r24, 0xF8	; 248
     cba:	80 93 16 02 	sts	0x0216, r24
     cbe:	85 ea       	ldi	r24, 0xA5	; 165
     cc0:	80 93 bc 00 	sts	0x00BC, r24
     cc4:	08 95       	ret

00000cc6 <__vector_39>:
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	0b b6       	in	r0, 0x3b	; 59
     cd2:	0f 92       	push	r0
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	8f 93       	push	r24
     cda:	9f 93       	push	r25
     cdc:	af 93       	push	r26
     cde:	bf 93       	push	r27
     ce0:	ef 93       	push	r30
     ce2:	ff 93       	push	r31
     ce4:	80 91 b9 00 	lds	r24, 0x00B9
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	fc 01       	movw	r30, r24
     cec:	38 97       	sbiw	r30, 0x08	; 8
     cee:	e1 35       	cpi	r30, 0x51	; 81
     cf0:	f1 05       	cpc	r31, r1
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <__vector_39+0x30>
     cf4:	55 c0       	rjmp	.+170    	; 0xda0 <__vector_39+0xda>
     cf6:	ee 58       	subi	r30, 0x8E	; 142
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	a3 c2       	rjmp	.+1350   	; 0x1242 <__tablejump2__>
     cfc:	10 92 b0 02 	sts	0x02B0, r1
     d00:	e0 91 b0 02 	lds	r30, 0x02B0
     d04:	80 91 b2 02 	lds	r24, 0x02B2
     d08:	e8 17       	cp	r30, r24
     d0a:	70 f4       	brcc	.+28     	; 0xd28 <__vector_39+0x62>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	8e 0f       	add	r24, r30
     d10:	80 93 b0 02 	sts	0x02B0, r24
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	ed 54       	subi	r30, 0x4D	; 77
     d18:	fd 4f       	sbci	r31, 0xFD	; 253
     d1a:	80 81       	ld	r24, Z
     d1c:	80 93 bb 00 	sts	0x00BB, r24
     d20:	85 e8       	ldi	r24, 0x85	; 133
     d22:	80 93 bc 00 	sts	0x00BC, r24
     d26:	43 c0       	rjmp	.+134    	; 0xdae <__vector_39+0xe8>
     d28:	80 91 b1 02 	lds	r24, 0x02B1
     d2c:	81 60       	ori	r24, 0x01	; 1
     d2e:	80 93 b1 02 	sts	0x02B1, r24
     d32:	84 e9       	ldi	r24, 0x94	; 148
     d34:	80 93 bc 00 	sts	0x00BC, r24
     d38:	3a c0       	rjmp	.+116    	; 0xdae <__vector_39+0xe8>
     d3a:	e0 91 b0 02 	lds	r30, 0x02B0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	8e 0f       	add	r24, r30
     d42:	80 93 b0 02 	sts	0x02B0, r24
     d46:	80 91 bb 00 	lds	r24, 0x00BB
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	ed 54       	subi	r30, 0x4D	; 77
     d4e:	fd 4f       	sbci	r31, 0xFD	; 253
     d50:	80 83       	st	Z, r24
     d52:	20 91 b0 02 	lds	r18, 0x02B0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	80 91 b2 02 	lds	r24, 0x02B2
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	28 17       	cp	r18, r24
     d62:	39 07       	cpc	r19, r25
     d64:	24 f4       	brge	.+8      	; 0xd6e <__vector_39+0xa8>
     d66:	85 ec       	ldi	r24, 0xC5	; 197
     d68:	80 93 bc 00 	sts	0x00BC, r24
     d6c:	20 c0       	rjmp	.+64     	; 0xdae <__vector_39+0xe8>
     d6e:	85 e8       	ldi	r24, 0x85	; 133
     d70:	80 93 bc 00 	sts	0x00BC, r24
     d74:	1c c0       	rjmp	.+56     	; 0xdae <__vector_39+0xe8>
     d76:	80 91 bb 00 	lds	r24, 0x00BB
     d7a:	e0 91 b0 02 	lds	r30, 0x02B0
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	ed 54       	subi	r30, 0x4D	; 77
     d82:	fd 4f       	sbci	r31, 0xFD	; 253
     d84:	80 83       	st	Z, r24
     d86:	80 91 b1 02 	lds	r24, 0x02B1
     d8a:	81 60       	ori	r24, 0x01	; 1
     d8c:	80 93 b1 02 	sts	0x02B1, r24
     d90:	84 e9       	ldi	r24, 0x94	; 148
     d92:	80 93 bc 00 	sts	0x00BC, r24
     d96:	0b c0       	rjmp	.+22     	; 0xdae <__vector_39+0xe8>
     d98:	85 ea       	ldi	r24, 0xA5	; 165
     d9a:	80 93 bc 00 	sts	0x00BC, r24
     d9e:	07 c0       	rjmp	.+14     	; 0xdae <__vector_39+0xe8>
     da0:	80 91 b9 00 	lds	r24, 0x00B9
     da4:	80 93 16 02 	sts	0x0216, r24
     da8:	84 e0       	ldi	r24, 0x04	; 4
     daa:	80 93 bc 00 	sts	0x00BC, r24
     dae:	ff 91       	pop	r31
     db0:	ef 91       	pop	r30
     db2:	bf 91       	pop	r27
     db4:	af 91       	pop	r26
     db6:	9f 91       	pop	r25
     db8:	8f 91       	pop	r24
     dba:	3f 91       	pop	r19
     dbc:	2f 91       	pop	r18
     dbe:	0f 90       	pop	r0
     dc0:	0b be       	out	0x3b, r0	; 59
     dc2:	0f 90       	pop	r0
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	0f 90       	pop	r0
     dc8:	1f 90       	pop	r1
     dca:	18 95       	reti

00000dcc <USART_Transmit>:
     dcc:	e0 ec       	ldi	r30, 0xC0	; 192
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	90 81       	ld	r25, Z
     dd2:	95 ff       	sbrs	r25, 5
     dd4:	fd cf       	rjmp	.-6      	; 0xdd0 <USART_Transmit+0x4>
     dd6:	80 93 c6 00 	sts	0x00C6, r24
     dda:	08 95       	ret

00000ddc <USART_Receive>:
     ddc:	e0 ec       	ldi	r30, 0xC0	; 192
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	88 23       	and	r24, r24
     de4:	ec f3       	brlt	.-6      	; 0xde0 <USART_Receive+0x4>
     de6:	80 91 c6 00 	lds	r24, 0x00C6
     dea:	08 95       	ret

00000dec <USART_Init>:
     dec:	90 93 c5 00 	sts	0x00C5, r25
     df0:	80 93 c4 00 	sts	0x00C4, r24
     df4:	88 e1       	ldi	r24, 0x18	; 24
     df6:	80 93 c1 00 	sts	0x00C1, r24
     dfa:	8e e0       	ldi	r24, 0x0E	; 14
     dfc:	80 93 c2 00 	sts	0x00C2, r24
     e00:	6e ee       	ldi	r22, 0xEE	; 238
     e02:	76 e0       	ldi	r23, 0x06	; 6
     e04:	86 ee       	ldi	r24, 0xE6	; 230
     e06:	96 e0       	ldi	r25, 0x06	; 6
     e08:	22 c2       	rjmp	.+1092   	; 0x124e <fdevopen>
     e0a:	08 95       	ret

00000e0c <__subsf3>:
     e0c:	50 58       	subi	r21, 0x80	; 128

00000e0e <__addsf3>:
     e0e:	bb 27       	eor	r27, r27
     e10:	aa 27       	eor	r26, r26
     e12:	0e d0       	rcall	.+28     	; 0xe30 <__addsf3x>
     e14:	75 c1       	rjmp	.+746    	; 0x1100 <__fp_round>
     e16:	66 d1       	rcall	.+716    	; 0x10e4 <__fp_pscA>
     e18:	30 f0       	brcs	.+12     	; 0xe26 <__addsf3+0x18>
     e1a:	6b d1       	rcall	.+726    	; 0x10f2 <__fp_pscB>
     e1c:	20 f0       	brcs	.+8      	; 0xe26 <__addsf3+0x18>
     e1e:	31 f4       	brne	.+12     	; 0xe2c <__addsf3+0x1e>
     e20:	9f 3f       	cpi	r25, 0xFF	; 255
     e22:	11 f4       	brne	.+4      	; 0xe28 <__addsf3+0x1a>
     e24:	1e f4       	brtc	.+6      	; 0xe2c <__addsf3+0x1e>
     e26:	5b c1       	rjmp	.+694    	; 0x10de <__fp_nan>
     e28:	0e f4       	brtc	.+2      	; 0xe2c <__addsf3+0x1e>
     e2a:	e0 95       	com	r30
     e2c:	e7 fb       	bst	r30, 7
     e2e:	51 c1       	rjmp	.+674    	; 0x10d2 <__fp_inf>

00000e30 <__addsf3x>:
     e30:	e9 2f       	mov	r30, r25
     e32:	77 d1       	rcall	.+750    	; 0x1122 <__fp_split3>
     e34:	80 f3       	brcs	.-32     	; 0xe16 <__addsf3+0x8>
     e36:	ba 17       	cp	r27, r26
     e38:	62 07       	cpc	r22, r18
     e3a:	73 07       	cpc	r23, r19
     e3c:	84 07       	cpc	r24, r20
     e3e:	95 07       	cpc	r25, r21
     e40:	18 f0       	brcs	.+6      	; 0xe48 <__addsf3x+0x18>
     e42:	71 f4       	brne	.+28     	; 0xe60 <__addsf3x+0x30>
     e44:	9e f5       	brtc	.+102    	; 0xeac <__addsf3x+0x7c>
     e46:	8f c1       	rjmp	.+798    	; 0x1166 <__fp_zero>
     e48:	0e f4       	brtc	.+2      	; 0xe4c <__addsf3x+0x1c>
     e4a:	e0 95       	com	r30
     e4c:	0b 2e       	mov	r0, r27
     e4e:	ba 2f       	mov	r27, r26
     e50:	a0 2d       	mov	r26, r0
     e52:	0b 01       	movw	r0, r22
     e54:	b9 01       	movw	r22, r18
     e56:	90 01       	movw	r18, r0
     e58:	0c 01       	movw	r0, r24
     e5a:	ca 01       	movw	r24, r20
     e5c:	a0 01       	movw	r20, r0
     e5e:	11 24       	eor	r1, r1
     e60:	ff 27       	eor	r31, r31
     e62:	59 1b       	sub	r21, r25
     e64:	99 f0       	breq	.+38     	; 0xe8c <__addsf3x+0x5c>
     e66:	59 3f       	cpi	r21, 0xF9	; 249
     e68:	50 f4       	brcc	.+20     	; 0xe7e <__addsf3x+0x4e>
     e6a:	50 3e       	cpi	r21, 0xE0	; 224
     e6c:	68 f1       	brcs	.+90     	; 0xec8 <__addsf3x+0x98>
     e6e:	1a 16       	cp	r1, r26
     e70:	f0 40       	sbci	r31, 0x00	; 0
     e72:	a2 2f       	mov	r26, r18
     e74:	23 2f       	mov	r18, r19
     e76:	34 2f       	mov	r19, r20
     e78:	44 27       	eor	r20, r20
     e7a:	58 5f       	subi	r21, 0xF8	; 248
     e7c:	f3 cf       	rjmp	.-26     	; 0xe64 <__addsf3x+0x34>
     e7e:	46 95       	lsr	r20
     e80:	37 95       	ror	r19
     e82:	27 95       	ror	r18
     e84:	a7 95       	ror	r26
     e86:	f0 40       	sbci	r31, 0x00	; 0
     e88:	53 95       	inc	r21
     e8a:	c9 f7       	brne	.-14     	; 0xe7e <__addsf3x+0x4e>
     e8c:	7e f4       	brtc	.+30     	; 0xeac <__addsf3x+0x7c>
     e8e:	1f 16       	cp	r1, r31
     e90:	ba 0b       	sbc	r27, r26
     e92:	62 0b       	sbc	r22, r18
     e94:	73 0b       	sbc	r23, r19
     e96:	84 0b       	sbc	r24, r20
     e98:	ba f0       	brmi	.+46     	; 0xec8 <__addsf3x+0x98>
     e9a:	91 50       	subi	r25, 0x01	; 1
     e9c:	a1 f0       	breq	.+40     	; 0xec6 <__addsf3x+0x96>
     e9e:	ff 0f       	add	r31, r31
     ea0:	bb 1f       	adc	r27, r27
     ea2:	66 1f       	adc	r22, r22
     ea4:	77 1f       	adc	r23, r23
     ea6:	88 1f       	adc	r24, r24
     ea8:	c2 f7       	brpl	.-16     	; 0xe9a <__addsf3x+0x6a>
     eaa:	0e c0       	rjmp	.+28     	; 0xec8 <__addsf3x+0x98>
     eac:	ba 0f       	add	r27, r26
     eae:	62 1f       	adc	r22, r18
     eb0:	73 1f       	adc	r23, r19
     eb2:	84 1f       	adc	r24, r20
     eb4:	48 f4       	brcc	.+18     	; 0xec8 <__addsf3x+0x98>
     eb6:	87 95       	ror	r24
     eb8:	77 95       	ror	r23
     eba:	67 95       	ror	r22
     ebc:	b7 95       	ror	r27
     ebe:	f7 95       	ror	r31
     ec0:	9e 3f       	cpi	r25, 0xFE	; 254
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <__addsf3x+0x96>
     ec4:	b3 cf       	rjmp	.-154    	; 0xe2c <__addsf3+0x1e>
     ec6:	93 95       	inc	r25
     ec8:	88 0f       	add	r24, r24
     eca:	08 f0       	brcs	.+2      	; 0xece <__addsf3x+0x9e>
     ecc:	99 27       	eor	r25, r25
     ece:	ee 0f       	add	r30, r30
     ed0:	97 95       	ror	r25
     ed2:	87 95       	ror	r24
     ed4:	08 95       	ret

00000ed6 <__cmpsf2>:
     ed6:	d9 d0       	rcall	.+434    	; 0x108a <__fp_cmp>
     ed8:	08 f4       	brcc	.+2      	; 0xedc <__cmpsf2+0x6>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	08 95       	ret

00000ede <__divsf3>:
     ede:	0c d0       	rcall	.+24     	; 0xef8 <__divsf3x>
     ee0:	0f c1       	rjmp	.+542    	; 0x1100 <__fp_round>
     ee2:	07 d1       	rcall	.+526    	; 0x10f2 <__fp_pscB>
     ee4:	40 f0       	brcs	.+16     	; 0xef6 <__divsf3+0x18>
     ee6:	fe d0       	rcall	.+508    	; 0x10e4 <__fp_pscA>
     ee8:	30 f0       	brcs	.+12     	; 0xef6 <__divsf3+0x18>
     eea:	21 f4       	brne	.+8      	; 0xef4 <__divsf3+0x16>
     eec:	5f 3f       	cpi	r21, 0xFF	; 255
     eee:	19 f0       	breq	.+6      	; 0xef6 <__divsf3+0x18>
     ef0:	f0 c0       	rjmp	.+480    	; 0x10d2 <__fp_inf>
     ef2:	51 11       	cpse	r21, r1
     ef4:	39 c1       	rjmp	.+626    	; 0x1168 <__fp_szero>
     ef6:	f3 c0       	rjmp	.+486    	; 0x10de <__fp_nan>

00000ef8 <__divsf3x>:
     ef8:	14 d1       	rcall	.+552    	; 0x1122 <__fp_split3>
     efa:	98 f3       	brcs	.-26     	; 0xee2 <__divsf3+0x4>

00000efc <__divsf3_pse>:
     efc:	99 23       	and	r25, r25
     efe:	c9 f3       	breq	.-14     	; 0xef2 <__divsf3+0x14>
     f00:	55 23       	and	r21, r21
     f02:	b1 f3       	breq	.-20     	; 0xef0 <__divsf3+0x12>
     f04:	95 1b       	sub	r25, r21
     f06:	55 0b       	sbc	r21, r21
     f08:	bb 27       	eor	r27, r27
     f0a:	aa 27       	eor	r26, r26
     f0c:	62 17       	cp	r22, r18
     f0e:	73 07       	cpc	r23, r19
     f10:	84 07       	cpc	r24, r20
     f12:	38 f0       	brcs	.+14     	; 0xf22 <__divsf3_pse+0x26>
     f14:	9f 5f       	subi	r25, 0xFF	; 255
     f16:	5f 4f       	sbci	r21, 0xFF	; 255
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	44 1f       	adc	r20, r20
     f1e:	aa 1f       	adc	r26, r26
     f20:	a9 f3       	breq	.-22     	; 0xf0c <__divsf3_pse+0x10>
     f22:	33 d0       	rcall	.+102    	; 0xf8a <__divsf3_pse+0x8e>
     f24:	0e 2e       	mov	r0, r30
     f26:	3a f0       	brmi	.+14     	; 0xf36 <__divsf3_pse+0x3a>
     f28:	e0 e8       	ldi	r30, 0x80	; 128
     f2a:	30 d0       	rcall	.+96     	; 0xf8c <__divsf3_pse+0x90>
     f2c:	91 50       	subi	r25, 0x01	; 1
     f2e:	50 40       	sbci	r21, 0x00	; 0
     f30:	e6 95       	lsr	r30
     f32:	00 1c       	adc	r0, r0
     f34:	ca f7       	brpl	.-14     	; 0xf28 <__divsf3_pse+0x2c>
     f36:	29 d0       	rcall	.+82     	; 0xf8a <__divsf3_pse+0x8e>
     f38:	fe 2f       	mov	r31, r30
     f3a:	27 d0       	rcall	.+78     	; 0xf8a <__divsf3_pse+0x8e>
     f3c:	66 0f       	add	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	bb 1f       	adc	r27, r27
     f44:	26 17       	cp	r18, r22
     f46:	37 07       	cpc	r19, r23
     f48:	48 07       	cpc	r20, r24
     f4a:	ab 07       	cpc	r26, r27
     f4c:	b0 e8       	ldi	r27, 0x80	; 128
     f4e:	09 f0       	breq	.+2      	; 0xf52 <__divsf3_pse+0x56>
     f50:	bb 0b       	sbc	r27, r27
     f52:	80 2d       	mov	r24, r0
     f54:	bf 01       	movw	r22, r30
     f56:	ff 27       	eor	r31, r31
     f58:	93 58       	subi	r25, 0x83	; 131
     f5a:	5f 4f       	sbci	r21, 0xFF	; 255
     f5c:	2a f0       	brmi	.+10     	; 0xf68 <__divsf3_pse+0x6c>
     f5e:	9e 3f       	cpi	r25, 0xFE	; 254
     f60:	51 05       	cpc	r21, r1
     f62:	68 f0       	brcs	.+26     	; 0xf7e <__divsf3_pse+0x82>
     f64:	b6 c0       	rjmp	.+364    	; 0x10d2 <__fp_inf>
     f66:	00 c1       	rjmp	.+512    	; 0x1168 <__fp_szero>
     f68:	5f 3f       	cpi	r21, 0xFF	; 255
     f6a:	ec f3       	brlt	.-6      	; 0xf66 <__divsf3_pse+0x6a>
     f6c:	98 3e       	cpi	r25, 0xE8	; 232
     f6e:	dc f3       	brlt	.-10     	; 0xf66 <__divsf3_pse+0x6a>
     f70:	86 95       	lsr	r24
     f72:	77 95       	ror	r23
     f74:	67 95       	ror	r22
     f76:	b7 95       	ror	r27
     f78:	f7 95       	ror	r31
     f7a:	9f 5f       	subi	r25, 0xFF	; 255
     f7c:	c9 f7       	brne	.-14     	; 0xf70 <__divsf3_pse+0x74>
     f7e:	88 0f       	add	r24, r24
     f80:	91 1d       	adc	r25, r1
     f82:	96 95       	lsr	r25
     f84:	87 95       	ror	r24
     f86:	97 f9       	bld	r25, 7
     f88:	08 95       	ret
     f8a:	e1 e0       	ldi	r30, 0x01	; 1
     f8c:	66 0f       	add	r22, r22
     f8e:	77 1f       	adc	r23, r23
     f90:	88 1f       	adc	r24, r24
     f92:	bb 1f       	adc	r27, r27
     f94:	62 17       	cp	r22, r18
     f96:	73 07       	cpc	r23, r19
     f98:	84 07       	cpc	r24, r20
     f9a:	ba 07       	cpc	r27, r26
     f9c:	20 f0       	brcs	.+8      	; 0xfa6 <__divsf3_pse+0xaa>
     f9e:	62 1b       	sub	r22, r18
     fa0:	73 0b       	sbc	r23, r19
     fa2:	84 0b       	sbc	r24, r20
     fa4:	ba 0b       	sbc	r27, r26
     fa6:	ee 1f       	adc	r30, r30
     fa8:	88 f7       	brcc	.-30     	; 0xf8c <__divsf3_pse+0x90>
     faa:	e0 95       	com	r30
     fac:	08 95       	ret

00000fae <__fixsfsi>:
     fae:	04 d0       	rcall	.+8      	; 0xfb8 <__fixunssfsi>
     fb0:	68 94       	set
     fb2:	b1 11       	cpse	r27, r1
     fb4:	d9 c0       	rjmp	.+434    	; 0x1168 <__fp_szero>
     fb6:	08 95       	ret

00000fb8 <__fixunssfsi>:
     fb8:	bc d0       	rcall	.+376    	; 0x1132 <__fp_splitA>
     fba:	88 f0       	brcs	.+34     	; 0xfde <__fixunssfsi+0x26>
     fbc:	9f 57       	subi	r25, 0x7F	; 127
     fbe:	90 f0       	brcs	.+36     	; 0xfe4 <__fixunssfsi+0x2c>
     fc0:	b9 2f       	mov	r27, r25
     fc2:	99 27       	eor	r25, r25
     fc4:	b7 51       	subi	r27, 0x17	; 23
     fc6:	a0 f0       	brcs	.+40     	; 0xff0 <__fixunssfsi+0x38>
     fc8:	d1 f0       	breq	.+52     	; 0xffe <__fixunssfsi+0x46>
     fca:	66 0f       	add	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	88 1f       	adc	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	1a f0       	brmi	.+6      	; 0xfda <__fixunssfsi+0x22>
     fd4:	ba 95       	dec	r27
     fd6:	c9 f7       	brne	.-14     	; 0xfca <__fixunssfsi+0x12>
     fd8:	12 c0       	rjmp	.+36     	; 0xffe <__fixunssfsi+0x46>
     fda:	b1 30       	cpi	r27, 0x01	; 1
     fdc:	81 f0       	breq	.+32     	; 0xffe <__fixunssfsi+0x46>
     fde:	c3 d0       	rcall	.+390    	; 0x1166 <__fp_zero>
     fe0:	b1 e0       	ldi	r27, 0x01	; 1
     fe2:	08 95       	ret
     fe4:	c0 c0       	rjmp	.+384    	; 0x1166 <__fp_zero>
     fe6:	67 2f       	mov	r22, r23
     fe8:	78 2f       	mov	r23, r24
     fea:	88 27       	eor	r24, r24
     fec:	b8 5f       	subi	r27, 0xF8	; 248
     fee:	39 f0       	breq	.+14     	; 0xffe <__fixunssfsi+0x46>
     ff0:	b9 3f       	cpi	r27, 0xF9	; 249
     ff2:	cc f3       	brlt	.-14     	; 0xfe6 <__fixunssfsi+0x2e>
     ff4:	86 95       	lsr	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b3 95       	inc	r27
     ffc:	d9 f7       	brne	.-10     	; 0xff4 <__fixunssfsi+0x3c>
     ffe:	3e f4       	brtc	.+14     	; 0x100e <__fixunssfsi+0x56>
    1000:	90 95       	com	r25
    1002:	80 95       	com	r24
    1004:	70 95       	com	r23
    1006:	61 95       	neg	r22
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8f 4f       	sbci	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	08 95       	ret

00001010 <__floatunsisf>:
    1010:	e8 94       	clt
    1012:	09 c0       	rjmp	.+18     	; 0x1026 <__floatsisf+0x12>

00001014 <__floatsisf>:
    1014:	97 fb       	bst	r25, 7
    1016:	3e f4       	brtc	.+14     	; 0x1026 <__floatsisf+0x12>
    1018:	90 95       	com	r25
    101a:	80 95       	com	r24
    101c:	70 95       	com	r23
    101e:	61 95       	neg	r22
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	8f 4f       	sbci	r24, 0xFF	; 255
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	99 23       	and	r25, r25
    1028:	a9 f0       	breq	.+42     	; 0x1054 <__floatsisf+0x40>
    102a:	f9 2f       	mov	r31, r25
    102c:	96 e9       	ldi	r25, 0x96	; 150
    102e:	bb 27       	eor	r27, r27
    1030:	93 95       	inc	r25
    1032:	f6 95       	lsr	r31
    1034:	87 95       	ror	r24
    1036:	77 95       	ror	r23
    1038:	67 95       	ror	r22
    103a:	b7 95       	ror	r27
    103c:	f1 11       	cpse	r31, r1
    103e:	f8 cf       	rjmp	.-16     	; 0x1030 <__floatsisf+0x1c>
    1040:	fa f4       	brpl	.+62     	; 0x1080 <__floatsisf+0x6c>
    1042:	bb 0f       	add	r27, r27
    1044:	11 f4       	brne	.+4      	; 0x104a <__floatsisf+0x36>
    1046:	60 ff       	sbrs	r22, 0
    1048:	1b c0       	rjmp	.+54     	; 0x1080 <__floatsisf+0x6c>
    104a:	6f 5f       	subi	r22, 0xFF	; 255
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	8f 4f       	sbci	r24, 0xFF	; 255
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	16 c0       	rjmp	.+44     	; 0x1080 <__floatsisf+0x6c>
    1054:	88 23       	and	r24, r24
    1056:	11 f0       	breq	.+4      	; 0x105c <__floatsisf+0x48>
    1058:	96 e9       	ldi	r25, 0x96	; 150
    105a:	11 c0       	rjmp	.+34     	; 0x107e <__floatsisf+0x6a>
    105c:	77 23       	and	r23, r23
    105e:	21 f0       	breq	.+8      	; 0x1068 <__floatsisf+0x54>
    1060:	9e e8       	ldi	r25, 0x8E	; 142
    1062:	87 2f       	mov	r24, r23
    1064:	76 2f       	mov	r23, r22
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <__floatsisf+0x5e>
    1068:	66 23       	and	r22, r22
    106a:	71 f0       	breq	.+28     	; 0x1088 <__floatsisf+0x74>
    106c:	96 e8       	ldi	r25, 0x86	; 134
    106e:	86 2f       	mov	r24, r22
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	2a f0       	brmi	.+10     	; 0x1080 <__floatsisf+0x6c>
    1076:	9a 95       	dec	r25
    1078:	66 0f       	add	r22, r22
    107a:	77 1f       	adc	r23, r23
    107c:	88 1f       	adc	r24, r24
    107e:	da f7       	brpl	.-10     	; 0x1076 <__floatsisf+0x62>
    1080:	88 0f       	add	r24, r24
    1082:	96 95       	lsr	r25
    1084:	87 95       	ror	r24
    1086:	97 f9       	bld	r25, 7
    1088:	08 95       	ret

0000108a <__fp_cmp>:
    108a:	99 0f       	add	r25, r25
    108c:	00 08       	sbc	r0, r0
    108e:	55 0f       	add	r21, r21
    1090:	aa 0b       	sbc	r26, r26
    1092:	e0 e8       	ldi	r30, 0x80	; 128
    1094:	fe ef       	ldi	r31, 0xFE	; 254
    1096:	16 16       	cp	r1, r22
    1098:	17 06       	cpc	r1, r23
    109a:	e8 07       	cpc	r30, r24
    109c:	f9 07       	cpc	r31, r25
    109e:	c0 f0       	brcs	.+48     	; 0x10d0 <__fp_cmp+0x46>
    10a0:	12 16       	cp	r1, r18
    10a2:	13 06       	cpc	r1, r19
    10a4:	e4 07       	cpc	r30, r20
    10a6:	f5 07       	cpc	r31, r21
    10a8:	98 f0       	brcs	.+38     	; 0x10d0 <__fp_cmp+0x46>
    10aa:	62 1b       	sub	r22, r18
    10ac:	73 0b       	sbc	r23, r19
    10ae:	84 0b       	sbc	r24, r20
    10b0:	95 0b       	sbc	r25, r21
    10b2:	39 f4       	brne	.+14     	; 0x10c2 <__fp_cmp+0x38>
    10b4:	0a 26       	eor	r0, r26
    10b6:	61 f0       	breq	.+24     	; 0x10d0 <__fp_cmp+0x46>
    10b8:	23 2b       	or	r18, r19
    10ba:	24 2b       	or	r18, r20
    10bc:	25 2b       	or	r18, r21
    10be:	21 f4       	brne	.+8      	; 0x10c8 <__fp_cmp+0x3e>
    10c0:	08 95       	ret
    10c2:	0a 26       	eor	r0, r26
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <__fp_cmp+0x3e>
    10c6:	a1 40       	sbci	r26, 0x01	; 1
    10c8:	a6 95       	lsr	r26
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
    10cc:	81 1d       	adc	r24, r1
    10ce:	81 1d       	adc	r24, r1
    10d0:	08 95       	ret

000010d2 <__fp_inf>:
    10d2:	97 f9       	bld	r25, 7
    10d4:	9f 67       	ori	r25, 0x7F	; 127
    10d6:	80 e8       	ldi	r24, 0x80	; 128
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	08 95       	ret

000010de <__fp_nan>:
    10de:	9f ef       	ldi	r25, 0xFF	; 255
    10e0:	80 ec       	ldi	r24, 0xC0	; 192
    10e2:	08 95       	ret

000010e4 <__fp_pscA>:
    10e4:	00 24       	eor	r0, r0
    10e6:	0a 94       	dec	r0
    10e8:	16 16       	cp	r1, r22
    10ea:	17 06       	cpc	r1, r23
    10ec:	18 06       	cpc	r1, r24
    10ee:	09 06       	cpc	r0, r25
    10f0:	08 95       	ret

000010f2 <__fp_pscB>:
    10f2:	00 24       	eor	r0, r0
    10f4:	0a 94       	dec	r0
    10f6:	12 16       	cp	r1, r18
    10f8:	13 06       	cpc	r1, r19
    10fa:	14 06       	cpc	r1, r20
    10fc:	05 06       	cpc	r0, r21
    10fe:	08 95       	ret

00001100 <__fp_round>:
    1100:	09 2e       	mov	r0, r25
    1102:	03 94       	inc	r0
    1104:	00 0c       	add	r0, r0
    1106:	11 f4       	brne	.+4      	; 0x110c <__fp_round+0xc>
    1108:	88 23       	and	r24, r24
    110a:	52 f0       	brmi	.+20     	; 0x1120 <__fp_round+0x20>
    110c:	bb 0f       	add	r27, r27
    110e:	40 f4       	brcc	.+16     	; 0x1120 <__fp_round+0x20>
    1110:	bf 2b       	or	r27, r31
    1112:	11 f4       	brne	.+4      	; 0x1118 <__fp_round+0x18>
    1114:	60 ff       	sbrs	r22, 0
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <__fp_round+0x20>
    1118:	6f 5f       	subi	r22, 0xFF	; 255
    111a:	7f 4f       	sbci	r23, 0xFF	; 255
    111c:	8f 4f       	sbci	r24, 0xFF	; 255
    111e:	9f 4f       	sbci	r25, 0xFF	; 255
    1120:	08 95       	ret

00001122 <__fp_split3>:
    1122:	57 fd       	sbrc	r21, 7
    1124:	90 58       	subi	r25, 0x80	; 128
    1126:	44 0f       	add	r20, r20
    1128:	55 1f       	adc	r21, r21
    112a:	59 f0       	breq	.+22     	; 0x1142 <__fp_splitA+0x10>
    112c:	5f 3f       	cpi	r21, 0xFF	; 255
    112e:	71 f0       	breq	.+28     	; 0x114c <__fp_splitA+0x1a>
    1130:	47 95       	ror	r20

00001132 <__fp_splitA>:
    1132:	88 0f       	add	r24, r24
    1134:	97 fb       	bst	r25, 7
    1136:	99 1f       	adc	r25, r25
    1138:	61 f0       	breq	.+24     	; 0x1152 <__fp_splitA+0x20>
    113a:	9f 3f       	cpi	r25, 0xFF	; 255
    113c:	79 f0       	breq	.+30     	; 0x115c <__fp_splitA+0x2a>
    113e:	87 95       	ror	r24
    1140:	08 95       	ret
    1142:	12 16       	cp	r1, r18
    1144:	13 06       	cpc	r1, r19
    1146:	14 06       	cpc	r1, r20
    1148:	55 1f       	adc	r21, r21
    114a:	f2 cf       	rjmp	.-28     	; 0x1130 <__fp_split3+0xe>
    114c:	46 95       	lsr	r20
    114e:	f1 df       	rcall	.-30     	; 0x1132 <__fp_splitA>
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <__fp_splitA+0x30>
    1152:	16 16       	cp	r1, r22
    1154:	17 06       	cpc	r1, r23
    1156:	18 06       	cpc	r1, r24
    1158:	99 1f       	adc	r25, r25
    115a:	f1 cf       	rjmp	.-30     	; 0x113e <__fp_splitA+0xc>
    115c:	86 95       	lsr	r24
    115e:	71 05       	cpc	r23, r1
    1160:	61 05       	cpc	r22, r1
    1162:	08 94       	sec
    1164:	08 95       	ret

00001166 <__fp_zero>:
    1166:	e8 94       	clt

00001168 <__fp_szero>:
    1168:	bb 27       	eor	r27, r27
    116a:	66 27       	eor	r22, r22
    116c:	77 27       	eor	r23, r23
    116e:	cb 01       	movw	r24, r22
    1170:	97 f9       	bld	r25, 7
    1172:	08 95       	ret

00001174 <__gesf2>:
    1174:	8a df       	rcall	.-236    	; 0x108a <__fp_cmp>
    1176:	08 f4       	brcc	.+2      	; 0x117a <__gesf2+0x6>
    1178:	8f ef       	ldi	r24, 0xFF	; 255
    117a:	08 95       	ret

0000117c <__mulsf3>:
    117c:	0b d0       	rcall	.+22     	; 0x1194 <__mulsf3x>
    117e:	c0 cf       	rjmp	.-128    	; 0x1100 <__fp_round>
    1180:	b1 df       	rcall	.-158    	; 0x10e4 <__fp_pscA>
    1182:	28 f0       	brcs	.+10     	; 0x118e <__mulsf3+0x12>
    1184:	b6 df       	rcall	.-148    	; 0x10f2 <__fp_pscB>
    1186:	18 f0       	brcs	.+6      	; 0x118e <__mulsf3+0x12>
    1188:	95 23       	and	r25, r21
    118a:	09 f0       	breq	.+2      	; 0x118e <__mulsf3+0x12>
    118c:	a2 cf       	rjmp	.-188    	; 0x10d2 <__fp_inf>
    118e:	a7 cf       	rjmp	.-178    	; 0x10de <__fp_nan>
    1190:	11 24       	eor	r1, r1
    1192:	ea cf       	rjmp	.-44     	; 0x1168 <__fp_szero>

00001194 <__mulsf3x>:
    1194:	c6 df       	rcall	.-116    	; 0x1122 <__fp_split3>
    1196:	a0 f3       	brcs	.-24     	; 0x1180 <__mulsf3+0x4>

00001198 <__mulsf3_pse>:
    1198:	95 9f       	mul	r25, r21
    119a:	d1 f3       	breq	.-12     	; 0x1190 <__mulsf3+0x14>
    119c:	95 0f       	add	r25, r21
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	55 1f       	adc	r21, r21
    11a2:	62 9f       	mul	r22, r18
    11a4:	f0 01       	movw	r30, r0
    11a6:	72 9f       	mul	r23, r18
    11a8:	bb 27       	eor	r27, r27
    11aa:	f0 0d       	add	r31, r0
    11ac:	b1 1d       	adc	r27, r1
    11ae:	63 9f       	mul	r22, r19
    11b0:	aa 27       	eor	r26, r26
    11b2:	f0 0d       	add	r31, r0
    11b4:	b1 1d       	adc	r27, r1
    11b6:	aa 1f       	adc	r26, r26
    11b8:	64 9f       	mul	r22, r20
    11ba:	66 27       	eor	r22, r22
    11bc:	b0 0d       	add	r27, r0
    11be:	a1 1d       	adc	r26, r1
    11c0:	66 1f       	adc	r22, r22
    11c2:	82 9f       	mul	r24, r18
    11c4:	22 27       	eor	r18, r18
    11c6:	b0 0d       	add	r27, r0
    11c8:	a1 1d       	adc	r26, r1
    11ca:	62 1f       	adc	r22, r18
    11cc:	73 9f       	mul	r23, r19
    11ce:	b0 0d       	add	r27, r0
    11d0:	a1 1d       	adc	r26, r1
    11d2:	62 1f       	adc	r22, r18
    11d4:	83 9f       	mul	r24, r19
    11d6:	a0 0d       	add	r26, r0
    11d8:	61 1d       	adc	r22, r1
    11da:	22 1f       	adc	r18, r18
    11dc:	74 9f       	mul	r23, r20
    11de:	33 27       	eor	r19, r19
    11e0:	a0 0d       	add	r26, r0
    11e2:	61 1d       	adc	r22, r1
    11e4:	23 1f       	adc	r18, r19
    11e6:	84 9f       	mul	r24, r20
    11e8:	60 0d       	add	r22, r0
    11ea:	21 1d       	adc	r18, r1
    11ec:	82 2f       	mov	r24, r18
    11ee:	76 2f       	mov	r23, r22
    11f0:	6a 2f       	mov	r22, r26
    11f2:	11 24       	eor	r1, r1
    11f4:	9f 57       	subi	r25, 0x7F	; 127
    11f6:	50 40       	sbci	r21, 0x00	; 0
    11f8:	8a f0       	brmi	.+34     	; 0x121c <__mulsf3_pse+0x84>
    11fa:	e1 f0       	breq	.+56     	; 0x1234 <__mulsf3_pse+0x9c>
    11fc:	88 23       	and	r24, r24
    11fe:	4a f0       	brmi	.+18     	; 0x1212 <__mulsf3_pse+0x7a>
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	bb 1f       	adc	r27, r27
    1206:	66 1f       	adc	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	88 1f       	adc	r24, r24
    120c:	91 50       	subi	r25, 0x01	; 1
    120e:	50 40       	sbci	r21, 0x00	; 0
    1210:	a9 f7       	brne	.-22     	; 0x11fc <__mulsf3_pse+0x64>
    1212:	9e 3f       	cpi	r25, 0xFE	; 254
    1214:	51 05       	cpc	r21, r1
    1216:	70 f0       	brcs	.+28     	; 0x1234 <__mulsf3_pse+0x9c>
    1218:	5c cf       	rjmp	.-328    	; 0x10d2 <__fp_inf>
    121a:	a6 cf       	rjmp	.-180    	; 0x1168 <__fp_szero>
    121c:	5f 3f       	cpi	r21, 0xFF	; 255
    121e:	ec f3       	brlt	.-6      	; 0x121a <__mulsf3_pse+0x82>
    1220:	98 3e       	cpi	r25, 0xE8	; 232
    1222:	dc f3       	brlt	.-10     	; 0x121a <__mulsf3_pse+0x82>
    1224:	86 95       	lsr	r24
    1226:	77 95       	ror	r23
    1228:	67 95       	ror	r22
    122a:	b7 95       	ror	r27
    122c:	f7 95       	ror	r31
    122e:	e7 95       	ror	r30
    1230:	9f 5f       	subi	r25, 0xFF	; 255
    1232:	c1 f7       	brne	.-16     	; 0x1224 <__mulsf3_pse+0x8c>
    1234:	fe 2b       	or	r31, r30
    1236:	88 0f       	add	r24, r24
    1238:	91 1d       	adc	r25, r1
    123a:	96 95       	lsr	r25
    123c:	87 95       	ror	r24
    123e:	97 f9       	bld	r25, 7
    1240:	08 95       	ret

00001242 <__tablejump2__>:
    1242:	ee 0f       	add	r30, r30
    1244:	ff 1f       	adc	r31, r31

00001246 <__tablejump__>:
    1246:	05 90       	lpm	r0, Z+
    1248:	f4 91       	lpm	r31, Z
    124a:	e0 2d       	mov	r30, r0
    124c:	19 94       	eijmp

0000124e <fdevopen>:
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	ec 01       	movw	r28, r24
    1258:	8b 01       	movw	r16, r22
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	31 f4       	brne	.+12     	; 0x126a <fdevopen+0x1c>
    125e:	61 15       	cp	r22, r1
    1260:	71 05       	cpc	r23, r1
    1262:	19 f4       	brne	.+6      	; 0x126a <fdevopen+0x1c>
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	37 c0       	rjmp	.+110    	; 0x12d8 <fdevopen+0x8a>
    126a:	6e e0       	ldi	r22, 0x0E	; 14
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	63 d2       	rcall	.+1222   	; 0x173a <calloc>
    1274:	fc 01       	movw	r30, r24
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	a9 f3       	breq	.-22     	; 0x1264 <fdevopen+0x16>
    127a:	80 e8       	ldi	r24, 0x80	; 128
    127c:	83 83       	std	Z+3, r24	; 0x03
    127e:	01 15       	cp	r16, r1
    1280:	11 05       	cpc	r17, r1
    1282:	71 f0       	breq	.+28     	; 0x12a0 <fdevopen+0x52>
    1284:	13 87       	std	Z+11, r17	; 0x0b
    1286:	02 87       	std	Z+10, r16	; 0x0a
    1288:	81 e8       	ldi	r24, 0x81	; 129
    128a:	83 83       	std	Z+3, r24	; 0x03
    128c:	80 91 b7 02 	lds	r24, 0x02B7
    1290:	90 91 b8 02 	lds	r25, 0x02B8
    1294:	89 2b       	or	r24, r25
    1296:	21 f4       	brne	.+8      	; 0x12a0 <fdevopen+0x52>
    1298:	f0 93 b8 02 	sts	0x02B8, r31
    129c:	e0 93 b7 02 	sts	0x02B7, r30
    12a0:	20 97       	sbiw	r28, 0x00	; 0
    12a2:	c9 f0       	breq	.+50     	; 0x12d6 <fdevopen+0x88>
    12a4:	d1 87       	std	Z+9, r29	; 0x09
    12a6:	c0 87       	std	Z+8, r28	; 0x08
    12a8:	83 81       	ldd	r24, Z+3	; 0x03
    12aa:	82 60       	ori	r24, 0x02	; 2
    12ac:	83 83       	std	Z+3, r24	; 0x03
    12ae:	80 91 b9 02 	lds	r24, 0x02B9
    12b2:	90 91 ba 02 	lds	r25, 0x02BA
    12b6:	89 2b       	or	r24, r25
    12b8:	71 f4       	brne	.+28     	; 0x12d6 <fdevopen+0x88>
    12ba:	f0 93 ba 02 	sts	0x02BA, r31
    12be:	e0 93 b9 02 	sts	0x02B9, r30
    12c2:	80 91 bb 02 	lds	r24, 0x02BB
    12c6:	90 91 bc 02 	lds	r25, 0x02BC
    12ca:	89 2b       	or	r24, r25
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <fdevopen+0x88>
    12ce:	f0 93 bc 02 	sts	0x02BC, r31
    12d2:	e0 93 bb 02 	sts	0x02BB, r30
    12d6:	cf 01       	movw	r24, r30
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	08 95       	ret

000012e2 <printf>:
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	fe 01       	movw	r30, r28
    12ec:	36 96       	adiw	r30, 0x06	; 6
    12ee:	61 91       	ld	r22, Z+
    12f0:	71 91       	ld	r23, Z+
    12f2:	af 01       	movw	r20, r30
    12f4:	80 91 b9 02 	lds	r24, 0x02B9
    12f8:	90 91 ba 02 	lds	r25, 0x02BA
    12fc:	30 d0       	rcall	.+96     	; 0x135e <vfprintf>
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	08 95       	ret

00001304 <puts>:
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	e0 91 b9 02 	lds	r30, 0x02B9
    1310:	f0 91 ba 02 	lds	r31, 0x02BA
    1314:	23 81       	ldd	r18, Z+3	; 0x03
    1316:	21 ff       	sbrs	r18, 1
    1318:	1b c0       	rjmp	.+54     	; 0x1350 <puts+0x4c>
    131a:	ec 01       	movw	r28, r24
    131c:	00 e0       	ldi	r16, 0x00	; 0
    131e:	10 e0       	ldi	r17, 0x00	; 0
    1320:	89 91       	ld	r24, Y+
    1322:	60 91 b9 02 	lds	r22, 0x02B9
    1326:	70 91 ba 02 	lds	r23, 0x02BA
    132a:	db 01       	movw	r26, r22
    132c:	18 96       	adiw	r26, 0x08	; 8
    132e:	ed 91       	ld	r30, X+
    1330:	fc 91       	ld	r31, X
    1332:	19 97       	sbiw	r26, 0x09	; 9
    1334:	88 23       	and	r24, r24
    1336:	31 f0       	breq	.+12     	; 0x1344 <puts+0x40>
    1338:	19 95       	eicall
    133a:	89 2b       	or	r24, r25
    133c:	89 f3       	breq	.-30     	; 0x1320 <puts+0x1c>
    133e:	0f ef       	ldi	r16, 0xFF	; 255
    1340:	1f ef       	ldi	r17, 0xFF	; 255
    1342:	ee cf       	rjmp	.-36     	; 0x1320 <puts+0x1c>
    1344:	8a e0       	ldi	r24, 0x0A	; 10
    1346:	19 95       	eicall
    1348:	89 2b       	or	r24, r25
    134a:	11 f4       	brne	.+4      	; 0x1350 <puts+0x4c>
    134c:	c8 01       	movw	r24, r16
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <puts+0x50>
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	9f ef       	ldi	r25, 0xFF	; 255
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	08 95       	ret

0000135e <vfprintf>:
    135e:	2f 92       	push	r2
    1360:	3f 92       	push	r3
    1362:	4f 92       	push	r4
    1364:	5f 92       	push	r5
    1366:	6f 92       	push	r6
    1368:	7f 92       	push	r7
    136a:	8f 92       	push	r8
    136c:	9f 92       	push	r9
    136e:	af 92       	push	r10
    1370:	bf 92       	push	r11
    1372:	cf 92       	push	r12
    1374:	df 92       	push	r13
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	2c 97       	sbiw	r28, 0x0c	; 12
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	7c 01       	movw	r14, r24
    1394:	6b 01       	movw	r12, r22
    1396:	8a 01       	movw	r16, r20
    1398:	fc 01       	movw	r30, r24
    139a:	17 82       	std	Z+7, r1	; 0x07
    139c:	16 82       	std	Z+6, r1	; 0x06
    139e:	83 81       	ldd	r24, Z+3	; 0x03
    13a0:	81 ff       	sbrs	r24, 1
    13a2:	b0 c1       	rjmp	.+864    	; 0x1704 <vfprintf+0x3a6>
    13a4:	ce 01       	movw	r24, r28
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	4c 01       	movw	r8, r24
    13aa:	f7 01       	movw	r30, r14
    13ac:	93 81       	ldd	r25, Z+3	; 0x03
    13ae:	f6 01       	movw	r30, r12
    13b0:	93 fd       	sbrc	r25, 3
    13b2:	85 91       	lpm	r24, Z+
    13b4:	93 ff       	sbrs	r25, 3
    13b6:	81 91       	ld	r24, Z+
    13b8:	6f 01       	movw	r12, r30
    13ba:	88 23       	and	r24, r24
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <vfprintf+0x62>
    13be:	9e c1       	rjmp	.+828    	; 0x16fc <vfprintf+0x39e>
    13c0:	85 32       	cpi	r24, 0x25	; 37
    13c2:	39 f4       	brne	.+14     	; 0x13d2 <vfprintf+0x74>
    13c4:	93 fd       	sbrc	r25, 3
    13c6:	85 91       	lpm	r24, Z+
    13c8:	93 ff       	sbrs	r25, 3
    13ca:	81 91       	ld	r24, Z+
    13cc:	6f 01       	movw	r12, r30
    13ce:	85 32       	cpi	r24, 0x25	; 37
    13d0:	21 f4       	brne	.+8      	; 0x13da <vfprintf+0x7c>
    13d2:	b7 01       	movw	r22, r14
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0f d3       	rcall	.+1566   	; 0x19f6 <fputc>
    13d8:	e8 cf       	rjmp	.-48     	; 0x13aa <vfprintf+0x4c>
    13da:	51 2c       	mov	r5, r1
    13dc:	31 2c       	mov	r3, r1
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	20 32       	cpi	r18, 0x20	; 32
    13e2:	a0 f4       	brcc	.+40     	; 0x140c <vfprintf+0xae>
    13e4:	8b 32       	cpi	r24, 0x2B	; 43
    13e6:	69 f0       	breq	.+26     	; 0x1402 <vfprintf+0xa4>
    13e8:	30 f4       	brcc	.+12     	; 0x13f6 <vfprintf+0x98>
    13ea:	80 32       	cpi	r24, 0x20	; 32
    13ec:	59 f0       	breq	.+22     	; 0x1404 <vfprintf+0xa6>
    13ee:	83 32       	cpi	r24, 0x23	; 35
    13f0:	69 f4       	brne	.+26     	; 0x140c <vfprintf+0xae>
    13f2:	20 61       	ori	r18, 0x10	; 16
    13f4:	2c c0       	rjmp	.+88     	; 0x144e <vfprintf+0xf0>
    13f6:	8d 32       	cpi	r24, 0x2D	; 45
    13f8:	39 f0       	breq	.+14     	; 0x1408 <vfprintf+0xaa>
    13fa:	80 33       	cpi	r24, 0x30	; 48
    13fc:	39 f4       	brne	.+14     	; 0x140c <vfprintf+0xae>
    13fe:	21 60       	ori	r18, 0x01	; 1
    1400:	26 c0       	rjmp	.+76     	; 0x144e <vfprintf+0xf0>
    1402:	22 60       	ori	r18, 0x02	; 2
    1404:	24 60       	ori	r18, 0x04	; 4
    1406:	23 c0       	rjmp	.+70     	; 0x144e <vfprintf+0xf0>
    1408:	28 60       	ori	r18, 0x08	; 8
    140a:	21 c0       	rjmp	.+66     	; 0x144e <vfprintf+0xf0>
    140c:	27 fd       	sbrc	r18, 7
    140e:	27 c0       	rjmp	.+78     	; 0x145e <vfprintf+0x100>
    1410:	30 ed       	ldi	r19, 0xD0	; 208
    1412:	38 0f       	add	r19, r24
    1414:	3a 30       	cpi	r19, 0x0A	; 10
    1416:	78 f4       	brcc	.+30     	; 0x1436 <vfprintf+0xd8>
    1418:	26 ff       	sbrs	r18, 6
    141a:	06 c0       	rjmp	.+12     	; 0x1428 <vfprintf+0xca>
    141c:	fa e0       	ldi	r31, 0x0A	; 10
    141e:	5f 9e       	mul	r5, r31
    1420:	30 0d       	add	r19, r0
    1422:	11 24       	eor	r1, r1
    1424:	53 2e       	mov	r5, r19
    1426:	13 c0       	rjmp	.+38     	; 0x144e <vfprintf+0xf0>
    1428:	8a e0       	ldi	r24, 0x0A	; 10
    142a:	38 9e       	mul	r3, r24
    142c:	30 0d       	add	r19, r0
    142e:	11 24       	eor	r1, r1
    1430:	33 2e       	mov	r3, r19
    1432:	20 62       	ori	r18, 0x20	; 32
    1434:	0c c0       	rjmp	.+24     	; 0x144e <vfprintf+0xf0>
    1436:	8e 32       	cpi	r24, 0x2E	; 46
    1438:	21 f4       	brne	.+8      	; 0x1442 <vfprintf+0xe4>
    143a:	26 fd       	sbrc	r18, 6
    143c:	5f c1       	rjmp	.+702    	; 0x16fc <vfprintf+0x39e>
    143e:	20 64       	ori	r18, 0x40	; 64
    1440:	06 c0       	rjmp	.+12     	; 0x144e <vfprintf+0xf0>
    1442:	8c 36       	cpi	r24, 0x6C	; 108
    1444:	11 f4       	brne	.+4      	; 0x144a <vfprintf+0xec>
    1446:	20 68       	ori	r18, 0x80	; 128
    1448:	02 c0       	rjmp	.+4      	; 0x144e <vfprintf+0xf0>
    144a:	88 36       	cpi	r24, 0x68	; 104
    144c:	41 f4       	brne	.+16     	; 0x145e <vfprintf+0x100>
    144e:	f6 01       	movw	r30, r12
    1450:	93 fd       	sbrc	r25, 3
    1452:	85 91       	lpm	r24, Z+
    1454:	93 ff       	sbrs	r25, 3
    1456:	81 91       	ld	r24, Z+
    1458:	6f 01       	movw	r12, r30
    145a:	81 11       	cpse	r24, r1
    145c:	c1 cf       	rjmp	.-126    	; 0x13e0 <vfprintf+0x82>
    145e:	98 2f       	mov	r25, r24
    1460:	9f 7d       	andi	r25, 0xDF	; 223
    1462:	95 54       	subi	r25, 0x45	; 69
    1464:	93 30       	cpi	r25, 0x03	; 3
    1466:	28 f4       	brcc	.+10     	; 0x1472 <vfprintf+0x114>
    1468:	0c 5f       	subi	r16, 0xFC	; 252
    146a:	1f 4f       	sbci	r17, 0xFF	; 255
    146c:	ff e3       	ldi	r31, 0x3F	; 63
    146e:	f9 83       	std	Y+1, r31	; 0x01
    1470:	0d c0       	rjmp	.+26     	; 0x148c <vfprintf+0x12e>
    1472:	83 36       	cpi	r24, 0x63	; 99
    1474:	31 f0       	breq	.+12     	; 0x1482 <vfprintf+0x124>
    1476:	83 37       	cpi	r24, 0x73	; 115
    1478:	71 f0       	breq	.+28     	; 0x1496 <vfprintf+0x138>
    147a:	83 35       	cpi	r24, 0x53	; 83
    147c:	09 f0       	breq	.+2      	; 0x1480 <vfprintf+0x122>
    147e:	57 c0       	rjmp	.+174    	; 0x152e <vfprintf+0x1d0>
    1480:	21 c0       	rjmp	.+66     	; 0x14c4 <vfprintf+0x166>
    1482:	f8 01       	movw	r30, r16
    1484:	80 81       	ld	r24, Z
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	0e 5f       	subi	r16, 0xFE	; 254
    148a:	1f 4f       	sbci	r17, 0xFF	; 255
    148c:	44 24       	eor	r4, r4
    148e:	43 94       	inc	r4
    1490:	51 2c       	mov	r5, r1
    1492:	54 01       	movw	r10, r8
    1494:	14 c0       	rjmp	.+40     	; 0x14be <vfprintf+0x160>
    1496:	38 01       	movw	r6, r16
    1498:	f2 e0       	ldi	r31, 0x02	; 2
    149a:	6f 0e       	add	r6, r31
    149c:	71 1c       	adc	r7, r1
    149e:	f8 01       	movw	r30, r16
    14a0:	a0 80       	ld	r10, Z
    14a2:	b1 80       	ldd	r11, Z+1	; 0x01
    14a4:	26 ff       	sbrs	r18, 6
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <vfprintf+0x150>
    14a8:	65 2d       	mov	r22, r5
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <vfprintf+0x154>
    14ae:	6f ef       	ldi	r22, 0xFF	; 255
    14b0:	7f ef       	ldi	r23, 0xFF	; 255
    14b2:	c5 01       	movw	r24, r10
    14b4:	2c 87       	std	Y+12, r18	; 0x0c
    14b6:	94 d2       	rcall	.+1320   	; 0x19e0 <strnlen>
    14b8:	2c 01       	movw	r4, r24
    14ba:	83 01       	movw	r16, r6
    14bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    14be:	2f 77       	andi	r18, 0x7F	; 127
    14c0:	22 2e       	mov	r2, r18
    14c2:	16 c0       	rjmp	.+44     	; 0x14f0 <vfprintf+0x192>
    14c4:	38 01       	movw	r6, r16
    14c6:	f2 e0       	ldi	r31, 0x02	; 2
    14c8:	6f 0e       	add	r6, r31
    14ca:	71 1c       	adc	r7, r1
    14cc:	f8 01       	movw	r30, r16
    14ce:	a0 80       	ld	r10, Z
    14d0:	b1 80       	ldd	r11, Z+1	; 0x01
    14d2:	26 ff       	sbrs	r18, 6
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <vfprintf+0x17e>
    14d6:	65 2d       	mov	r22, r5
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <vfprintf+0x182>
    14dc:	6f ef       	ldi	r22, 0xFF	; 255
    14de:	7f ef       	ldi	r23, 0xFF	; 255
    14e0:	c5 01       	movw	r24, r10
    14e2:	2c 87       	std	Y+12, r18	; 0x0c
    14e4:	6b d2       	rcall	.+1238   	; 0x19bc <strnlen_P>
    14e6:	2c 01       	movw	r4, r24
    14e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    14ea:	20 68       	ori	r18, 0x80	; 128
    14ec:	22 2e       	mov	r2, r18
    14ee:	83 01       	movw	r16, r6
    14f0:	23 fc       	sbrc	r2, 3
    14f2:	19 c0       	rjmp	.+50     	; 0x1526 <vfprintf+0x1c8>
    14f4:	83 2d       	mov	r24, r3
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	48 16       	cp	r4, r24
    14fa:	59 06       	cpc	r5, r25
    14fc:	a0 f4       	brcc	.+40     	; 0x1526 <vfprintf+0x1c8>
    14fe:	b7 01       	movw	r22, r14
    1500:	80 e2       	ldi	r24, 0x20	; 32
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	78 d2       	rcall	.+1264   	; 0x19f6 <fputc>
    1506:	3a 94       	dec	r3
    1508:	f5 cf       	rjmp	.-22     	; 0x14f4 <vfprintf+0x196>
    150a:	f5 01       	movw	r30, r10
    150c:	27 fc       	sbrc	r2, 7
    150e:	85 91       	lpm	r24, Z+
    1510:	27 fe       	sbrs	r2, 7
    1512:	81 91       	ld	r24, Z+
    1514:	5f 01       	movw	r10, r30
    1516:	b7 01       	movw	r22, r14
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	6d d2       	rcall	.+1242   	; 0x19f6 <fputc>
    151c:	31 10       	cpse	r3, r1
    151e:	3a 94       	dec	r3
    1520:	f1 e0       	ldi	r31, 0x01	; 1
    1522:	4f 1a       	sub	r4, r31
    1524:	51 08       	sbc	r5, r1
    1526:	41 14       	cp	r4, r1
    1528:	51 04       	cpc	r5, r1
    152a:	79 f7       	brne	.-34     	; 0x150a <vfprintf+0x1ac>
    152c:	de c0       	rjmp	.+444    	; 0x16ea <vfprintf+0x38c>
    152e:	84 36       	cpi	r24, 0x64	; 100
    1530:	11 f0       	breq	.+4      	; 0x1536 <vfprintf+0x1d8>
    1532:	89 36       	cpi	r24, 0x69	; 105
    1534:	31 f5       	brne	.+76     	; 0x1582 <vfprintf+0x224>
    1536:	f8 01       	movw	r30, r16
    1538:	27 ff       	sbrs	r18, 7
    153a:	07 c0       	rjmp	.+14     	; 0x154a <vfprintf+0x1ec>
    153c:	60 81       	ld	r22, Z
    153e:	71 81       	ldd	r23, Z+1	; 0x01
    1540:	82 81       	ldd	r24, Z+2	; 0x02
    1542:	93 81       	ldd	r25, Z+3	; 0x03
    1544:	0c 5f       	subi	r16, 0xFC	; 252
    1546:	1f 4f       	sbci	r17, 0xFF	; 255
    1548:	08 c0       	rjmp	.+16     	; 0x155a <vfprintf+0x1fc>
    154a:	60 81       	ld	r22, Z
    154c:	71 81       	ldd	r23, Z+1	; 0x01
    154e:	88 27       	eor	r24, r24
    1550:	77 fd       	sbrc	r23, 7
    1552:	80 95       	com	r24
    1554:	98 2f       	mov	r25, r24
    1556:	0e 5f       	subi	r16, 0xFE	; 254
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
    155a:	2f 76       	andi	r18, 0x6F	; 111
    155c:	b2 2e       	mov	r11, r18
    155e:	97 ff       	sbrs	r25, 7
    1560:	09 c0       	rjmp	.+18     	; 0x1574 <vfprintf+0x216>
    1562:	90 95       	com	r25
    1564:	80 95       	com	r24
    1566:	70 95       	com	r23
    1568:	61 95       	neg	r22
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	8f 4f       	sbci	r24, 0xFF	; 255
    156e:	9f 4f       	sbci	r25, 0xFF	; 255
    1570:	20 68       	ori	r18, 0x80	; 128
    1572:	b2 2e       	mov	r11, r18
    1574:	2a e0       	ldi	r18, 0x0A	; 10
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	a4 01       	movw	r20, r8
    157a:	6f d2       	rcall	.+1246   	; 0x1a5a <__ultoa_invert>
    157c:	a8 2e       	mov	r10, r24
    157e:	a8 18       	sub	r10, r8
    1580:	43 c0       	rjmp	.+134    	; 0x1608 <vfprintf+0x2aa>
    1582:	85 37       	cpi	r24, 0x75	; 117
    1584:	29 f4       	brne	.+10     	; 0x1590 <vfprintf+0x232>
    1586:	2f 7e       	andi	r18, 0xEF	; 239
    1588:	b2 2e       	mov	r11, r18
    158a:	2a e0       	ldi	r18, 0x0A	; 10
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	25 c0       	rjmp	.+74     	; 0x15da <vfprintf+0x27c>
    1590:	f2 2f       	mov	r31, r18
    1592:	f9 7f       	andi	r31, 0xF9	; 249
    1594:	bf 2e       	mov	r11, r31
    1596:	8f 36       	cpi	r24, 0x6F	; 111
    1598:	c1 f0       	breq	.+48     	; 0x15ca <vfprintf+0x26c>
    159a:	18 f4       	brcc	.+6      	; 0x15a2 <vfprintf+0x244>
    159c:	88 35       	cpi	r24, 0x58	; 88
    159e:	79 f0       	breq	.+30     	; 0x15be <vfprintf+0x260>
    15a0:	ad c0       	rjmp	.+346    	; 0x16fc <vfprintf+0x39e>
    15a2:	80 37       	cpi	r24, 0x70	; 112
    15a4:	19 f0       	breq	.+6      	; 0x15ac <vfprintf+0x24e>
    15a6:	88 37       	cpi	r24, 0x78	; 120
    15a8:	21 f0       	breq	.+8      	; 0x15b2 <vfprintf+0x254>
    15aa:	a8 c0       	rjmp	.+336    	; 0x16fc <vfprintf+0x39e>
    15ac:	2f 2f       	mov	r18, r31
    15ae:	20 61       	ori	r18, 0x10	; 16
    15b0:	b2 2e       	mov	r11, r18
    15b2:	b4 fe       	sbrs	r11, 4
    15b4:	0d c0       	rjmp	.+26     	; 0x15d0 <vfprintf+0x272>
    15b6:	8b 2d       	mov	r24, r11
    15b8:	84 60       	ori	r24, 0x04	; 4
    15ba:	b8 2e       	mov	r11, r24
    15bc:	09 c0       	rjmp	.+18     	; 0x15d0 <vfprintf+0x272>
    15be:	24 ff       	sbrs	r18, 4
    15c0:	0a c0       	rjmp	.+20     	; 0x15d6 <vfprintf+0x278>
    15c2:	9f 2f       	mov	r25, r31
    15c4:	96 60       	ori	r25, 0x06	; 6
    15c6:	b9 2e       	mov	r11, r25
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <vfprintf+0x278>
    15ca:	28 e0       	ldi	r18, 0x08	; 8
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <vfprintf+0x27c>
    15d0:	20 e1       	ldi	r18, 0x10	; 16
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <vfprintf+0x27c>
    15d6:	20 e1       	ldi	r18, 0x10	; 16
    15d8:	32 e0       	ldi	r19, 0x02	; 2
    15da:	f8 01       	movw	r30, r16
    15dc:	b7 fe       	sbrs	r11, 7
    15de:	07 c0       	rjmp	.+14     	; 0x15ee <vfprintf+0x290>
    15e0:	60 81       	ld	r22, Z
    15e2:	71 81       	ldd	r23, Z+1	; 0x01
    15e4:	82 81       	ldd	r24, Z+2	; 0x02
    15e6:	93 81       	ldd	r25, Z+3	; 0x03
    15e8:	0c 5f       	subi	r16, 0xFC	; 252
    15ea:	1f 4f       	sbci	r17, 0xFF	; 255
    15ec:	06 c0       	rjmp	.+12     	; 0x15fa <vfprintf+0x29c>
    15ee:	60 81       	ld	r22, Z
    15f0:	71 81       	ldd	r23, Z+1	; 0x01
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 5f       	subi	r16, 0xFE	; 254
    15f8:	1f 4f       	sbci	r17, 0xFF	; 255
    15fa:	a4 01       	movw	r20, r8
    15fc:	2e d2       	rcall	.+1116   	; 0x1a5a <__ultoa_invert>
    15fe:	a8 2e       	mov	r10, r24
    1600:	a8 18       	sub	r10, r8
    1602:	fb 2d       	mov	r31, r11
    1604:	ff 77       	andi	r31, 0x7F	; 127
    1606:	bf 2e       	mov	r11, r31
    1608:	b6 fe       	sbrs	r11, 6
    160a:	0b c0       	rjmp	.+22     	; 0x1622 <vfprintf+0x2c4>
    160c:	2b 2d       	mov	r18, r11
    160e:	2e 7f       	andi	r18, 0xFE	; 254
    1610:	a5 14       	cp	r10, r5
    1612:	50 f4       	brcc	.+20     	; 0x1628 <vfprintf+0x2ca>
    1614:	b4 fe       	sbrs	r11, 4
    1616:	0a c0       	rjmp	.+20     	; 0x162c <vfprintf+0x2ce>
    1618:	b2 fc       	sbrc	r11, 2
    161a:	08 c0       	rjmp	.+16     	; 0x162c <vfprintf+0x2ce>
    161c:	2b 2d       	mov	r18, r11
    161e:	2e 7e       	andi	r18, 0xEE	; 238
    1620:	05 c0       	rjmp	.+10     	; 0x162c <vfprintf+0x2ce>
    1622:	7a 2c       	mov	r7, r10
    1624:	2b 2d       	mov	r18, r11
    1626:	03 c0       	rjmp	.+6      	; 0x162e <vfprintf+0x2d0>
    1628:	7a 2c       	mov	r7, r10
    162a:	01 c0       	rjmp	.+2      	; 0x162e <vfprintf+0x2d0>
    162c:	75 2c       	mov	r7, r5
    162e:	24 ff       	sbrs	r18, 4
    1630:	0d c0       	rjmp	.+26     	; 0x164c <vfprintf+0x2ee>
    1632:	fe 01       	movw	r30, r28
    1634:	ea 0d       	add	r30, r10
    1636:	f1 1d       	adc	r31, r1
    1638:	80 81       	ld	r24, Z
    163a:	80 33       	cpi	r24, 0x30	; 48
    163c:	11 f4       	brne	.+4      	; 0x1642 <vfprintf+0x2e4>
    163e:	29 7e       	andi	r18, 0xE9	; 233
    1640:	09 c0       	rjmp	.+18     	; 0x1654 <vfprintf+0x2f6>
    1642:	22 ff       	sbrs	r18, 2
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <vfprintf+0x2f4>
    1646:	73 94       	inc	r7
    1648:	73 94       	inc	r7
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <vfprintf+0x2f6>
    164c:	82 2f       	mov	r24, r18
    164e:	86 78       	andi	r24, 0x86	; 134
    1650:	09 f0       	breq	.+2      	; 0x1654 <vfprintf+0x2f6>
    1652:	73 94       	inc	r7
    1654:	23 fd       	sbrc	r18, 3
    1656:	12 c0       	rjmp	.+36     	; 0x167c <vfprintf+0x31e>
    1658:	20 ff       	sbrs	r18, 0
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <vfprintf+0x30a>
    165c:	5a 2c       	mov	r5, r10
    165e:	73 14       	cp	r7, r3
    1660:	18 f4       	brcc	.+6      	; 0x1668 <vfprintf+0x30a>
    1662:	53 0c       	add	r5, r3
    1664:	57 18       	sub	r5, r7
    1666:	73 2c       	mov	r7, r3
    1668:	73 14       	cp	r7, r3
    166a:	60 f4       	brcc	.+24     	; 0x1684 <vfprintf+0x326>
    166c:	b7 01       	movw	r22, r14
    166e:	80 e2       	ldi	r24, 0x20	; 32
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	2c 87       	std	Y+12, r18	; 0x0c
    1674:	c0 d1       	rcall	.+896    	; 0x19f6 <fputc>
    1676:	73 94       	inc	r7
    1678:	2c 85       	ldd	r18, Y+12	; 0x0c
    167a:	f6 cf       	rjmp	.-20     	; 0x1668 <vfprintf+0x30a>
    167c:	73 14       	cp	r7, r3
    167e:	10 f4       	brcc	.+4      	; 0x1684 <vfprintf+0x326>
    1680:	37 18       	sub	r3, r7
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <vfprintf+0x328>
    1684:	31 2c       	mov	r3, r1
    1686:	24 ff       	sbrs	r18, 4
    1688:	11 c0       	rjmp	.+34     	; 0x16ac <vfprintf+0x34e>
    168a:	b7 01       	movw	r22, r14
    168c:	80 e3       	ldi	r24, 0x30	; 48
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	2c 87       	std	Y+12, r18	; 0x0c
    1692:	b1 d1       	rcall	.+866    	; 0x19f6 <fputc>
    1694:	2c 85       	ldd	r18, Y+12	; 0x0c
    1696:	22 ff       	sbrs	r18, 2
    1698:	16 c0       	rjmp	.+44     	; 0x16c6 <vfprintf+0x368>
    169a:	21 ff       	sbrs	r18, 1
    169c:	03 c0       	rjmp	.+6      	; 0x16a4 <vfprintf+0x346>
    169e:	88 e5       	ldi	r24, 0x58	; 88
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <vfprintf+0x34a>
    16a4:	88 e7       	ldi	r24, 0x78	; 120
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	b7 01       	movw	r22, r14
    16aa:	0c c0       	rjmp	.+24     	; 0x16c4 <vfprintf+0x366>
    16ac:	82 2f       	mov	r24, r18
    16ae:	86 78       	andi	r24, 0x86	; 134
    16b0:	51 f0       	breq	.+20     	; 0x16c6 <vfprintf+0x368>
    16b2:	21 fd       	sbrc	r18, 1
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <vfprintf+0x35c>
    16b6:	80 e2       	ldi	r24, 0x20	; 32
    16b8:	01 c0       	rjmp	.+2      	; 0x16bc <vfprintf+0x35e>
    16ba:	8b e2       	ldi	r24, 0x2B	; 43
    16bc:	27 fd       	sbrc	r18, 7
    16be:	8d e2       	ldi	r24, 0x2D	; 45
    16c0:	b7 01       	movw	r22, r14
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	98 d1       	rcall	.+816    	; 0x19f6 <fputc>
    16c6:	a5 14       	cp	r10, r5
    16c8:	30 f4       	brcc	.+12     	; 0x16d6 <vfprintf+0x378>
    16ca:	b7 01       	movw	r22, r14
    16cc:	80 e3       	ldi	r24, 0x30	; 48
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	92 d1       	rcall	.+804    	; 0x19f6 <fputc>
    16d2:	5a 94       	dec	r5
    16d4:	f8 cf       	rjmp	.-16     	; 0x16c6 <vfprintf+0x368>
    16d6:	aa 94       	dec	r10
    16d8:	f4 01       	movw	r30, r8
    16da:	ea 0d       	add	r30, r10
    16dc:	f1 1d       	adc	r31, r1
    16de:	80 81       	ld	r24, Z
    16e0:	b7 01       	movw	r22, r14
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	88 d1       	rcall	.+784    	; 0x19f6 <fputc>
    16e6:	a1 10       	cpse	r10, r1
    16e8:	f6 cf       	rjmp	.-20     	; 0x16d6 <vfprintf+0x378>
    16ea:	33 20       	and	r3, r3
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <vfprintf+0x392>
    16ee:	5d ce       	rjmp	.-838    	; 0x13aa <vfprintf+0x4c>
    16f0:	b7 01       	movw	r22, r14
    16f2:	80 e2       	ldi	r24, 0x20	; 32
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	7f d1       	rcall	.+766    	; 0x19f6 <fputc>
    16f8:	3a 94       	dec	r3
    16fa:	f7 cf       	rjmp	.-18     	; 0x16ea <vfprintf+0x38c>
    16fc:	f7 01       	movw	r30, r14
    16fe:	86 81       	ldd	r24, Z+6	; 0x06
    1700:	97 81       	ldd	r25, Z+7	; 0x07
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <vfprintf+0x3aa>
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	9f ef       	ldi	r25, 0xFF	; 255
    1708:	2c 96       	adiw	r28, 0x0c	; 12
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	cf 90       	pop	r12
    1724:	bf 90       	pop	r11
    1726:	af 90       	pop	r10
    1728:	9f 90       	pop	r9
    172a:	8f 90       	pop	r8
    172c:	7f 90       	pop	r7
    172e:	6f 90       	pop	r6
    1730:	5f 90       	pop	r5
    1732:	4f 90       	pop	r4
    1734:	3f 90       	pop	r3
    1736:	2f 90       	pop	r2
    1738:	08 95       	ret

0000173a <calloc>:
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	86 9f       	mul	r24, r22
    1744:	80 01       	movw	r16, r0
    1746:	87 9f       	mul	r24, r23
    1748:	10 0d       	add	r17, r0
    174a:	96 9f       	mul	r25, r22
    174c:	10 0d       	add	r17, r0
    174e:	11 24       	eor	r1, r1
    1750:	c8 01       	movw	r24, r16
    1752:	0d d0       	rcall	.+26     	; 0x176e <malloc>
    1754:	ec 01       	movw	r28, r24
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	21 f0       	breq	.+8      	; 0x1762 <calloc+0x28>
    175a:	a8 01       	movw	r20, r16
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	38 d1       	rcall	.+624    	; 0x19d2 <memset>
    1762:	ce 01       	movw	r24, r28
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	08 95       	ret

0000176e <malloc>:
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	82 30       	cpi	r24, 0x02	; 2
    1774:	91 05       	cpc	r25, r1
    1776:	10 f4       	brcc	.+4      	; 0x177c <malloc+0xe>
    1778:	82 e0       	ldi	r24, 0x02	; 2
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	e0 91 bf 02 	lds	r30, 0x02BF
    1780:	f0 91 c0 02 	lds	r31, 0x02C0
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	a0 e0       	ldi	r26, 0x00	; 0
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	30 97       	sbiw	r30, 0x00	; 0
    178e:	39 f1       	breq	.+78     	; 0x17de <malloc+0x70>
    1790:	40 81       	ld	r20, Z
    1792:	51 81       	ldd	r21, Z+1	; 0x01
    1794:	48 17       	cp	r20, r24
    1796:	59 07       	cpc	r21, r25
    1798:	b8 f0       	brcs	.+46     	; 0x17c8 <malloc+0x5a>
    179a:	48 17       	cp	r20, r24
    179c:	59 07       	cpc	r21, r25
    179e:	71 f4       	brne	.+28     	; 0x17bc <malloc+0x4e>
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	10 97       	sbiw	r26, 0x00	; 0
    17a6:	29 f0       	breq	.+10     	; 0x17b2 <malloc+0x44>
    17a8:	13 96       	adiw	r26, 0x03	; 3
    17aa:	9c 93       	st	X, r25
    17ac:	8e 93       	st	-X, r24
    17ae:	12 97       	sbiw	r26, 0x02	; 2
    17b0:	2c c0       	rjmp	.+88     	; 0x180a <malloc+0x9c>
    17b2:	90 93 c0 02 	sts	0x02C0, r25
    17b6:	80 93 bf 02 	sts	0x02BF, r24
    17ba:	27 c0       	rjmp	.+78     	; 0x180a <malloc+0x9c>
    17bc:	21 15       	cp	r18, r1
    17be:	31 05       	cpc	r19, r1
    17c0:	31 f0       	breq	.+12     	; 0x17ce <malloc+0x60>
    17c2:	42 17       	cp	r20, r18
    17c4:	53 07       	cpc	r21, r19
    17c6:	18 f0       	brcs	.+6      	; 0x17ce <malloc+0x60>
    17c8:	a9 01       	movw	r20, r18
    17ca:	db 01       	movw	r26, r22
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <malloc+0x62>
    17ce:	ef 01       	movw	r28, r30
    17d0:	9a 01       	movw	r18, r20
    17d2:	bd 01       	movw	r22, r26
    17d4:	df 01       	movw	r26, r30
    17d6:	02 80       	ldd	r0, Z+2	; 0x02
    17d8:	f3 81       	ldd	r31, Z+3	; 0x03
    17da:	e0 2d       	mov	r30, r0
    17dc:	d7 cf       	rjmp	.-82     	; 0x178c <malloc+0x1e>
    17de:	21 15       	cp	r18, r1
    17e0:	31 05       	cpc	r19, r1
    17e2:	f9 f0       	breq	.+62     	; 0x1822 <malloc+0xb4>
    17e4:	28 1b       	sub	r18, r24
    17e6:	39 0b       	sbc	r19, r25
    17e8:	24 30       	cpi	r18, 0x04	; 4
    17ea:	31 05       	cpc	r19, r1
    17ec:	80 f4       	brcc	.+32     	; 0x180e <malloc+0xa0>
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	9b 81       	ldd	r25, Y+3	; 0x03
    17f2:	61 15       	cp	r22, r1
    17f4:	71 05       	cpc	r23, r1
    17f6:	21 f0       	breq	.+8      	; 0x1800 <malloc+0x92>
    17f8:	fb 01       	movw	r30, r22
    17fa:	93 83       	std	Z+3, r25	; 0x03
    17fc:	82 83       	std	Z+2, r24	; 0x02
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <malloc+0x9a>
    1800:	90 93 c0 02 	sts	0x02C0, r25
    1804:	80 93 bf 02 	sts	0x02BF, r24
    1808:	fe 01       	movw	r30, r28
    180a:	32 96       	adiw	r30, 0x02	; 2
    180c:	44 c0       	rjmp	.+136    	; 0x1896 <malloc+0x128>
    180e:	fe 01       	movw	r30, r28
    1810:	e2 0f       	add	r30, r18
    1812:	f3 1f       	adc	r31, r19
    1814:	81 93       	st	Z+, r24
    1816:	91 93       	st	Z+, r25
    1818:	22 50       	subi	r18, 0x02	; 2
    181a:	31 09       	sbc	r19, r1
    181c:	39 83       	std	Y+1, r19	; 0x01
    181e:	28 83       	st	Y, r18
    1820:	3a c0       	rjmp	.+116    	; 0x1896 <malloc+0x128>
    1822:	20 91 bd 02 	lds	r18, 0x02BD
    1826:	30 91 be 02 	lds	r19, 0x02BE
    182a:	23 2b       	or	r18, r19
    182c:	41 f4       	brne	.+16     	; 0x183e <malloc+0xd0>
    182e:	20 91 02 02 	lds	r18, 0x0202
    1832:	30 91 03 02 	lds	r19, 0x0203
    1836:	30 93 be 02 	sts	0x02BE, r19
    183a:	20 93 bd 02 	sts	0x02BD, r18
    183e:	20 91 00 02 	lds	r18, 0x0200
    1842:	30 91 01 02 	lds	r19, 0x0201
    1846:	21 15       	cp	r18, r1
    1848:	31 05       	cpc	r19, r1
    184a:	41 f4       	brne	.+16     	; 0x185c <malloc+0xee>
    184c:	2d b7       	in	r18, 0x3d	; 61
    184e:	3e b7       	in	r19, 0x3e	; 62
    1850:	40 91 04 02 	lds	r20, 0x0204
    1854:	50 91 05 02 	lds	r21, 0x0205
    1858:	24 1b       	sub	r18, r20
    185a:	35 0b       	sbc	r19, r21
    185c:	e0 91 bd 02 	lds	r30, 0x02BD
    1860:	f0 91 be 02 	lds	r31, 0x02BE
    1864:	e2 17       	cp	r30, r18
    1866:	f3 07       	cpc	r31, r19
    1868:	a0 f4       	brcc	.+40     	; 0x1892 <malloc+0x124>
    186a:	2e 1b       	sub	r18, r30
    186c:	3f 0b       	sbc	r19, r31
    186e:	28 17       	cp	r18, r24
    1870:	39 07       	cpc	r19, r25
    1872:	78 f0       	brcs	.+30     	; 0x1892 <malloc+0x124>
    1874:	ac 01       	movw	r20, r24
    1876:	4e 5f       	subi	r20, 0xFE	; 254
    1878:	5f 4f       	sbci	r21, 0xFF	; 255
    187a:	24 17       	cp	r18, r20
    187c:	35 07       	cpc	r19, r21
    187e:	48 f0       	brcs	.+18     	; 0x1892 <malloc+0x124>
    1880:	4e 0f       	add	r20, r30
    1882:	5f 1f       	adc	r21, r31
    1884:	50 93 be 02 	sts	0x02BE, r21
    1888:	40 93 bd 02 	sts	0x02BD, r20
    188c:	81 93       	st	Z+, r24
    188e:	91 93       	st	Z+, r25
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <malloc+0x128>
    1892:	e0 e0       	ldi	r30, 0x00	; 0
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	cf 01       	movw	r24, r30
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	08 95       	ret

0000189e <free>:
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <free+0xa>
    18a6:	87 c0       	rjmp	.+270    	; 0x19b6 <free+0x118>
    18a8:	fc 01       	movw	r30, r24
    18aa:	32 97       	sbiw	r30, 0x02	; 2
    18ac:	13 82       	std	Z+3, r1	; 0x03
    18ae:	12 82       	std	Z+2, r1	; 0x02
    18b0:	c0 91 bf 02 	lds	r28, 0x02BF
    18b4:	d0 91 c0 02 	lds	r29, 0x02C0
    18b8:	20 97       	sbiw	r28, 0x00	; 0
    18ba:	81 f4       	brne	.+32     	; 0x18dc <free+0x3e>
    18bc:	20 81       	ld	r18, Z
    18be:	31 81       	ldd	r19, Z+1	; 0x01
    18c0:	28 0f       	add	r18, r24
    18c2:	39 1f       	adc	r19, r25
    18c4:	80 91 bd 02 	lds	r24, 0x02BD
    18c8:	90 91 be 02 	lds	r25, 0x02BE
    18cc:	82 17       	cp	r24, r18
    18ce:	93 07       	cpc	r25, r19
    18d0:	79 f5       	brne	.+94     	; 0x1930 <free+0x92>
    18d2:	f0 93 be 02 	sts	0x02BE, r31
    18d6:	e0 93 bd 02 	sts	0x02BD, r30
    18da:	6d c0       	rjmp	.+218    	; 0x19b6 <free+0x118>
    18dc:	de 01       	movw	r26, r28
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	ae 17       	cp	r26, r30
    18e4:	bf 07       	cpc	r27, r31
    18e6:	50 f4       	brcc	.+20     	; 0x18fc <free+0x5e>
    18e8:	12 96       	adiw	r26, 0x02	; 2
    18ea:	4d 91       	ld	r20, X+
    18ec:	5c 91       	ld	r21, X
    18ee:	13 97       	sbiw	r26, 0x03	; 3
    18f0:	9d 01       	movw	r18, r26
    18f2:	41 15       	cp	r20, r1
    18f4:	51 05       	cpc	r21, r1
    18f6:	09 f1       	breq	.+66     	; 0x193a <free+0x9c>
    18f8:	da 01       	movw	r26, r20
    18fa:	f3 cf       	rjmp	.-26     	; 0x18e2 <free+0x44>
    18fc:	b3 83       	std	Z+3, r27	; 0x03
    18fe:	a2 83       	std	Z+2, r26	; 0x02
    1900:	40 81       	ld	r20, Z
    1902:	51 81       	ldd	r21, Z+1	; 0x01
    1904:	84 0f       	add	r24, r20
    1906:	95 1f       	adc	r25, r21
    1908:	8a 17       	cp	r24, r26
    190a:	9b 07       	cpc	r25, r27
    190c:	71 f4       	brne	.+28     	; 0x192a <free+0x8c>
    190e:	8d 91       	ld	r24, X+
    1910:	9c 91       	ld	r25, X
    1912:	11 97       	sbiw	r26, 0x01	; 1
    1914:	84 0f       	add	r24, r20
    1916:	95 1f       	adc	r25, r21
    1918:	02 96       	adiw	r24, 0x02	; 2
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	80 83       	st	Z, r24
    191e:	12 96       	adiw	r26, 0x02	; 2
    1920:	8d 91       	ld	r24, X+
    1922:	9c 91       	ld	r25, X
    1924:	13 97       	sbiw	r26, 0x03	; 3
    1926:	93 83       	std	Z+3, r25	; 0x03
    1928:	82 83       	std	Z+2, r24	; 0x02
    192a:	21 15       	cp	r18, r1
    192c:	31 05       	cpc	r19, r1
    192e:	29 f4       	brne	.+10     	; 0x193a <free+0x9c>
    1930:	f0 93 c0 02 	sts	0x02C0, r31
    1934:	e0 93 bf 02 	sts	0x02BF, r30
    1938:	3e c0       	rjmp	.+124    	; 0x19b6 <free+0x118>
    193a:	d9 01       	movw	r26, r18
    193c:	13 96       	adiw	r26, 0x03	; 3
    193e:	fc 93       	st	X, r31
    1940:	ee 93       	st	-X, r30
    1942:	12 97       	sbiw	r26, 0x02	; 2
    1944:	4d 91       	ld	r20, X+
    1946:	5d 91       	ld	r21, X+
    1948:	a4 0f       	add	r26, r20
    194a:	b5 1f       	adc	r27, r21
    194c:	ea 17       	cp	r30, r26
    194e:	fb 07       	cpc	r31, r27
    1950:	79 f4       	brne	.+30     	; 0x1970 <free+0xd2>
    1952:	80 81       	ld	r24, Z
    1954:	91 81       	ldd	r25, Z+1	; 0x01
    1956:	84 0f       	add	r24, r20
    1958:	95 1f       	adc	r25, r21
    195a:	02 96       	adiw	r24, 0x02	; 2
    195c:	d9 01       	movw	r26, r18
    195e:	11 96       	adiw	r26, 0x01	; 1
    1960:	9c 93       	st	X, r25
    1962:	8e 93       	st	-X, r24
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	93 81       	ldd	r25, Z+3	; 0x03
    1968:	13 96       	adiw	r26, 0x03	; 3
    196a:	9c 93       	st	X, r25
    196c:	8e 93       	st	-X, r24
    196e:	12 97       	sbiw	r26, 0x02	; 2
    1970:	e0 e0       	ldi	r30, 0x00	; 0
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	9b 81       	ldd	r25, Y+3	; 0x03
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	19 f0       	breq	.+6      	; 0x1982 <free+0xe4>
    197c:	fe 01       	movw	r30, r28
    197e:	ec 01       	movw	r28, r24
    1980:	f9 cf       	rjmp	.-14     	; 0x1974 <free+0xd6>
    1982:	ce 01       	movw	r24, r28
    1984:	02 96       	adiw	r24, 0x02	; 2
    1986:	28 81       	ld	r18, Y
    1988:	39 81       	ldd	r19, Y+1	; 0x01
    198a:	82 0f       	add	r24, r18
    198c:	93 1f       	adc	r25, r19
    198e:	20 91 bd 02 	lds	r18, 0x02BD
    1992:	30 91 be 02 	lds	r19, 0x02BE
    1996:	28 17       	cp	r18, r24
    1998:	39 07       	cpc	r19, r25
    199a:	69 f4       	brne	.+26     	; 0x19b6 <free+0x118>
    199c:	30 97       	sbiw	r30, 0x00	; 0
    199e:	29 f4       	brne	.+10     	; 0x19aa <free+0x10c>
    19a0:	10 92 c0 02 	sts	0x02C0, r1
    19a4:	10 92 bf 02 	sts	0x02BF, r1
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <free+0x110>
    19aa:	13 82       	std	Z+3, r1	; 0x03
    19ac:	12 82       	std	Z+2, r1	; 0x02
    19ae:	d0 93 be 02 	sts	0x02BE, r29
    19b2:	c0 93 bd 02 	sts	0x02BD, r28
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	08 95       	ret

000019bc <strnlen_P>:
    19bc:	fc 01       	movw	r30, r24
    19be:	05 90       	lpm	r0, Z+
    19c0:	61 50       	subi	r22, 0x01	; 1
    19c2:	70 40       	sbci	r23, 0x00	; 0
    19c4:	01 10       	cpse	r0, r1
    19c6:	d8 f7       	brcc	.-10     	; 0x19be <strnlen_P+0x2>
    19c8:	80 95       	com	r24
    19ca:	90 95       	com	r25
    19cc:	8e 0f       	add	r24, r30
    19ce:	9f 1f       	adc	r25, r31
    19d0:	08 95       	ret

000019d2 <memset>:
    19d2:	dc 01       	movw	r26, r24
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <memset+0x6>
    19d6:	6d 93       	st	X+, r22
    19d8:	41 50       	subi	r20, 0x01	; 1
    19da:	50 40       	sbci	r21, 0x00	; 0
    19dc:	e0 f7       	brcc	.-8      	; 0x19d6 <memset+0x4>
    19de:	08 95       	ret

000019e0 <strnlen>:
    19e0:	fc 01       	movw	r30, r24
    19e2:	61 50       	subi	r22, 0x01	; 1
    19e4:	70 40       	sbci	r23, 0x00	; 0
    19e6:	01 90       	ld	r0, Z+
    19e8:	01 10       	cpse	r0, r1
    19ea:	d8 f7       	brcc	.-10     	; 0x19e2 <strnlen+0x2>
    19ec:	80 95       	com	r24
    19ee:	90 95       	com	r25
    19f0:	8e 0f       	add	r24, r30
    19f2:	9f 1f       	adc	r25, r31
    19f4:	08 95       	ret

000019f6 <fputc>:
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	18 2f       	mov	r17, r24
    1a00:	09 2f       	mov	r16, r25
    1a02:	eb 01       	movw	r28, r22
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	81 fd       	sbrc	r24, 1
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <fputc+0x1a>
    1a0a:	8f ef       	ldi	r24, 0xFF	; 255
    1a0c:	9f ef       	ldi	r25, 0xFF	; 255
    1a0e:	20 c0       	rjmp	.+64     	; 0x1a50 <fputc+0x5a>
    1a10:	82 ff       	sbrs	r24, 2
    1a12:	10 c0       	rjmp	.+32     	; 0x1a34 <fputc+0x3e>
    1a14:	4e 81       	ldd	r20, Y+6	; 0x06
    1a16:	5f 81       	ldd	r21, Y+7	; 0x07
    1a18:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1c:	42 17       	cp	r20, r18
    1a1e:	53 07       	cpc	r21, r19
    1a20:	7c f4       	brge	.+30     	; 0x1a40 <fputc+0x4a>
    1a22:	e8 81       	ld	r30, Y
    1a24:	f9 81       	ldd	r31, Y+1	; 0x01
    1a26:	9f 01       	movw	r18, r30
    1a28:	2f 5f       	subi	r18, 0xFF	; 255
    1a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2c:	39 83       	std	Y+1, r19	; 0x01
    1a2e:	28 83       	st	Y, r18
    1a30:	10 83       	st	Z, r17
    1a32:	06 c0       	rjmp	.+12     	; 0x1a40 <fputc+0x4a>
    1a34:	e8 85       	ldd	r30, Y+8	; 0x08
    1a36:	f9 85       	ldd	r31, Y+9	; 0x09
    1a38:	81 2f       	mov	r24, r17
    1a3a:	19 95       	eicall
    1a3c:	89 2b       	or	r24, r25
    1a3e:	29 f7       	brne	.-54     	; 0x1a0a <fputc+0x14>
    1a40:	2e 81       	ldd	r18, Y+6	; 0x06
    1a42:	3f 81       	ldd	r19, Y+7	; 0x07
    1a44:	2f 5f       	subi	r18, 0xFF	; 255
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	3f 83       	std	Y+7, r19	; 0x07
    1a4a:	2e 83       	std	Y+6, r18	; 0x06
    1a4c:	81 2f       	mov	r24, r17
    1a4e:	90 2f       	mov	r25, r16
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	08 95       	ret

00001a5a <__ultoa_invert>:
    1a5a:	fa 01       	movw	r30, r20
    1a5c:	aa 27       	eor	r26, r26
    1a5e:	28 30       	cpi	r18, 0x08	; 8
    1a60:	51 f1       	breq	.+84     	; 0x1ab6 <__ultoa_invert+0x5c>
    1a62:	20 31       	cpi	r18, 0x10	; 16
    1a64:	81 f1       	breq	.+96     	; 0x1ac6 <__ultoa_invert+0x6c>
    1a66:	e8 94       	clt
    1a68:	6f 93       	push	r22
    1a6a:	6e 7f       	andi	r22, 0xFE	; 254
    1a6c:	6e 5f       	subi	r22, 0xFE	; 254
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	8f 4f       	sbci	r24, 0xFF	; 255
    1a72:	9f 4f       	sbci	r25, 0xFF	; 255
    1a74:	af 4f       	sbci	r26, 0xFF	; 255
    1a76:	b1 e0       	ldi	r27, 0x01	; 1
    1a78:	3e d0       	rcall	.+124    	; 0x1af6 <__ultoa_invert+0x9c>
    1a7a:	b4 e0       	ldi	r27, 0x04	; 4
    1a7c:	3c d0       	rcall	.+120    	; 0x1af6 <__ultoa_invert+0x9c>
    1a7e:	67 0f       	add	r22, r23
    1a80:	78 1f       	adc	r23, r24
    1a82:	89 1f       	adc	r24, r25
    1a84:	9a 1f       	adc	r25, r26
    1a86:	a1 1d       	adc	r26, r1
    1a88:	68 0f       	add	r22, r24
    1a8a:	79 1f       	adc	r23, r25
    1a8c:	8a 1f       	adc	r24, r26
    1a8e:	91 1d       	adc	r25, r1
    1a90:	a1 1d       	adc	r26, r1
    1a92:	6a 0f       	add	r22, r26
    1a94:	71 1d       	adc	r23, r1
    1a96:	81 1d       	adc	r24, r1
    1a98:	91 1d       	adc	r25, r1
    1a9a:	a1 1d       	adc	r26, r1
    1a9c:	20 d0       	rcall	.+64     	; 0x1ade <__ultoa_invert+0x84>
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <__ultoa_invert+0x48>
    1aa0:	68 94       	set
    1aa2:	3f 91       	pop	r19
    1aa4:	2a e0       	ldi	r18, 0x0A	; 10
    1aa6:	26 9f       	mul	r18, r22
    1aa8:	11 24       	eor	r1, r1
    1aaa:	30 19       	sub	r19, r0
    1aac:	30 5d       	subi	r19, 0xD0	; 208
    1aae:	31 93       	st	Z+, r19
    1ab0:	de f6       	brtc	.-74     	; 0x1a68 <__ultoa_invert+0xe>
    1ab2:	cf 01       	movw	r24, r30
    1ab4:	08 95       	ret
    1ab6:	46 2f       	mov	r20, r22
    1ab8:	47 70       	andi	r20, 0x07	; 7
    1aba:	40 5d       	subi	r20, 0xD0	; 208
    1abc:	41 93       	st	Z+, r20
    1abe:	b3 e0       	ldi	r27, 0x03	; 3
    1ac0:	0f d0       	rcall	.+30     	; 0x1ae0 <__ultoa_invert+0x86>
    1ac2:	c9 f7       	brne	.-14     	; 0x1ab6 <__ultoa_invert+0x5c>
    1ac4:	f6 cf       	rjmp	.-20     	; 0x1ab2 <__ultoa_invert+0x58>
    1ac6:	46 2f       	mov	r20, r22
    1ac8:	4f 70       	andi	r20, 0x0F	; 15
    1aca:	40 5d       	subi	r20, 0xD0	; 208
    1acc:	4a 33       	cpi	r20, 0x3A	; 58
    1ace:	18 f0       	brcs	.+6      	; 0x1ad6 <__ultoa_invert+0x7c>
    1ad0:	49 5d       	subi	r20, 0xD9	; 217
    1ad2:	31 fd       	sbrc	r19, 1
    1ad4:	40 52       	subi	r20, 0x20	; 32
    1ad6:	41 93       	st	Z+, r20
    1ad8:	02 d0       	rcall	.+4      	; 0x1ade <__ultoa_invert+0x84>
    1ada:	a9 f7       	brne	.-22     	; 0x1ac6 <__ultoa_invert+0x6c>
    1adc:	ea cf       	rjmp	.-44     	; 0x1ab2 <__ultoa_invert+0x58>
    1ade:	b4 e0       	ldi	r27, 0x04	; 4
    1ae0:	a6 95       	lsr	r26
    1ae2:	97 95       	ror	r25
    1ae4:	87 95       	ror	r24
    1ae6:	77 95       	ror	r23
    1ae8:	67 95       	ror	r22
    1aea:	ba 95       	dec	r27
    1aec:	c9 f7       	brne	.-14     	; 0x1ae0 <__ultoa_invert+0x86>
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	61 05       	cpc	r22, r1
    1af2:	71 05       	cpc	r23, r1
    1af4:	08 95       	ret
    1af6:	9b 01       	movw	r18, r22
    1af8:	ac 01       	movw	r20, r24
    1afa:	0a 2e       	mov	r0, r26
    1afc:	06 94       	lsr	r0
    1afe:	57 95       	ror	r21
    1b00:	47 95       	ror	r20
    1b02:	37 95       	ror	r19
    1b04:	27 95       	ror	r18
    1b06:	ba 95       	dec	r27
    1b08:	c9 f7       	brne	.-14     	; 0x1afc <__ultoa_invert+0xa2>
    1b0a:	62 0f       	add	r22, r18
    1b0c:	73 1f       	adc	r23, r19
    1b0e:	84 1f       	adc	r24, r20
    1b10:	95 1f       	adc	r25, r21
    1b12:	a0 1d       	adc	r26, r0
    1b14:	08 95       	ret

00001b16 <_exit>:
    1b16:	f8 94       	cli

00001b18 <__stop_program>:
    1b18:	ff cf       	rjmp	.-2      	; 0x1b18 <__stop_program>
