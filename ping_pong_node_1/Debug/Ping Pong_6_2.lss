
Ping Pong_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001aa  00800100  0000167a  0000170e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000167a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000114  008002aa  008002aa  000018b8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000220  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002889  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dbf  00000000  00000000  000043bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ec7  00000000  00000000  0000517c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005a4  00000000  00000000  00007044  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000093b3  00000000  00000000  000075e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014c0  00000000  00000000  0001099b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  00011e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001110  00000000  00000000  0001206b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5f c3       	rjmp	.+1726   	; 0x6c0 <__ctors_end>
       2:	00 00       	nop
       4:	78 c3       	rjmp	.+1776   	; 0x6f6 <__bad_interrupt>
       6:	00 00       	nop
       8:	76 c3       	rjmp	.+1772   	; 0x6f6 <__bad_interrupt>
       a:	00 00       	nop
       c:	74 c3       	rjmp	.+1768   	; 0x6f6 <__bad_interrupt>
       e:	00 00       	nop
      10:	72 c3       	rjmp	.+1764   	; 0x6f6 <__bad_interrupt>
      12:	00 00       	nop
      14:	70 c3       	rjmp	.+1760   	; 0x6f6 <__bad_interrupt>
      16:	00 00       	nop
      18:	6e c3       	rjmp	.+1756   	; 0x6f6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6c c3       	rjmp	.+1752   	; 0x6f6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6a c3       	rjmp	.+1748   	; 0x6f6 <__bad_interrupt>
      22:	00 00       	nop
      24:	68 c3       	rjmp	.+1744   	; 0x6f6 <__bad_interrupt>
      26:	00 00       	nop
      28:	66 c3       	rjmp	.+1740   	; 0x6f6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	64 c3       	rjmp	.+1736   	; 0x6f6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	62 c3       	rjmp	.+1732   	; 0x6f6 <__bad_interrupt>
      32:	00 00       	nop
      34:	60 c3       	rjmp	.+1728   	; 0x6f6 <__bad_interrupt>
      36:	00 00       	nop
      38:	5e c3       	rjmp	.+1724   	; 0x6f6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5c c3       	rjmp	.+1720   	; 0x6f6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5a c3       	rjmp	.+1716   	; 0x6f6 <__bad_interrupt>
      42:	00 00       	nop
      44:	58 c3       	rjmp	.+1712   	; 0x6f6 <__bad_interrupt>
      46:	00 00       	nop
      48:	56 c3       	rjmp	.+1708   	; 0x6f6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	54 c3       	rjmp	.+1704   	; 0x6f6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	52 c3       	rjmp	.+1700   	; 0x6f6 <__bad_interrupt>
      52:	00 00       	nop
      54:	50 c3       	rjmp	.+1696   	; 0x6f6 <__bad_interrupt>
      56:	00 00       	nop
      58:	4e c3       	rjmp	.+1692   	; 0x6f6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4c c3       	rjmp	.+1688   	; 0x6f6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4a c3       	rjmp	.+1684   	; 0x6f6 <__bad_interrupt>
      62:	00 00       	nop
      64:	48 c3       	rjmp	.+1680   	; 0x6f6 <__bad_interrupt>
      66:	00 00       	nop
      68:	46 c3       	rjmp	.+1676   	; 0x6f6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	44 c3       	rjmp	.+1672   	; 0x6f6 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	ea e7       	ldi	r30, 0x7A	; 122
     6d4:	f6 e1       	ldi	r31, 0x16	; 22
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	aa 3a       	cpi	r26, 0xAA	; 170
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	aa ea       	ldi	r26, 0xAA	; 170
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	ae 3b       	cpi	r26, 0xBE	; 190
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	4c d3       	rcall	.+1688   	; 0xd8c <main>
     6f4:	c0 c7       	rjmp	.+3968   	; 0x1676 <_exit>

000006f6 <__bad_interrupt>:
     6f6:	84 cc       	rjmp	.-1784   	; 0x0 <__vectors>

000006f8 <adc_init>:
	int ans = atan(x/y);
	if (abs(x)<30 && abs(y)<30){
		ans = 0;
	}
	return ans;
}
     6f8:	84 e0       	ldi	r24, 0x04	; 4
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	90 93 ad 02 	sts	0x02AD, r25
     700:	80 93 ac 02 	sts	0x02AC, r24
     704:	08 95       	ret

00000706 <adc_joystick_direction>:

volatile int adc_read(uint8_t channel){
	if((channel <= 4 )&&( channel > 0)){
		volatile uint8_t *p = ADC_OFFSET;
		//p[0] = channel;
		*p = channel + 3;//+3
     706:	84 e0       	ldi	r24, 0x04	; 4
     708:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70c:	85 e3       	ldi	r24, 0x35	; 53
     70e:	8a 95       	dec	r24
     710:	f1 f7       	brne	.-4      	; 0x70e <adc_joystick_direction+0x8>
     712:	00 00       	nop
		_delay_us(160);
		//volatile uint8_t read = p[0];
		
		return *p;
     714:	e0 e0       	ldi	r30, 0x00	; 0
     716:	f4 e1       	ldi	r31, 0x14	; 20
     718:	40 81       	ld	r20, Z
     71a:	50 e0       	ldi	r21, 0x00	; 0
	}return ans;
}*/

int adc_joystick_direction(){
	int x = 0, y = 0;
	x = adc_read(1)-140;
     71c:	4c 58       	subi	r20, 0x8C	; 140
     71e:	51 09       	sbc	r21, r1

volatile int adc_read(uint8_t channel){
	if((channel <= 4 )&&( channel > 0)){
		volatile uint8_t *p = ADC_OFFSET;
		//p[0] = channel;
		*p = channel + 3;//+3
     720:	85 e0       	ldi	r24, 0x05	; 5
     722:	80 83       	st	Z, r24
     724:	85 e3       	ldi	r24, 0x35	; 53
     726:	8a 95       	dec	r24
     728:	f1 f7       	brne	.-4      	; 0x726 <adc_joystick_direction+0x20>
     72a:	00 00       	nop
		_delay_us(160);
		//volatile uint8_t read = p[0];
		
		return *p;
     72c:	20 91 00 14 	lds	r18, 0x1400
     730:	30 e0       	ldi	r19, 0x00	; 0
}*/

int adc_joystick_direction(){
	int x = 0, y = 0;
	x = adc_read(1)-140;
	y = adc_read(2)-140;
     732:	2c 58       	subi	r18, 0x8C	; 140
     734:	31 09       	sbc	r19, r1
	int ans = NEUTRAL;
	if (abs(x)<abs(y)){
     736:	ba 01       	movw	r22, r20
     738:	55 23       	and	r21, r21
     73a:	24 f4       	brge	.+8      	; 0x744 <adc_joystick_direction+0x3e>
     73c:	66 27       	eor	r22, r22
     73e:	77 27       	eor	r23, r23
     740:	64 1b       	sub	r22, r20
     742:	75 0b       	sbc	r23, r21
     744:	c9 01       	movw	r24, r18
     746:	33 23       	and	r19, r19
     748:	24 f4       	brge	.+8      	; 0x752 <adc_joystick_direction+0x4c>
     74a:	88 27       	eor	r24, r24
     74c:	99 27       	eor	r25, r25
     74e:	82 1b       	sub	r24, r18
     750:	93 0b       	sbc	r25, r19
     752:	68 17       	cp	r22, r24
     754:	79 07       	cpc	r23, r25
     756:	44 f4       	brge	.+16     	; 0x768 <adc_joystick_direction+0x62>
		if (y<0){
     758:	33 23       	and	r19, r19
     75a:	8c f0       	brlt	.+34     	; 0x77e <adc_joystick_direction+0x78>
			ans = DOWN;
		}else if(y>0){
     75c:	12 16       	cp	r1, r18
     75e:	13 06       	cpc	r1, r19
     760:	8c f0       	brlt	.+34     	; 0x784 <adc_joystick_direction+0x7e>

int adc_joystick_direction(){
	int x = 0, y = 0;
	x = adc_read(1)-140;
	y = adc_read(2)-140;
	int ans = NEUTRAL;
     762:	84 e0       	ldi	r24, 0x04	; 4
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	19 c0       	rjmp	.+50     	; 0x79a <adc_joystick_direction+0x94>
		if (y<0){
			ans = DOWN;
		}else if(y>0){
			ans = UP;
		}
	}else if (abs(y)<abs(x)){
     768:	86 17       	cp	r24, r22
     76a:	97 07       	cpc	r25, r23
     76c:	74 f4       	brge	.+28     	; 0x78a <adc_joystick_direction+0x84>
		if (x<0){
     76e:	55 23       	and	r21, r21
     770:	7c f0       	brlt	.+30     	; 0x790 <adc_joystick_direction+0x8a>
			ans = LEFT;
		}else if(x>0){
     772:	14 16       	cp	r1, r20
     774:	15 06       	cpc	r1, r21
     776:	7c f0       	brlt	.+30     	; 0x796 <adc_joystick_direction+0x90>

int adc_joystick_direction(){
	int x = 0, y = 0;
	x = adc_read(1)-140;
	y = adc_read(2)-140;
	int ans = NEUTRAL;
     778:	84 e0       	ldi	r24, 0x04	; 4
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e c0       	rjmp	.+28     	; 0x79a <adc_joystick_direction+0x94>
	if (abs(x)<abs(y)){
		if (y<0){
			ans = DOWN;
     77e:	83 e0       	ldi	r24, 0x03	; 3
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0b c0       	rjmp	.+22     	; 0x79a <adc_joystick_direction+0x94>
		}else if(y>0){
			ans = UP;
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	08 c0       	rjmp	.+16     	; 0x79a <adc_joystick_direction+0x94>

int adc_joystick_direction(){
	int x = 0, y = 0;
	x = adc_read(1)-140;
	y = adc_read(2)-140;
	int ans = NEUTRAL;
     78a:	84 e0       	ldi	r24, 0x04	; 4
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	05 c0       	rjmp	.+10     	; 0x79a <adc_joystick_direction+0x94>
		}else if(y>0){
			ans = UP;
		}
	}else if (abs(y)<abs(x)){
		if (x<0){
			ans = LEFT;
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	02 c0       	rjmp	.+4      	; 0x79a <adc_joystick_direction+0x94>
		}else if(x>0){
			ans = RIGHT;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	90 e0       	ldi	r25, 0x00	; 0
		}
	}if (abs(x)<30 && abs(y)<30){
     79a:	43 5e       	subi	r20, 0xE3	; 227
     79c:	5f 4f       	sbci	r21, 0xFF	; 255
     79e:	4b 33       	cpi	r20, 0x3B	; 59
     7a0:	51 05       	cpc	r21, r1
     7a2:	38 f4       	brcc	.+14     	; 0x7b2 <adc_joystick_direction+0xac>
     7a4:	23 5e       	subi	r18, 0xE3	; 227
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	2b 33       	cpi	r18, 0x3B	; 59
     7aa:	31 05       	cpc	r19, r1
     7ac:	10 f4       	brcc	.+4      	; 0x7b2 <adc_joystick_direction+0xac>
		ans = NEUTRAL;
     7ae:	84 e0       	ldi	r24, 0x04	; 4
     7b0:	90 e0       	ldi	r25, 0x00	; 0
	}
	return ans;
}
     7b2:	08 95       	ret

000007b4 <adc_joy_pos_changed>:

int adc_joy_pos_changed(){
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
	int ans = 0;
	int previous_joy_adc_direction = joy_adc_direction;
     7b8:	c0 91 ac 02 	lds	r28, 0x02AC
     7bc:	d0 91 ad 02 	lds	r29, 0x02AD
	joy_adc_direction = adc_joystick_direction();
     7c0:	a2 df       	rcall	.-188    	; 0x706 <adc_joystick_direction>
     7c2:	90 93 ad 02 	sts	0x02AD, r25
     7c6:	80 93 ac 02 	sts	0x02AC, r24
	/*printf("in adc joy pos changed \n \r");
	printf("previous joy adc %d \n \r", previous_joy_adc_direction);
	printf("joy adc direction %d \n \r", joy_adc_direction);*/
	
	if(previous_joy_adc_direction == joy_adc_direction){
     7ca:	c8 17       	cp	r28, r24
     7cc:	d9 07       	cpc	r29, r25
     7ce:	11 f4       	brne	.+4      	; 0x7d4 <adc_joy_pos_changed+0x20>
		ans = 5;
     7d0:	85 e0       	ldi	r24, 0x05	; 5
     7d2:	90 e0       	ldi	r25, 0x00	; 0
	else{
		ans = joy_adc_direction;
	}
	//printf("answer % d \n \r \n \r", ans);
	return ans;
}
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <can_init>:


// "Main" for using can:

void can_init()
{
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	2a 97       	sbiw	r28, 0x0a	; 10
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
	mcp2515_init(); //Init
     7ee:	a4 d0       	rcall	.+328    	; 0x938 <mcp2515_init>
	
	
	mcp2515_write(MCP_RXB0CTRL, MCP_RXBnCTRL_NOFILTER_bm, 1); // Set to no filter
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	60 e6       	ldi	r22, 0x60	; 96
     7f4:	80 e6       	ldi	r24, 0x60	; 96
     7f6:	c1 d0       	rcall	.+386    	; 0x97a <mcp2515_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f8:	8f ef       	ldi	r24, 0xFF	; 255
     7fa:	9f e8       	ldi	r25, 0x8F	; 143
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <can_init+0x22>
     800:	00 c0       	rjmp	.+0      	; 0x802 <can_init+0x28>
     802:	00 00       	nop
	_delay_ms(30);
	
	mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 1); // Enable Interrupt when message is received
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	8b e2       	ldi	r24, 0x2B	; 43
     80a:	de d0       	rcall	.+444    	; 0x9c8 <mcp2515_bit_modify>
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	9f e8       	ldi	r25, 0x8F	; 143
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <can_init+0x36>
     814:	00 c0       	rjmp	.+0      	; 0x816 <can_init+0x3c>
     816:	00 00       	nop
	_delay_ms(30);

	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);//0b11100000 instead of MODE_MASK
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	60 ee       	ldi	r22, 0xE0	; 224
     81c:	8f e0       	ldi	r24, 0x0F	; 15
     81e:	d4 d0       	rcall	.+424    	; 0x9c8 <mcp2515_bit_modify>
     820:	8f ef       	ldi	r24, 0xFF	; 255
     822:	9f e8       	ldi	r25, 0x8F	; 143
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <can_init+0x4a>
     828:	00 c0       	rjmp	.+0      	; 0x82a <can_init+0x50>
     82a:	00 00       	nop
	_delay_ms(30);
	
	uint8_t mode_bits;
	uint8_t data[MAX_CAN_LENGTH];
	mcp2515_read(MCP_CANSTAT, data, MAX_CAN_LENGTH);
     82c:	4a e0       	ldi	r20, 0x0A	; 10
     82e:	be 01       	movw	r22, r28
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	8e e0       	ldi	r24, 0x0E	; 14
     836:	83 d0       	rcall	.+262    	; 0x93e <mcp2515_read>
	uint8_t val = data[0];
	
	mode_bits = (val & MODE_MASK);
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	80 7e       	andi	r24, 0xE0	; 224
	if(mode_bits != MODE_NORMAL){
     83c:	99 f0       	breq	.+38     	; 0x864 <can_init+0x8a>
		
		printf("MCP2515 is NOT in correct mode after reset! Its config bits are %x\n", mode_bits);
     83e:	1f 92       	push	r1
     840:	8f 93       	push	r24
     842:	86 e0       	ldi	r24, 0x06	; 6
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	1c d3       	rcall	.+1592   	; 0xe84 <printf>
		printf("\n\r");
     84c:	87 ea       	ldi	r24, 0xA7	; 167
     84e:	92 e0       	ldi	r25, 0x02	; 2
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	17 d3       	rcall	.+1582   	; 0xe84 <printf>
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	07 c0       	rjmp	.+14     	; 0x872 <can_init+0x98>
	}
	else
	printf("in mode normal \n\r");
     864:	8a e4       	ldi	r24, 0x4A	; 74
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	9f 93       	push	r25
     86a:	8f 93       	push	r24
     86c:	0b d3       	rcall	.+1558   	; 0xe84 <printf>
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
	
}
     872:	2a 96       	adiw	r28, 0x0a	; 10
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <can_message_send>:

void can_message_send(struct can_message* msg)
{
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	8c 01       	movw	r16, r24

	mcp2515_write(MCP_TXB0DLC, msg->length, 1);
     894:	41 e0       	ldi	r20, 0x01	; 1
     896:	fc 01       	movw	r30, r24
     898:	62 81       	ldd	r22, Z+2	; 0x02
     89a:	85 e3       	ldi	r24, 0x35	; 53
     89c:	6e d0       	rcall	.+220    	; 0x97a <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
     89e:	41 e0       	ldi	r20, 0x01	; 1
     8a0:	f8 01       	movw	r30, r16
     8a2:	60 81       	ld	r22, Z
     8a4:	81 e3       	ldi	r24, 0x31	; 49
     8a6:	69 d0       	rcall	.+210    	; 0x97a <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, msg->id, 1);
     8a8:	41 e0       	ldi	r20, 0x01	; 1
     8aa:	f8 01       	movw	r30, r16
     8ac:	60 81       	ld	r22, Z
     8ae:	82 e3       	ldi	r24, 0x32	; 50
     8b0:	64 d0       	rcall	.+200    	; 0x97a <mcp2515_write>
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
     8b2:	f8 01       	movw	r30, r16
     8b4:	82 81       	ldd	r24, Z+2	; 0x02
     8b6:	88 23       	and	r24, r24
     8b8:	e9 f0       	breq	.+58     	; 0x8f4 <can_message_send+0x70>
     8ba:	d1 2c       	mov	r13, r1
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
		printf("can message send %d", msg->data[i]);
     8bc:	0f 2e       	mov	r0, r31
     8be:	fc e5       	ldi	r31, 0x5C	; 92
     8c0:	ef 2e       	mov	r14, r31
     8c2:	f1 e0       	ldi	r31, 0x01	; 1
     8c4:	ff 2e       	mov	r15, r31
     8c6:	f0 2d       	mov	r31, r0
	mcp2515_write(MCP_TXB0SIDL, msg->id, 1);
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
     8c8:	e8 01       	movw	r28, r16
     8ca:	cd 0d       	add	r28, r13
     8cc:	d1 1d       	adc	r29, r1
     8ce:	41 e0       	ldi	r20, 0x01	; 1
     8d0:	6b 81       	ldd	r22, Y+3	; 0x03
     8d2:	86 e3       	ldi	r24, 0x36	; 54
     8d4:	52 d0       	rcall	.+164    	; 0x97a <mcp2515_write>
		printf("can message send %d", msg->data[i]);
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	1f 92       	push	r1
     8da:	8f 93       	push	r24
     8dc:	ff 92       	push	r15
     8de:	ef 92       	push	r14
     8e0:	d1 d2       	rcall	.+1442   	; 0xe84 <printf>
	mcp2515_write(MCP_TXB0DLC, msg->length, 1);
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
	mcp2515_write(MCP_TXB0SIDL, msg->id, 1);
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
     8e2:	d3 94       	inc	r13
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	f8 01       	movw	r30, r16
     8ee:	82 81       	ldd	r24, Z+2	; 0x02
     8f0:	d8 16       	cp	r13, r24
     8f2:	50 f3       	brcs	.-44     	; 0x8c8 <can_message_send+0x44>
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
		printf("can message send %d", msg->data[i]);
	}
	printf("\n\r");
     8f4:	87 ea       	ldi	r24, 0xA7	; 167
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	9f 93       	push	r25
     8fa:	8f 93       	push	r24
     8fc:	c3 d2       	rcall	.+1414   	; 0xe84 <printf>
	mcp2515_request(MCP_RTS_TX0);
     8fe:	81 e8       	ldi	r24, 0x81	; 129
     900:	53 d0       	rcall	.+166    	; 0x9a8 <mcp2515_request>
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
	//Do something...
}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	08 95       	ret

00000916 <mcp2515_reset>:
	 spi_init();
	 mcp2515_reset();
}

void mcp2515_reset()
{
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	1f 92       	push	r1
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     920:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);	
	
	uint8_t reset[] = {MCP_RESET};
     922:	80 ec       	ldi	r24, 0xC0	; 192
     924:	89 83       	std	Y+1, r24	; 0x01
	spi_write(reset, 1);
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	ce 01       	movw	r24, r28
     92a:	01 96       	adiw	r24, 0x01	; 1
     92c:	01 d2       	rcall	.+1026   	; 0xd30 <spi_write>
	
	PORTB |= (1<<PINB4); // DeselectCAN-controller
     92e:	c4 9a       	sbi	0x18, 4	; 24
}
     930:	0f 90       	pop	r0
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <mcp2515_init>:
#include "MCP2515_driver.h"


void mcp2515_init() 
{
	 spi_init();
     938:	d0 d1       	rcall	.+928    	; 0xcda <spi_init>
	 mcp2515_reset();
     93a:	ed cf       	rjmp	.-38     	; 0x916 <mcp2515_reset>
     93c:	08 95       	ret

0000093e <mcp2515_read>:
	
	PORTB |= (1<<PINB4); // DeselectCAN-controller
}

void mcp2515_read(uint8_t address, uint8_t result[MAX_CAN_LENGTH], uint8_t data_size)
{	
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	00 d0       	rcall	.+0      	; 0x94a <mcp2515_read+0xc>
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	8b 01       	movw	r16, r22
     950:	f4 2e       	mov	r15, r20
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     952:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);
	
	uint8_t write[] = {MCP_READ, address};
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	99 83       	std	Y+1, r25	; 0x01
     958:	8a 83       	std	Y+2, r24	; 0x02
	spi_write(write, 2); // Send read instruction
     95a:	62 e0       	ldi	r22, 0x02	; 2
     95c:	ce 01       	movw	r24, r28
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	e7 d1       	rcall	.+974    	; 0xd30 <spi_write>
	
	spi_read(result, data_size); // Readresult
     962:	6f 2d       	mov	r22, r15
     964:	c8 01       	movw	r24, r16
     966:	bf d1       	rcall	.+894    	; 0xce6 <spi_read>
	
	PORTB |= (1<<PINB4); // DeselectCAN-controller
     968:	c4 9a       	sbi	0x18, 4	; 24
	
	
}
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	08 95       	ret

0000097a <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data, uint8_t data_size)
{
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	00 d0       	rcall	.+0      	; 0x980 <mcp2515_write+0x6>
     980:	1f 92       	push	r1
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     986:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);
	
	uint8_t write[] = {MCP_WRITE, address, data};
     988:	92 e0       	ldi	r25, 0x02	; 2
     98a:	99 83       	std	Y+1, r25	; 0x01
     98c:	8a 83       	std	Y+2, r24	; 0x02
     98e:	6b 83       	std	Y+3, r22	; 0x03
	spi_write(write, data_size + 2); // Send read instruction
     990:	62 e0       	ldi	r22, 0x02	; 2
     992:	64 0f       	add	r22, r20
     994:	ce 01       	movw	r24, r28
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	cb d1       	rcall	.+918    	; 0xd30 <spi_write>
	
	PORTB |= (1<<PINB4); // DeselectCAN-controller
     99a:	c4 9a       	sbi	0x18, 4	; 24
		
}
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <mcp2515_request>:

void mcp2515_request(uint8_t rqs)
{
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	1f 92       	push	r1
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     9b2:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);		
		
	uint8_t cmd[] = {rqs};
     9b4:	89 83       	std	Y+1, r24	; 0x01
	spi_write(cmd, 1);		
     9b6:	61 e0       	ldi	r22, 0x01	; 1
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	b9 d1       	rcall	.+882    	; 0xd30 <spi_write>
	
	PORTB |= (1<<PINB4); // Deselect CAN-controller
     9be:	c4 9a       	sbi	0x18, 4	; 24
}
     9c0:	0f 90       	pop	r0
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <mcp2515_bit_modify>:

// Modify bits in the register / See datasheet 12.10
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) 
{
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	00 d0       	rcall	.+0      	; 0x9ce <mcp2515_bit_modify+0x6>
     9ce:	00 d0       	rcall	.+0      	; 0x9d0 <mcp2515_bit_modify+0x8>
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     9d4:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);	
	
	uint8_t bit_list[] = {MCP_BITMOD, address, mask, data};
     9d6:	95 e0       	ldi	r25, 0x05	; 5
     9d8:	99 83       	std	Y+1, r25	; 0x01
     9da:	8a 83       	std	Y+2, r24	; 0x02
     9dc:	6b 83       	std	Y+3, r22	; 0x03
     9de:	4c 83       	std	Y+4, r20	; 0x04
	spi_write(bit_list, 4);	
     9e0:	64 e0       	ldi	r22, 0x04	; 4
     9e2:	ce 01       	movw	r24, r28
     9e4:	01 96       	adiw	r24, 0x01	; 1
     9e6:	a4 d1       	rcall	.+840    	; 0xd30 <spi_write>
	
	PORTB |= (1<<PINB4); //Deselect CAN-controller
     9e8:	c4 9a       	sbi	0x18, 4	; 24

}
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <oled_columb_range_select>:
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     9f8:	91 e2       	ldi	r25, 0x21	; 33
     9fa:	90 93 00 10 	sts	0x1000, r25
	//oled_display_activity();
}

void oled_columb_range_select(uint8_t start, uint8_t end) {
	oled_write_c(OLED_COLUMB_SET);
	if (start < OLED_COLUMBS) {
     9fe:	88 23       	and	r24, r24
     a00:	1c f0       	brlt	.+6      	; 0xa08 <oled_columb_range_select+0x10>
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     a02:	80 93 00 10 	sts	0x1000, r24
     a06:	03 c0       	rjmp	.+6      	; 0xa0e <oled_columb_range_select+0x16>
     a08:	8f e7       	ldi	r24, 0x7F	; 127
     a0a:	80 93 00 10 	sts	0x1000, r24
		oled_write_c(start);
		} else {
		oled_write_c(OLED_COLUMBS - 1);
	}

	if (end < OLED_COLUMBS) {
     a0e:	66 23       	and	r22, r22
     a10:	1c f0       	brlt	.+6      	; 0xa18 <oled_columb_range_select+0x20>
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     a12:	60 93 00 10 	sts	0x1000, r22
     a16:	08 95       	ret
     a18:	8f e7       	ldi	r24, 0x7F	; 127
     a1a:	80 93 00 10 	sts	0x1000, r24
     a1e:	08 95       	ret

00000a20 <oled_page_select>:
     a20:	92 e2       	ldi	r25, 0x22	; 34
     a22:	90 93 00 10 	sts	0x1000, r25
	}
}

void oled_page_select(uint8_t page) {
	oled_write_c(OLED_PAGE_SET);
	if (page < OLED_PAGES) {
     a26:	88 30       	cpi	r24, 0x08	; 8
     a28:	28 f4       	brcc	.+10     	; 0xa34 <oled_page_select+0x14>
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     a2a:	e0 e0       	ldi	r30, 0x00	; 0
     a2c:	f0 e1       	ldi	r31, 0x10	; 16
     a2e:	80 83       	st	Z, r24
     a30:	80 83       	st	Z, r24
     a32:	08 95       	ret
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e1       	ldi	r31, 0x10	; 16
     a38:	87 e0       	ldi	r24, 0x07	; 7
     a3a:	80 83       	st	Z, r24
     a3c:	80 83       	st	Z, r24
     a3e:	08 95       	ret

00000a40 <oled_clear_page>:
		oled_write_c(OLED_PAGES - 1);
	}
}

void oled_clear_page(uint8_t page) {
	if (page < OLED_PAGES) {
     a40:	88 30       	cpi	r24, 0x08	; 8
     a42:	60 f4       	brcc	.+24     	; 0xa5c <oled_clear_page+0x1c>
		oled_page_select(page);
     a44:	ed df       	rcall	.-38     	; 0xa20 <oled_page_select>
		oled_columb_range_select(0, OLED_COLUMBS - 1);
     a46:	6f e7       	ldi	r22, 0x7F	; 127
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	d6 df       	rcall	.-84     	; 0x9f8 <oled_columb_range_select>
     a4c:	80 e8       	ldi	r24, 0x80	; 128
     a4e:	90 e0       	ldi	r25, 0x00	; 0
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     a50:	e0 e0       	ldi	r30, 0x00	; 0
     a52:	f2 e1       	ldi	r31, 0x12	; 18
     a54:	10 82       	st	Z, r1
     a56:	01 97       	sbiw	r24, 0x01	; 1

void oled_clear_page(uint8_t page) {
	if (page < OLED_PAGES) {
		oled_page_select(page);
		oled_columb_range_select(0, OLED_COLUMBS - 1);
		for (int i = 0; i < OLED_COLUMBS; i++) {
     a58:	00 97       	sbiw	r24, 0x00	; 0
     a5a:	e1 f7       	brne	.-8      	; 0xa54 <oled_clear_page+0x14>
     a5c:	08 95       	ret

00000a5e <oled_clear_screen>:
			oled_write_data(0x00);
		}
	}
}

void oled_clear_screen() {
     a5e:	cf 93       	push	r28
     a60:	c0 e0       	ldi	r28, 0x00	; 0
	for (int i = 0; i < OLED_PAGES; i++) {
		oled_clear_page(i);
     a62:	8c 2f       	mov	r24, r28
     a64:	ed df       	rcall	.-38     	; 0xa40 <oled_clear_page>
     a66:	cf 5f       	subi	r28, 0xFF	; 255
		}
	}
}

void oled_clear_screen() {
	for (int i = 0; i < OLED_PAGES; i++) {
     a68:	c8 30       	cpi	r28, 0x08	; 8
     a6a:	d9 f7       	brne	.-10     	; 0xa62 <oled_clear_screen+0x4>
		oled_clear_page(i);
	}
}
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <oled_init>:
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e1       	ldi	r31, 0x10	; 16
     a74:	8e ea       	ldi	r24, 0xAE	; 174
     a76:	80 83       	st	Z, r24
     a78:	81 ea       	ldi	r24, 0xA1	; 161
     a7a:	80 83       	st	Z, r24
     a7c:	8a ed       	ldi	r24, 0xDA	; 218
     a7e:	80 83       	st	Z, r24
     a80:	82 e1       	ldi	r24, 0x12	; 18
     a82:	80 83       	st	Z, r24
     a84:	88 ec       	ldi	r24, 0xC8	; 200
     a86:	80 83       	st	Z, r24
     a88:	88 ea       	ldi	r24, 0xA8	; 168
     a8a:	80 83       	st	Z, r24
     a8c:	8f e3       	ldi	r24, 0x3F	; 63
     a8e:	80 83       	st	Z, r24
     a90:	85 ed       	ldi	r24, 0xD5	; 213
     a92:	80 83       	st	Z, r24
     a94:	80 e8       	ldi	r24, 0x80	; 128
     a96:	80 83       	st	Z, r24
     a98:	81 e8       	ldi	r24, 0x81	; 129
     a9a:	80 83       	st	Z, r24
     a9c:	80 e5       	ldi	r24, 0x50	; 80
     a9e:	80 83       	st	Z, r24
     aa0:	89 ed       	ldi	r24, 0xD9	; 217
     aa2:	80 83       	st	Z, r24
     aa4:	81 e2       	ldi	r24, 0x21	; 33
     aa6:	80 83       	st	Z, r24
     aa8:	80 e2       	ldi	r24, 0x20	; 32
     aaa:	80 83       	st	Z, r24
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	80 83       	st	Z, r24
     ab0:	8b ed       	ldi	r24, 0xDB	; 219
     ab2:	80 83       	st	Z, r24
     ab4:	80 e3       	ldi	r24, 0x30	; 48
     ab6:	80 83       	st	Z, r24
     ab8:	8d ea       	ldi	r24, 0xAD	; 173
     aba:	80 83       	st	Z, r24
     abc:	10 82       	st	Z, r1
     abe:	84 ea       	ldi	r24, 0xA4	; 164
     ac0:	80 83       	st	Z, r24
     ac2:	86 ea       	ldi	r24, 0xA6	; 166
     ac4:	80 83       	st	Z, r24
     ac6:	8f ea       	ldi	r24, 0xAF	; 175
     ac8:	80 83       	st	Z, r24
	oled_write_c(0xad);	//master configuration
	oled_write_c(0x00);
	oled_write_c(0xa4);	//out follows RAM content
	oled_write_c(0xa6);	//set normal display
	oled_write_c(0xaf);	//display on
	oled_clear_screen();
     aca:	c9 df       	rcall	.-110    	; 0xa5e <oled_clear_screen>
	//current_activity = &oled_main;
	joy_pos = 0;
     acc:	10 92 b3 03 	sts	0x03B3, r1
     ad0:	10 92 b2 03 	sts	0x03B2, r1
	//oled_display_activity();
}
     ad4:	08 95       	ret

00000ad6 <oled_print_char_of_size>:
}

void oled_print_char_of_size(char letter, uint8_t size) {
	uint8_t char_length = 0;
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
     ad6:	62 30       	cpi	r22, 0x02	; 2
     ad8:	41 f4       	brne	.+16     	; 0xaea <oled_print_char_of_size+0x14>
		char_length = 4;
		letter_bitmap = font4[letter - ' '];
     ada:	94 e0       	ldi	r25, 0x04	; 4
     adc:	89 02       	muls	r24, r25
     ade:	a0 01       	movw	r20, r0
     ae0:	11 24       	eor	r1, r1
     ae2:	40 51       	subi	r20, 0x10	; 16
     ae4:	50 40       	sbci	r21, 0x00	; 0

void oled_print_char_of_size(char letter, uint8_t size) {
	uint8_t char_length = 0;
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
		char_length = 4;
     ae6:	24 e0       	ldi	r18, 0x04	; 4
     ae8:	25 c0       	rjmp	.+74     	; 0xb34 <oled_print_char_of_size+0x5e>
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
     aea:	61 30       	cpi	r22, 0x01	; 1
     aec:	89 f4       	brne	.+34     	; 0xb10 <oled_print_char_of_size+0x3a>
		char_length = 5;
		letter_bitmap = font5[letter - ' '];
     aee:	48 2f       	mov	r20, r24
     af0:	55 27       	eor	r21, r21
     af2:	47 fd       	sbrc	r20, 7
     af4:	50 95       	com	r21
     af6:	40 52       	subi	r20, 0x20	; 32
     af8:	51 09       	sbc	r21, r1
     afa:	ca 01       	movw	r24, r20
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	48 0f       	add	r20, r24
     b06:	59 1f       	adc	r21, r25
     b08:	44 51       	subi	r20, 0x14	; 20
     b0a:	5e 4f       	sbci	r21, 0xFE	; 254
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
		char_length = 4;
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
		char_length = 5;
     b0c:	25 e0       	ldi	r18, 0x05	; 5
     b0e:	12 c0       	rjmp	.+36     	; 0xb34 <oled_print_char_of_size+0x5e>
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
		letter_bitmap = font8[letter - ' '];
     b10:	98 e0       	ldi	r25, 0x08	; 8
     b12:	89 02       	muls	r24, r25
     b14:	a0 01       	movw	r20, r0
     b16:	11 24       	eor	r1, r1
     b18:	49 53       	subi	r20, 0x39	; 57
     b1a:	5d 4f       	sbci	r21, 0xFD	; 253
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
		char_length = 5;
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
     b1c:	28 e0       	ldi	r18, 0x08	; 8
     b1e:	0a c0       	rjmp	.+20     	; 0xb34 <oled_print_char_of_size+0x5e>
     b20:	fa 01       	movw	r30, r20
     b22:	e8 0f       	add	r30, r24
     b24:	f9 1f       	adc	r31, r25
		letter_bitmap = font8[letter - ' '];
	}
	for (int i = 0; i < char_length; i++) {
      oled_write_data(pgm_read_byte(&(letter_bitmap[i])));
     b26:	e4 91       	lpm	r30, Z
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     b28:	ec 93       	st	X, r30
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
		letter_bitmap = font8[letter - ' '];
	}
	for (int i = 0; i < char_length; i++) {
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	82 17       	cp	r24, r18
     b2e:	93 07       	cpc	r25, r19
     b30:	bc f3       	brlt	.-18     	; 0xb20 <oled_print_char_of_size+0x4a>
     b32:	08 95       	ret
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b2 e1       	ldi	r27, 0x12	; 18
     b3e:	f0 cf       	rjmp	.-32     	; 0xb20 <oled_print_char_of_size+0x4a>

00000b40 <oled_print_char_of_size_inverted>:
}

void oled_print_char_of_size_inverted(char letter, uint8_t size) {
	uint8_t char_length = 0;
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
     b40:	62 30       	cpi	r22, 0x02	; 2
     b42:	41 f4       	brne	.+16     	; 0xb54 <oled_print_char_of_size_inverted+0x14>
		char_length = 4;
		letter_bitmap = font4[letter - ' '];
     b44:	94 e0       	ldi	r25, 0x04	; 4
     b46:	89 02       	muls	r24, r25
     b48:	a0 01       	movw	r20, r0
     b4a:	11 24       	eor	r1, r1
     b4c:	40 51       	subi	r20, 0x10	; 16
     b4e:	50 40       	sbci	r21, 0x00	; 0

void oled_print_char_of_size_inverted(char letter, uint8_t size) {
	uint8_t char_length = 0;
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
		char_length = 4;
     b50:	24 e0       	ldi	r18, 0x04	; 4
     b52:	26 c0       	rjmp	.+76     	; 0xba0 <oled_print_char_of_size_inverted+0x60>
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
     b54:	61 30       	cpi	r22, 0x01	; 1
     b56:	89 f4       	brne	.+34     	; 0xb7a <oled_print_char_of_size_inverted+0x3a>
		char_length = 5;
		letter_bitmap = font5[letter - ' '];
     b58:	48 2f       	mov	r20, r24
     b5a:	55 27       	eor	r21, r21
     b5c:	47 fd       	sbrc	r20, 7
     b5e:	50 95       	com	r21
     b60:	40 52       	subi	r20, 0x20	; 32
     b62:	51 09       	sbc	r21, r1
     b64:	ca 01       	movw	r24, r20
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	48 0f       	add	r20, r24
     b70:	59 1f       	adc	r21, r25
     b72:	44 51       	subi	r20, 0x14	; 20
     b74:	5e 4f       	sbci	r21, 0xFE	; 254
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
		char_length = 4;
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
		char_length = 5;
     b76:	25 e0       	ldi	r18, 0x05	; 5
     b78:	13 c0       	rjmp	.+38     	; 0xba0 <oled_print_char_of_size_inverted+0x60>
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
		letter_bitmap = font8[letter - ' '];
     b7a:	98 e0       	ldi	r25, 0x08	; 8
     b7c:	89 02       	muls	r24, r25
     b7e:	a0 01       	movw	r20, r0
     b80:	11 24       	eor	r1, r1
     b82:	49 53       	subi	r20, 0x39	; 57
     b84:	5d 4f       	sbci	r21, 0xFD	; 253
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
		char_length = 5;
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
     b86:	28 e0       	ldi	r18, 0x08	; 8
     b88:	0b c0       	rjmp	.+22     	; 0xba0 <oled_print_char_of_size_inverted+0x60>
     b8a:	fa 01       	movw	r30, r20
     b8c:	e8 0f       	add	r30, r24
     b8e:	f9 1f       	adc	r31, r25
		letter_bitmap = font8[letter - ' '];
	}
	for (int i = 0; i < char_length; i++) {
      oled_write_data(~pgm_read_byte(&(letter_bitmap[i])));
     b90:	e4 91       	lpm	r30, Z
     b92:	e0 95       	com	r30
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     b94:	ec 93       	st	X, r30
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
		letter_bitmap = font8[letter - ' '];
	}
	for (int i = 0; i < char_length; i++) {
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	82 17       	cp	r24, r18
     b9a:	93 07       	cpc	r25, r19
     b9c:	b4 f3       	brlt	.-20     	; 0xb8a <oled_print_char_of_size_inverted+0x4a>
     b9e:	08 95       	ret
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     ba6:	a0 e0       	ldi	r26, 0x00	; 0
     ba8:	b2 e1       	ldi	r27, 0x12	; 18
     baa:	ef cf       	rjmp	.-34     	; 0xb8a <oled_print_char_of_size_inverted+0x4a>

00000bac <oled_print_char>:

uint8_t printf_page = 0;
uint8_t printf_size = 0;

uint8_t oled_print_char(char letter) {
	if (letter == '\n') {
     bac:	8a 30       	cpi	r24, 0x0A	; 10
     bae:	51 f4       	brne	.+20     	; 0xbc4 <oled_print_char+0x18>
		printf_page += 1;
     bb0:	80 91 ab 02 	lds	r24, 0x02AB
     bb4:	8f 5f       	subi	r24, 0xFF	; 255
     bb6:	80 93 ab 02 	sts	0x02AB, r24
		oled_page_select(printf_page);
     bba:	32 df       	rcall	.-412    	; 0xa20 <oled_page_select>
		oled_columb_range_select(0, OLED_COLUMBS);
     bbc:	60 e8       	ldi	r22, 0x80	; 128
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	1b df       	rcall	.-458    	; 0x9f8 <oled_columb_range_select>
     bc2:	03 c0       	rjmp	.+6      	; 0xbca <oled_print_char+0x1e>
		} else {
		oled_print_char_of_size(letter, printf_size);
     bc4:	60 91 aa 02 	lds	r22, 0x02AA
     bc8:	86 df       	rcall	.-244    	; 0xad6 <oled_print_char_of_size>
		uint8_t columb_adder = 0;
	}
	return 0;
}
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	08 95       	ret

00000bce <oled_print_char_inverted>:

uint8_t oled_print_char_inverted(char letter) {
	if (letter == '\n') {
     bce:	8a 30       	cpi	r24, 0x0A	; 10
     bd0:	51 f4       	brne	.+20     	; 0xbe6 <oled_print_char_inverted+0x18>
		printf_page += 1;
     bd2:	80 91 ab 02 	lds	r24, 0x02AB
     bd6:	8f 5f       	subi	r24, 0xFF	; 255
     bd8:	80 93 ab 02 	sts	0x02AB, r24
		oled_page_select(printf_page);
     bdc:	21 df       	rcall	.-446    	; 0xa20 <oled_page_select>
		oled_columb_range_select(0, OLED_COLUMBS);
     bde:	60 e8       	ldi	r22, 0x80	; 128
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	0a df       	rcall	.-492    	; 0x9f8 <oled_columb_range_select>
     be4:	03 c0       	rjmp	.+6      	; 0xbec <oled_print_char_inverted+0x1e>
	} else {
		oled_print_char_of_size_inverted(letter, printf_size);
     be6:	60 91 aa 02 	lds	r22, 0x02AA
     bea:	aa df       	rcall	.-172    	; 0xb40 <oled_print_char_of_size_inverted>
		uint8_t columb_adder = 0;
	}
	return 0;
}
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	08 95       	ret

00000bf0 <oled_printf>:

void oled_printf(char text[]){
     bf0:	ef 92       	push	r14
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
	int lenght = strlen(text);
     bfc:	fc 01       	movw	r30, r24
     bfe:	01 90       	ld	r0, Z+
     c00:	00 20       	and	r0, r0
     c02:	e9 f7       	brne	.-6      	; 0xbfe <oled_printf+0xe>
     c04:	31 97       	sbiw	r30, 0x01	; 1
     c06:	7f 01       	movw	r14, r30
     c08:	e8 1a       	sub	r14, r24
     c0a:	f9 0a       	sbc	r15, r25
	//printf("size =  %d \r\n", lenght);
	for (int c = 0; c<lenght; c++){
     c0c:	1e 14       	cp	r1, r14
     c0e:	1f 04       	cpc	r1, r15
     c10:	5c f4       	brge	.+22     	; 0xc28 <oled_printf+0x38>
     c12:	8c 01       	movw	r16, r24
     c14:	c0 e0       	ldi	r28, 0x00	; 0
     c16:	d0 e0       	ldi	r29, 0x00	; 0
		//printf("letter =  %d \r\n", c);
		oled_print_char(text[c]);
     c18:	f8 01       	movw	r30, r16
     c1a:	81 91       	ld	r24, Z+
     c1c:	8f 01       	movw	r16, r30
     c1e:	c6 df       	rcall	.-116    	; 0xbac <oled_print_char>
}

void oled_printf(char text[]){
	int lenght = strlen(text);
	//printf("size =  %d \r\n", lenght);
	for (int c = 0; c<lenght; c++){
     c20:	21 96       	adiw	r28, 0x01	; 1
     c22:	ec 16       	cp	r14, r28
     c24:	fd 06       	cpc	r15, r29
     c26:	c1 f7       	brne	.-16     	; 0xc18 <oled_printf+0x28>
		//printf("letter =  %d \r\n", c);
		oled_print_char(text[c]);
	}
}
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	08 95       	ret

00000c36 <oled_printf_inverted>:

void oled_printf_inverted(char text[]){
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
	int lenght = strlen(text);
     c42:	fc 01       	movw	r30, r24
     c44:	01 90       	ld	r0, Z+
     c46:	00 20       	and	r0, r0
     c48:	e9 f7       	brne	.-6      	; 0xc44 <oled_printf_inverted+0xe>
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	7f 01       	movw	r14, r30
     c4e:	e8 1a       	sub	r14, r24
     c50:	f9 0a       	sbc	r15, r25
	//printf("size =  %d \r\n", lenght);
	for (int c = 0; c<lenght; c++){
     c52:	1e 14       	cp	r1, r14
     c54:	1f 04       	cpc	r1, r15
     c56:	5c f4       	brge	.+22     	; 0xc6e <oled_printf_inverted+0x38>
     c58:	8c 01       	movw	r16, r24
     c5a:	c0 e0       	ldi	r28, 0x00	; 0
     c5c:	d0 e0       	ldi	r29, 0x00	; 0
		//printf("letter =  %d \r\n", c);
		oled_print_char_inverted(text[c]);
     c5e:	f8 01       	movw	r30, r16
     c60:	81 91       	ld	r24, Z+
     c62:	8f 01       	movw	r16, r30
     c64:	b4 df       	rcall	.-152    	; 0xbce <oled_print_char_inverted>
}

void oled_printf_inverted(char text[]){
	int lenght = strlen(text);
	//printf("size =  %d \r\n", lenght);
	for (int c = 0; c<lenght; c++){
     c66:	21 96       	adiw	r28, 0x01	; 1
     c68:	ec 16       	cp	r14, r28
     c6a:	fd 06       	cpc	r15, r29
     c6c:	c1 f7       	brne	.-16     	; 0xc5e <oled_printf_inverted+0x28>
		//printf("letter =  %d \r\n", c);
		oled_print_char_inverted(text[c]);
	}
}
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	08 95       	ret

00000c7c <oled_display_activity>:

void oled_display_activity(){
	oled_clear_screen();
     c7c:	f0 de       	rcall	.-544    	; 0xa5e <oled_clear_screen>
		if(joy_pos == i)
			oled_printf_inverted(current_activity->oled_string[i]);
		else
			oled_printf(current_activity->oled_string[i]);
	}*/
	oled_page_select(1);
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	cf de       	rcall	.-610    	; 0xa20 <oled_page_select>
	if(joy_pos == 0)
     c82:	80 91 b2 03 	lds	r24, 0x03B2
     c86:	90 91 b3 03 	lds	r25, 0x03B3
     c8a:	89 2b       	or	r24, r25
     c8c:	21 f4       	brne	.+8      	; 0xc96 <oled_display_activity+0x1a>
		oled_printf_inverted("Spring \n");
     c8e:	8b e9       	ldi	r24, 0x9B	; 155
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	d1 df       	rcall	.-94     	; 0xc36 <oled_printf_inverted>
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <oled_display_activity+0x20>
	else
		oled_printf("Spring \n");
     c96:	8b e9       	ldi	r24, 0x9B	; 155
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	aa df       	rcall	.-172    	; 0xbf0 <oled_printf>
	
	oled_page_select(2);
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	c0 de       	rcall	.-640    	; 0xa20 <oled_page_select>
	if(joy_pos == 1)
     ca0:	80 91 b2 03 	lds	r24, 0x03B2
     ca4:	90 91 b3 03 	lds	r25, 0x03B3
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	21 f4       	brne	.+8      	; 0xcb4 <oled_display_activity+0x38>
		oled_printf_inverted("Summer \n");
     cac:	84 ea       	ldi	r24, 0xA4	; 164
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	c2 df       	rcall	.-124    	; 0xc36 <oled_printf_inverted>
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <oled_display_activity+0x3e>
	else
		oled_printf("Summer \n");
     cb4:	84 ea       	ldi	r24, 0xA4	; 164
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	9b df       	rcall	.-202    	; 0xbf0 <oled_printf>
	
	oled_page_select(3);
     cba:	83 e0       	ldi	r24, 0x03	; 3
     cbc:	b1 de       	rcall	.-670    	; 0xa20 <oled_page_select>
	if(joy_pos == 2)
     cbe:	80 91 b2 03 	lds	r24, 0x03B2
     cc2:	90 91 b3 03 	lds	r25, 0x03B3
     cc6:	02 97       	sbiw	r24, 0x02	; 2
     cc8:	21 f4       	brne	.+8      	; 0xcd2 <oled_display_activity+0x56>
		oled_printf_inverted("Return \n");
     cca:	8d ea       	ldi	r24, 0xAD	; 173
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	b3 cf       	rjmp	.-154    	; 0xc36 <oled_printf_inverted>
     cd0:	08 95       	ret
	else
		oled_printf("Return \n");
     cd2:	8d ea       	ldi	r24, 0xAD	; 173
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	8c cf       	rjmp	.-232    	; 0xbf0 <oled_printf>
     cd8:	08 95       	ret

00000cda <spi_init>:
#include "spi.h"

void spi_init() 
{
	/* Set MOSI and SCK and CS output, all others input */
	DDRB = (1 << PB5) | (1 << PB7) | (1 << PB4);
     cda:	80 eb       	ldi	r24, 0xB0	; 176
     cdc:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PB4);
     cde:	c4 9a       	sbi	0x18, 4	; 24
	/* Enable interrupt */

	// SPCR = 1<<SPIE;

	/* Enable SPI, Master, set clock rate fck/16 , SPI mode 0 by default*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);// | (1<<SPIE)
     ce0:	81 e5       	ldi	r24, 0x51	; 81
     ce2:	8d b9       	out	0x0d, r24	; 13
     ce4:	08 95       	ret

00000ce6 <spi_read>:
}

void spi_read(uint8_t *receive_data, uint8_t data_length) 
{
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	2a 97       	sbiw	r28, 0x0a	; 10
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
	uint8_t dummy_data[MAX_CAN_LENGTH];
	
	for (int i = 0; i < data_length; i++)
     cfa:	66 23       	and	r22, r22
     cfc:	81 f0       	breq	.+32     	; 0xd1e <spi_read+0x38>
     cfe:	fe 01       	movw	r30, r28
     d00:	31 96       	adiw	r30, 0x01	; 1
     d02:	a8 2f       	mov	r26, r24
     d04:	b9 2f       	mov	r27, r25
     d06:	cf 01       	movw	r24, r30
     d08:	86 0f       	add	r24, r22
     d0a:	91 1d       	adc	r25, r1
	{
		SPDR = dummy_data[i];
     d0c:	21 91       	ld	r18, Z+
     d0e:	2f b9       	out	0x0f, r18	; 15
		while (!(SPSR & (1 << SPIF)));
     d10:	77 9b       	sbis	0x0e, 7	; 14
     d12:	fe cf       	rjmp	.-4      	; 0xd10 <spi_read+0x2a>
		receive_data[i] = SPDR;
     d14:	2f b1       	in	r18, 0x0f	; 15
     d16:	2d 93       	st	X+, r18

void spi_read(uint8_t *receive_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	
	for (int i = 0; i < data_length; i++)
     d18:	e8 17       	cp	r30, r24
     d1a:	f9 07       	cpc	r31, r25
     d1c:	b9 f7       	brne	.-18     	; 0xd0c <spi_read+0x26>
		SPDR = dummy_data[i];
		while (!(SPSR & (1 << SPIF)));
		receive_data[i] = SPDR;
	}
	
}
     d1e:	2a 96       	adiw	r28, 0x0a	; 10
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <spi_write>:

void spi_write(uint8_t *send_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	for (int i = 0; i < data_length; i++)
     d30:	26 2f       	mov	r18, r22
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	12 16       	cp	r1, r18
     d36:	13 06       	cpc	r1, r19
     d38:	6c f4       	brge	.+26     	; 0xd54 <spi_write+0x24>
     d3a:	e8 2f       	mov	r30, r24
     d3c:	f9 2f       	mov	r31, r25
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
	{
		SPDR = send_data[i];
     d42:	41 91       	ld	r20, Z+
     d44:	4f b9       	out	0x0f, r20	; 15
		while (!(SPSR & (1 << SPIF)));
     d46:	77 9b       	sbis	0x0e, 7	; 14
     d48:	fe cf       	rjmp	.-4      	; 0xd46 <spi_write+0x16>
		dummy_data[i] = SPDR;
     d4a:	4f b1       	in	r20, 0x0f	; 15
}

void spi_write(uint8_t *send_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	for (int i = 0; i < data_length; i++)
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	82 17       	cp	r24, r18
     d50:	93 07       	cpc	r25, r19
     d52:	bc f3       	brlt	.-18     	; 0xd42 <spi_write+0x12>
     d54:	08 95       	ret

00000d56 <USART_Transmit>:

//for 5 to 8 Data bits
void USART_Transmit(unsigned char data)
{
	//wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));//or UDRE1
     d56:	5d 9b       	sbis	0x0b, 5	; 11
     d58:	fe cf       	rjmp	.-4      	; 0xd56 <USART_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;//or UDR1
     d5a:	8c b9       	out	0x0c, r24	; 12
     d5c:	08 95       	ret

00000d5e <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	//Wait for data to be received
	while((UCSR0A & (1<<RXC0)));
     d5e:	5f 99       	sbic	0x0b, 7	; 11
     d60:	fe cf       	rjmp	.-4      	; 0xd5e <USART_Receive>
	
	//Get and return data from buffer
	return UDR0;//or UDR1
     d62:	8c b1       	in	r24, 0x0c	; 12
}
     d64:	08 95       	ret

00000d66 <USART_Init>:

void USART_Init(unsigned int ubrr)
{
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
     d66:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
     d68:	89 b9       	out	0x09, r24	; 9
	
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)  | (1<<TXEN0) | (1<<RXCIE0);
     d6a:	88 e9       	ldi	r24, 0x98	; 152
     d6c:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8 data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00); // or USBS1 or other one
     d6e:	8e e8       	ldi	r24, 0x8E	; 142
     d70:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
     d72:	6f ea       	ldi	r22, 0xAF	; 175
     d74:	76 e0       	ldi	r23, 0x06	; 6
     d76:	8b ea       	ldi	r24, 0xAB	; 171
     d78:	96 e0       	ldi	r25, 0x06	; 6
     d7a:	3a c0       	rjmp	.+116    	; 0xdf0 <fdevopen>
     d7c:	08 95       	ret

00000d7e <xmem_init>:

uint8_t xmem_read(uint16_t addr){
	volatile char *ext_mem = (char*) BASE_ADDRESS;
	uint8_t ret_val = ext_mem[addr];
	return ret_val;
}
     d7e:	85 b7       	in	r24, 0x35	; 53
     d80:	80 68       	ori	r24, 0x80	; 128
     d82:	85 bf       	out	0x35, r24	; 53
     d84:	80 b7       	in	r24, 0x30	; 48
     d86:	80 62       	ori	r24, 0x20	; 32
     d88:	80 bf       	out	0x30, r24	; 48
     d8a:	08 95       	ret

00000d8c <main>:


int main(void){
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	2d 97       	sbiw	r28, 0x0d	; 13
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
	
	USART_Init(MYUBRR);
     da0:	8f e1       	ldi	r24, 0x1F	; 31
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	e0 df       	rcall	.-64     	; 0xd66 <USART_Init>
	xmem_init();
     da6:	eb df       	rcall	.-42     	; 0xd7e <xmem_init>
	
	uint8_t data = 5;
	DDRB &= ~(0b0111);
     da8:	87 b3       	in	r24, 0x17	; 23
     daa:	88 7f       	andi	r24, 0xF8	; 248
     dac:	87 bb       	out	0x17, r24	; 23
	//SRAM_test();
	
	int left_s = 0, right_s = 0, x = 0, y = 0;
	int temp_value = NEUTRAL;
	oled_init();
     dae:	60 de       	rcall	.-832    	; 0xa70 <oled_init>
	adc_init();
     db0:	a3 dc       	rcall	.-1722   	; 0x6f8 <adc_init>
	oled_display_activity();	
     db2:	64 df       	rcall	.-312    	; 0xc7c <oled_display_activity>
	
	
	
	
	
	can_init();
     db4:	12 dd       	rcall	.-1500   	; 0x7da <can_init>
	struct can_message message;
	message.id = 3;
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
	message.length = 1;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	8b 83       	std	Y+3, r24	; 0x03
	message.data[0] = (uint8_t) 'c';
     dc2:	83 e6       	ldi	r24, 0x63	; 99
     dc4:	8c 83       	std	Y+4, r24	; 0x04
		}*/
		temp_value = adc_joy_pos_changed();
		if(temp_value != 5)
		{
			message.data[0] = temp_value;
			printf("can send %d \n\r", message.data[0]);
     dc6:	0b e9       	ldi	r16, 0x9B	; 155
     dc8:	12 e0       	ldi	r17, 0x02	; 2
			oled_actualise_joy_pos(temp_value);
			oled_display_activity();
			_delay_ms(400);
			
		}*/
		temp_value = adc_joy_pos_changed();
     dca:	f4 dc       	rcall	.-1560   	; 0x7b4 <adc_joy_pos_changed>
		if(temp_value != 5)
     dcc:	85 30       	cpi	r24, 0x05	; 5
     dce:	91 05       	cpc	r25, r1
     dd0:	e1 f3       	breq	.-8      	; 0xdca <main+0x3e>
		{
			message.data[0] = temp_value;
     dd2:	8c 83       	std	Y+4, r24	; 0x04
			printf("can send %d \n\r", message.data[0]);
     dd4:	99 27       	eor	r25, r25
     dd6:	9f 93       	push	r25
     dd8:	8f 93       	push	r24
     dda:	1f 93       	push	r17
     ddc:	0f 93       	push	r16
     dde:	52 d0       	rcall	.+164    	; 0xe84 <printf>
			can_message_send(&message);
     de0:	ce 01       	movw	r24, r28
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	4f dd       	rcall	.-1378   	; 0x884 <can_message_send>
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	ed cf       	rjmp	.-38     	; 0xdca <main+0x3e>

00000df0 <fdevopen>:
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	ec 01       	movw	r28, r24
     dfa:	8b 01       	movw	r16, r22
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	31 f4       	brne	.+12     	; 0xe0c <fdevopen+0x1c>
     e00:	61 15       	cp	r22, r1
     e02:	71 05       	cpc	r23, r1
     e04:	19 f4       	brne	.+6      	; 0xe0c <fdevopen+0x1c>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	37 c0       	rjmp	.+110    	; 0xe7a <fdevopen+0x8a>
     e0c:	6e e0       	ldi	r22, 0x0E	; 14
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0b d2       	rcall	.+1046   	; 0x122c <calloc>
     e16:	fc 01       	movw	r30, r24
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	a9 f3       	breq	.-22     	; 0xe06 <fdevopen+0x16>
     e1c:	80 e8       	ldi	r24, 0x80	; 128
     e1e:	83 83       	std	Z+3, r24	; 0x03
     e20:	01 15       	cp	r16, r1
     e22:	11 05       	cpc	r17, r1
     e24:	71 f0       	breq	.+28     	; 0xe42 <fdevopen+0x52>
     e26:	13 87       	std	Z+11, r17	; 0x0b
     e28:	02 87       	std	Z+10, r16	; 0x0a
     e2a:	81 e8       	ldi	r24, 0x81	; 129
     e2c:	83 83       	std	Z+3, r24	; 0x03
     e2e:	80 91 b4 03 	lds	r24, 0x03B4
     e32:	90 91 b5 03 	lds	r25, 0x03B5
     e36:	89 2b       	or	r24, r25
     e38:	21 f4       	brne	.+8      	; 0xe42 <fdevopen+0x52>
     e3a:	f0 93 b5 03 	sts	0x03B5, r31
     e3e:	e0 93 b4 03 	sts	0x03B4, r30
     e42:	20 97       	sbiw	r28, 0x00	; 0
     e44:	c9 f0       	breq	.+50     	; 0xe78 <fdevopen+0x88>
     e46:	d1 87       	std	Z+9, r29	; 0x09
     e48:	c0 87       	std	Z+8, r28	; 0x08
     e4a:	83 81       	ldd	r24, Z+3	; 0x03
     e4c:	82 60       	ori	r24, 0x02	; 2
     e4e:	83 83       	std	Z+3, r24	; 0x03
     e50:	80 91 b6 03 	lds	r24, 0x03B6
     e54:	90 91 b7 03 	lds	r25, 0x03B7
     e58:	89 2b       	or	r24, r25
     e5a:	71 f4       	brne	.+28     	; 0xe78 <fdevopen+0x88>
     e5c:	f0 93 b7 03 	sts	0x03B7, r31
     e60:	e0 93 b6 03 	sts	0x03B6, r30
     e64:	80 91 b8 03 	lds	r24, 0x03B8
     e68:	90 91 b9 03 	lds	r25, 0x03B9
     e6c:	89 2b       	or	r24, r25
     e6e:	21 f4       	brne	.+8      	; 0xe78 <fdevopen+0x88>
     e70:	f0 93 b9 03 	sts	0x03B9, r31
     e74:	e0 93 b8 03 	sts	0x03B8, r30
     e78:	cf 01       	movw	r24, r30
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <printf>:
     e84:	a0 e0       	ldi	r26, 0x00	; 0
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e7 e4       	ldi	r30, 0x47	; 71
     e8a:	f7 e0       	ldi	r31, 0x07	; 7
     e8c:	cd c3       	rjmp	.+1946   	; 0x1628 <__prologue_saves__+0x20>
     e8e:	fe 01       	movw	r30, r28
     e90:	35 96       	adiw	r30, 0x05	; 5
     e92:	61 91       	ld	r22, Z+
     e94:	71 91       	ld	r23, Z+
     e96:	af 01       	movw	r20, r30
     e98:	80 91 b6 03 	lds	r24, 0x03B6
     e9c:	90 91 b7 03 	lds	r25, 0x03B7
     ea0:	02 d0       	rcall	.+4      	; 0xea6 <vfprintf>
     ea2:	e2 e0       	ldi	r30, 0x02	; 2
     ea4:	dd c3       	rjmp	.+1978   	; 0x1660 <__epilogue_restores__+0x20>

00000ea6 <vfprintf>:
     ea6:	ac e0       	ldi	r26, 0x0C	; 12
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e8 e5       	ldi	r30, 0x58	; 88
     eac:	f7 e0       	ldi	r31, 0x07	; 7
     eae:	ac c3       	rjmp	.+1880   	; 0x1608 <__prologue_saves__>
     eb0:	7c 01       	movw	r14, r24
     eb2:	6b 01       	movw	r12, r22
     eb4:	8a 01       	movw	r16, r20
     eb6:	fc 01       	movw	r30, r24
     eb8:	17 82       	std	Z+7, r1	; 0x07
     eba:	16 82       	std	Z+6, r1	; 0x06
     ebc:	83 81       	ldd	r24, Z+3	; 0x03
     ebe:	81 ff       	sbrs	r24, 1
     ec0:	b0 c1       	rjmp	.+864    	; 0x1222 <vfprintf+0x37c>
     ec2:	ce 01       	movw	r24, r28
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	4c 01       	movw	r8, r24
     ec8:	f7 01       	movw	r30, r14
     eca:	93 81       	ldd	r25, Z+3	; 0x03
     ecc:	f6 01       	movw	r30, r12
     ece:	93 fd       	sbrc	r25, 3
     ed0:	85 91       	lpm	r24, Z+
     ed2:	93 ff       	sbrs	r25, 3
     ed4:	81 91       	ld	r24, Z+
     ed6:	6f 01       	movw	r12, r30
     ed8:	88 23       	and	r24, r24
     eda:	09 f4       	brne	.+2      	; 0xede <vfprintf+0x38>
     edc:	9e c1       	rjmp	.+828    	; 0x121a <vfprintf+0x374>
     ede:	85 32       	cpi	r24, 0x25	; 37
     ee0:	39 f4       	brne	.+14     	; 0xef0 <vfprintf+0x4a>
     ee2:	93 fd       	sbrc	r25, 3
     ee4:	85 91       	lpm	r24, Z+
     ee6:	93 ff       	sbrs	r25, 3
     ee8:	81 91       	ld	r24, Z+
     eea:	6f 01       	movw	r12, r30
     eec:	85 32       	cpi	r24, 0x25	; 37
     eee:	21 f4       	brne	.+8      	; 0xef8 <vfprintf+0x52>
     ef0:	b7 01       	movw	r22, r14
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	f9 d2       	rcall	.+1522   	; 0x14e8 <fputc>
     ef6:	e8 cf       	rjmp	.-48     	; 0xec8 <vfprintf+0x22>
     ef8:	51 2c       	mov	r5, r1
     efa:	31 2c       	mov	r3, r1
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	20 32       	cpi	r18, 0x20	; 32
     f00:	a0 f4       	brcc	.+40     	; 0xf2a <vfprintf+0x84>
     f02:	8b 32       	cpi	r24, 0x2B	; 43
     f04:	69 f0       	breq	.+26     	; 0xf20 <vfprintf+0x7a>
     f06:	30 f4       	brcc	.+12     	; 0xf14 <vfprintf+0x6e>
     f08:	80 32       	cpi	r24, 0x20	; 32
     f0a:	59 f0       	breq	.+22     	; 0xf22 <vfprintf+0x7c>
     f0c:	83 32       	cpi	r24, 0x23	; 35
     f0e:	69 f4       	brne	.+26     	; 0xf2a <vfprintf+0x84>
     f10:	20 61       	ori	r18, 0x10	; 16
     f12:	2c c0       	rjmp	.+88     	; 0xf6c <vfprintf+0xc6>
     f14:	8d 32       	cpi	r24, 0x2D	; 45
     f16:	39 f0       	breq	.+14     	; 0xf26 <vfprintf+0x80>
     f18:	80 33       	cpi	r24, 0x30	; 48
     f1a:	39 f4       	brne	.+14     	; 0xf2a <vfprintf+0x84>
     f1c:	21 60       	ori	r18, 0x01	; 1
     f1e:	26 c0       	rjmp	.+76     	; 0xf6c <vfprintf+0xc6>
     f20:	22 60       	ori	r18, 0x02	; 2
     f22:	24 60       	ori	r18, 0x04	; 4
     f24:	23 c0       	rjmp	.+70     	; 0xf6c <vfprintf+0xc6>
     f26:	28 60       	ori	r18, 0x08	; 8
     f28:	21 c0       	rjmp	.+66     	; 0xf6c <vfprintf+0xc6>
     f2a:	27 fd       	sbrc	r18, 7
     f2c:	27 c0       	rjmp	.+78     	; 0xf7c <vfprintf+0xd6>
     f2e:	30 ed       	ldi	r19, 0xD0	; 208
     f30:	38 0f       	add	r19, r24
     f32:	3a 30       	cpi	r19, 0x0A	; 10
     f34:	78 f4       	brcc	.+30     	; 0xf54 <vfprintf+0xae>
     f36:	26 ff       	sbrs	r18, 6
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <vfprintf+0xa0>
     f3a:	fa e0       	ldi	r31, 0x0A	; 10
     f3c:	5f 9e       	mul	r5, r31
     f3e:	30 0d       	add	r19, r0
     f40:	11 24       	eor	r1, r1
     f42:	53 2e       	mov	r5, r19
     f44:	13 c0       	rjmp	.+38     	; 0xf6c <vfprintf+0xc6>
     f46:	8a e0       	ldi	r24, 0x0A	; 10
     f48:	38 9e       	mul	r3, r24
     f4a:	30 0d       	add	r19, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	33 2e       	mov	r3, r19
     f50:	20 62       	ori	r18, 0x20	; 32
     f52:	0c c0       	rjmp	.+24     	; 0xf6c <vfprintf+0xc6>
     f54:	8e 32       	cpi	r24, 0x2E	; 46
     f56:	21 f4       	brne	.+8      	; 0xf60 <vfprintf+0xba>
     f58:	26 fd       	sbrc	r18, 6
     f5a:	5f c1       	rjmp	.+702    	; 0x121a <vfprintf+0x374>
     f5c:	20 64       	ori	r18, 0x40	; 64
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <vfprintf+0xc6>
     f60:	8c 36       	cpi	r24, 0x6C	; 108
     f62:	11 f4       	brne	.+4      	; 0xf68 <vfprintf+0xc2>
     f64:	20 68       	ori	r18, 0x80	; 128
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <vfprintf+0xc6>
     f68:	88 36       	cpi	r24, 0x68	; 104
     f6a:	41 f4       	brne	.+16     	; 0xf7c <vfprintf+0xd6>
     f6c:	f6 01       	movw	r30, r12
     f6e:	93 fd       	sbrc	r25, 3
     f70:	85 91       	lpm	r24, Z+
     f72:	93 ff       	sbrs	r25, 3
     f74:	81 91       	ld	r24, Z+
     f76:	6f 01       	movw	r12, r30
     f78:	81 11       	cpse	r24, r1
     f7a:	c1 cf       	rjmp	.-126    	; 0xefe <vfprintf+0x58>
     f7c:	98 2f       	mov	r25, r24
     f7e:	9f 7d       	andi	r25, 0xDF	; 223
     f80:	95 54       	subi	r25, 0x45	; 69
     f82:	93 30       	cpi	r25, 0x03	; 3
     f84:	28 f4       	brcc	.+10     	; 0xf90 <vfprintf+0xea>
     f86:	0c 5f       	subi	r16, 0xFC	; 252
     f88:	1f 4f       	sbci	r17, 0xFF	; 255
     f8a:	ff e3       	ldi	r31, 0x3F	; 63
     f8c:	f9 83       	std	Y+1, r31	; 0x01
     f8e:	0d c0       	rjmp	.+26     	; 0xfaa <vfprintf+0x104>
     f90:	83 36       	cpi	r24, 0x63	; 99
     f92:	31 f0       	breq	.+12     	; 0xfa0 <vfprintf+0xfa>
     f94:	83 37       	cpi	r24, 0x73	; 115
     f96:	71 f0       	breq	.+28     	; 0xfb4 <vfprintf+0x10e>
     f98:	83 35       	cpi	r24, 0x53	; 83
     f9a:	09 f0       	breq	.+2      	; 0xf9e <vfprintf+0xf8>
     f9c:	57 c0       	rjmp	.+174    	; 0x104c <vfprintf+0x1a6>
     f9e:	21 c0       	rjmp	.+66     	; 0xfe2 <vfprintf+0x13c>
     fa0:	f8 01       	movw	r30, r16
     fa2:	80 81       	ld	r24, Z
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	0e 5f       	subi	r16, 0xFE	; 254
     fa8:	1f 4f       	sbci	r17, 0xFF	; 255
     faa:	44 24       	eor	r4, r4
     fac:	43 94       	inc	r4
     fae:	51 2c       	mov	r5, r1
     fb0:	54 01       	movw	r10, r8
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <vfprintf+0x136>
     fb4:	38 01       	movw	r6, r16
     fb6:	f2 e0       	ldi	r31, 0x02	; 2
     fb8:	6f 0e       	add	r6, r31
     fba:	71 1c       	adc	r7, r1
     fbc:	f8 01       	movw	r30, r16
     fbe:	a0 80       	ld	r10, Z
     fc0:	b1 80       	ldd	r11, Z+1	; 0x01
     fc2:	26 ff       	sbrs	r18, 6
     fc4:	03 c0       	rjmp	.+6      	; 0xfcc <vfprintf+0x126>
     fc6:	65 2d       	mov	r22, r5
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <vfprintf+0x12a>
     fcc:	6f ef       	ldi	r22, 0xFF	; 255
     fce:	7f ef       	ldi	r23, 0xFF	; 255
     fd0:	c5 01       	movw	r24, r10
     fd2:	2c 87       	std	Y+12, r18	; 0x0c
     fd4:	7e d2       	rcall	.+1276   	; 0x14d2 <strnlen>
     fd6:	2c 01       	movw	r4, r24
     fd8:	83 01       	movw	r16, r6
     fda:	2c 85       	ldd	r18, Y+12	; 0x0c
     fdc:	2f 77       	andi	r18, 0x7F	; 127
     fde:	22 2e       	mov	r2, r18
     fe0:	16 c0       	rjmp	.+44     	; 0x100e <vfprintf+0x168>
     fe2:	38 01       	movw	r6, r16
     fe4:	f2 e0       	ldi	r31, 0x02	; 2
     fe6:	6f 0e       	add	r6, r31
     fe8:	71 1c       	adc	r7, r1
     fea:	f8 01       	movw	r30, r16
     fec:	a0 80       	ld	r10, Z
     fee:	b1 80       	ldd	r11, Z+1	; 0x01
     ff0:	26 ff       	sbrs	r18, 6
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <vfprintf+0x154>
     ff4:	65 2d       	mov	r22, r5
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <vfprintf+0x158>
     ffa:	6f ef       	ldi	r22, 0xFF	; 255
     ffc:	7f ef       	ldi	r23, 0xFF	; 255
     ffe:	c5 01       	movw	r24, r10
    1000:	2c 87       	std	Y+12, r18	; 0x0c
    1002:	55 d2       	rcall	.+1194   	; 0x14ae <strnlen_P>
    1004:	2c 01       	movw	r4, r24
    1006:	2c 85       	ldd	r18, Y+12	; 0x0c
    1008:	20 68       	ori	r18, 0x80	; 128
    100a:	22 2e       	mov	r2, r18
    100c:	83 01       	movw	r16, r6
    100e:	23 fc       	sbrc	r2, 3
    1010:	19 c0       	rjmp	.+50     	; 0x1044 <vfprintf+0x19e>
    1012:	83 2d       	mov	r24, r3
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	48 16       	cp	r4, r24
    1018:	59 06       	cpc	r5, r25
    101a:	a0 f4       	brcc	.+40     	; 0x1044 <vfprintf+0x19e>
    101c:	b7 01       	movw	r22, r14
    101e:	80 e2       	ldi	r24, 0x20	; 32
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	62 d2       	rcall	.+1220   	; 0x14e8 <fputc>
    1024:	3a 94       	dec	r3
    1026:	f5 cf       	rjmp	.-22     	; 0x1012 <vfprintf+0x16c>
    1028:	f5 01       	movw	r30, r10
    102a:	27 fc       	sbrc	r2, 7
    102c:	85 91       	lpm	r24, Z+
    102e:	27 fe       	sbrs	r2, 7
    1030:	81 91       	ld	r24, Z+
    1032:	5f 01       	movw	r10, r30
    1034:	b7 01       	movw	r22, r14
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	57 d2       	rcall	.+1198   	; 0x14e8 <fputc>
    103a:	31 10       	cpse	r3, r1
    103c:	3a 94       	dec	r3
    103e:	f1 e0       	ldi	r31, 0x01	; 1
    1040:	4f 1a       	sub	r4, r31
    1042:	51 08       	sbc	r5, r1
    1044:	41 14       	cp	r4, r1
    1046:	51 04       	cpc	r5, r1
    1048:	79 f7       	brne	.-34     	; 0x1028 <vfprintf+0x182>
    104a:	de c0       	rjmp	.+444    	; 0x1208 <vfprintf+0x362>
    104c:	84 36       	cpi	r24, 0x64	; 100
    104e:	11 f0       	breq	.+4      	; 0x1054 <vfprintf+0x1ae>
    1050:	89 36       	cpi	r24, 0x69	; 105
    1052:	31 f5       	brne	.+76     	; 0x10a0 <vfprintf+0x1fa>
    1054:	f8 01       	movw	r30, r16
    1056:	27 ff       	sbrs	r18, 7
    1058:	07 c0       	rjmp	.+14     	; 0x1068 <vfprintf+0x1c2>
    105a:	60 81       	ld	r22, Z
    105c:	71 81       	ldd	r23, Z+1	; 0x01
    105e:	82 81       	ldd	r24, Z+2	; 0x02
    1060:	93 81       	ldd	r25, Z+3	; 0x03
    1062:	0c 5f       	subi	r16, 0xFC	; 252
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	08 c0       	rjmp	.+16     	; 0x1078 <vfprintf+0x1d2>
    1068:	60 81       	ld	r22, Z
    106a:	71 81       	ldd	r23, Z+1	; 0x01
    106c:	88 27       	eor	r24, r24
    106e:	77 fd       	sbrc	r23, 7
    1070:	80 95       	com	r24
    1072:	98 2f       	mov	r25, r24
    1074:	0e 5f       	subi	r16, 0xFE	; 254
    1076:	1f 4f       	sbci	r17, 0xFF	; 255
    1078:	2f 76       	andi	r18, 0x6F	; 111
    107a:	b2 2e       	mov	r11, r18
    107c:	97 ff       	sbrs	r25, 7
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <vfprintf+0x1ec>
    1080:	90 95       	com	r25
    1082:	80 95       	com	r24
    1084:	70 95       	com	r23
    1086:	61 95       	neg	r22
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	8f 4f       	sbci	r24, 0xFF	; 255
    108c:	9f 4f       	sbci	r25, 0xFF	; 255
    108e:	20 68       	ori	r18, 0x80	; 128
    1090:	b2 2e       	mov	r11, r18
    1092:	2a e0       	ldi	r18, 0x0A	; 10
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	a4 01       	movw	r20, r8
    1098:	59 d2       	rcall	.+1202   	; 0x154c <__ultoa_invert>
    109a:	a8 2e       	mov	r10, r24
    109c:	a8 18       	sub	r10, r8
    109e:	43 c0       	rjmp	.+134    	; 0x1126 <vfprintf+0x280>
    10a0:	85 37       	cpi	r24, 0x75	; 117
    10a2:	29 f4       	brne	.+10     	; 0x10ae <vfprintf+0x208>
    10a4:	2f 7e       	andi	r18, 0xEF	; 239
    10a6:	b2 2e       	mov	r11, r18
    10a8:	2a e0       	ldi	r18, 0x0A	; 10
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	25 c0       	rjmp	.+74     	; 0x10f8 <vfprintf+0x252>
    10ae:	f2 2f       	mov	r31, r18
    10b0:	f9 7f       	andi	r31, 0xF9	; 249
    10b2:	bf 2e       	mov	r11, r31
    10b4:	8f 36       	cpi	r24, 0x6F	; 111
    10b6:	c1 f0       	breq	.+48     	; 0x10e8 <vfprintf+0x242>
    10b8:	18 f4       	brcc	.+6      	; 0x10c0 <vfprintf+0x21a>
    10ba:	88 35       	cpi	r24, 0x58	; 88
    10bc:	79 f0       	breq	.+30     	; 0x10dc <vfprintf+0x236>
    10be:	ad c0       	rjmp	.+346    	; 0x121a <vfprintf+0x374>
    10c0:	80 37       	cpi	r24, 0x70	; 112
    10c2:	19 f0       	breq	.+6      	; 0x10ca <vfprintf+0x224>
    10c4:	88 37       	cpi	r24, 0x78	; 120
    10c6:	21 f0       	breq	.+8      	; 0x10d0 <vfprintf+0x22a>
    10c8:	a8 c0       	rjmp	.+336    	; 0x121a <vfprintf+0x374>
    10ca:	2f 2f       	mov	r18, r31
    10cc:	20 61       	ori	r18, 0x10	; 16
    10ce:	b2 2e       	mov	r11, r18
    10d0:	b4 fe       	sbrs	r11, 4
    10d2:	0d c0       	rjmp	.+26     	; 0x10ee <vfprintf+0x248>
    10d4:	8b 2d       	mov	r24, r11
    10d6:	84 60       	ori	r24, 0x04	; 4
    10d8:	b8 2e       	mov	r11, r24
    10da:	09 c0       	rjmp	.+18     	; 0x10ee <vfprintf+0x248>
    10dc:	24 ff       	sbrs	r18, 4
    10de:	0a c0       	rjmp	.+20     	; 0x10f4 <vfprintf+0x24e>
    10e0:	9f 2f       	mov	r25, r31
    10e2:	96 60       	ori	r25, 0x06	; 6
    10e4:	b9 2e       	mov	r11, r25
    10e6:	06 c0       	rjmp	.+12     	; 0x10f4 <vfprintf+0x24e>
    10e8:	28 e0       	ldi	r18, 0x08	; 8
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <vfprintf+0x252>
    10ee:	20 e1       	ldi	r18, 0x10	; 16
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <vfprintf+0x252>
    10f4:	20 e1       	ldi	r18, 0x10	; 16
    10f6:	32 e0       	ldi	r19, 0x02	; 2
    10f8:	f8 01       	movw	r30, r16
    10fa:	b7 fe       	sbrs	r11, 7
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <vfprintf+0x266>
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	0c 5f       	subi	r16, 0xFC	; 252
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	06 c0       	rjmp	.+12     	; 0x1118 <vfprintf+0x272>
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 5f       	subi	r16, 0xFE	; 254
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	a4 01       	movw	r20, r8
    111a:	18 d2       	rcall	.+1072   	; 0x154c <__ultoa_invert>
    111c:	a8 2e       	mov	r10, r24
    111e:	a8 18       	sub	r10, r8
    1120:	fb 2d       	mov	r31, r11
    1122:	ff 77       	andi	r31, 0x7F	; 127
    1124:	bf 2e       	mov	r11, r31
    1126:	b6 fe       	sbrs	r11, 6
    1128:	0b c0       	rjmp	.+22     	; 0x1140 <vfprintf+0x29a>
    112a:	2b 2d       	mov	r18, r11
    112c:	2e 7f       	andi	r18, 0xFE	; 254
    112e:	a5 14       	cp	r10, r5
    1130:	50 f4       	brcc	.+20     	; 0x1146 <vfprintf+0x2a0>
    1132:	b4 fe       	sbrs	r11, 4
    1134:	0a c0       	rjmp	.+20     	; 0x114a <vfprintf+0x2a4>
    1136:	b2 fc       	sbrc	r11, 2
    1138:	08 c0       	rjmp	.+16     	; 0x114a <vfprintf+0x2a4>
    113a:	2b 2d       	mov	r18, r11
    113c:	2e 7e       	andi	r18, 0xEE	; 238
    113e:	05 c0       	rjmp	.+10     	; 0x114a <vfprintf+0x2a4>
    1140:	7a 2c       	mov	r7, r10
    1142:	2b 2d       	mov	r18, r11
    1144:	03 c0       	rjmp	.+6      	; 0x114c <vfprintf+0x2a6>
    1146:	7a 2c       	mov	r7, r10
    1148:	01 c0       	rjmp	.+2      	; 0x114c <vfprintf+0x2a6>
    114a:	75 2c       	mov	r7, r5
    114c:	24 ff       	sbrs	r18, 4
    114e:	0d c0       	rjmp	.+26     	; 0x116a <vfprintf+0x2c4>
    1150:	fe 01       	movw	r30, r28
    1152:	ea 0d       	add	r30, r10
    1154:	f1 1d       	adc	r31, r1
    1156:	80 81       	ld	r24, Z
    1158:	80 33       	cpi	r24, 0x30	; 48
    115a:	11 f4       	brne	.+4      	; 0x1160 <vfprintf+0x2ba>
    115c:	29 7e       	andi	r18, 0xE9	; 233
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <vfprintf+0x2cc>
    1160:	22 ff       	sbrs	r18, 2
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <vfprintf+0x2ca>
    1164:	73 94       	inc	r7
    1166:	73 94       	inc	r7
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <vfprintf+0x2cc>
    116a:	82 2f       	mov	r24, r18
    116c:	86 78       	andi	r24, 0x86	; 134
    116e:	09 f0       	breq	.+2      	; 0x1172 <vfprintf+0x2cc>
    1170:	73 94       	inc	r7
    1172:	23 fd       	sbrc	r18, 3
    1174:	12 c0       	rjmp	.+36     	; 0x119a <vfprintf+0x2f4>
    1176:	20 ff       	sbrs	r18, 0
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <vfprintf+0x2e0>
    117a:	5a 2c       	mov	r5, r10
    117c:	73 14       	cp	r7, r3
    117e:	18 f4       	brcc	.+6      	; 0x1186 <vfprintf+0x2e0>
    1180:	53 0c       	add	r5, r3
    1182:	57 18       	sub	r5, r7
    1184:	73 2c       	mov	r7, r3
    1186:	73 14       	cp	r7, r3
    1188:	60 f4       	brcc	.+24     	; 0x11a2 <vfprintf+0x2fc>
    118a:	b7 01       	movw	r22, r14
    118c:	80 e2       	ldi	r24, 0x20	; 32
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	2c 87       	std	Y+12, r18	; 0x0c
    1192:	aa d1       	rcall	.+852    	; 0x14e8 <fputc>
    1194:	73 94       	inc	r7
    1196:	2c 85       	ldd	r18, Y+12	; 0x0c
    1198:	f6 cf       	rjmp	.-20     	; 0x1186 <vfprintf+0x2e0>
    119a:	73 14       	cp	r7, r3
    119c:	10 f4       	brcc	.+4      	; 0x11a2 <vfprintf+0x2fc>
    119e:	37 18       	sub	r3, r7
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <vfprintf+0x2fe>
    11a2:	31 2c       	mov	r3, r1
    11a4:	24 ff       	sbrs	r18, 4
    11a6:	11 c0       	rjmp	.+34     	; 0x11ca <vfprintf+0x324>
    11a8:	b7 01       	movw	r22, r14
    11aa:	80 e3       	ldi	r24, 0x30	; 48
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	2c 87       	std	Y+12, r18	; 0x0c
    11b0:	9b d1       	rcall	.+822    	; 0x14e8 <fputc>
    11b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    11b4:	22 ff       	sbrs	r18, 2
    11b6:	16 c0       	rjmp	.+44     	; 0x11e4 <vfprintf+0x33e>
    11b8:	21 ff       	sbrs	r18, 1
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <vfprintf+0x31c>
    11bc:	88 e5       	ldi	r24, 0x58	; 88
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <vfprintf+0x320>
    11c2:	88 e7       	ldi	r24, 0x78	; 120
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	b7 01       	movw	r22, r14
    11c8:	0c c0       	rjmp	.+24     	; 0x11e2 <vfprintf+0x33c>
    11ca:	82 2f       	mov	r24, r18
    11cc:	86 78       	andi	r24, 0x86	; 134
    11ce:	51 f0       	breq	.+20     	; 0x11e4 <vfprintf+0x33e>
    11d0:	21 fd       	sbrc	r18, 1
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <vfprintf+0x332>
    11d4:	80 e2       	ldi	r24, 0x20	; 32
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <vfprintf+0x334>
    11d8:	8b e2       	ldi	r24, 0x2B	; 43
    11da:	27 fd       	sbrc	r18, 7
    11dc:	8d e2       	ldi	r24, 0x2D	; 45
    11de:	b7 01       	movw	r22, r14
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	82 d1       	rcall	.+772    	; 0x14e8 <fputc>
    11e4:	a5 14       	cp	r10, r5
    11e6:	30 f4       	brcc	.+12     	; 0x11f4 <vfprintf+0x34e>
    11e8:	b7 01       	movw	r22, r14
    11ea:	80 e3       	ldi	r24, 0x30	; 48
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	7c d1       	rcall	.+760    	; 0x14e8 <fputc>
    11f0:	5a 94       	dec	r5
    11f2:	f8 cf       	rjmp	.-16     	; 0x11e4 <vfprintf+0x33e>
    11f4:	aa 94       	dec	r10
    11f6:	f4 01       	movw	r30, r8
    11f8:	ea 0d       	add	r30, r10
    11fa:	f1 1d       	adc	r31, r1
    11fc:	80 81       	ld	r24, Z
    11fe:	b7 01       	movw	r22, r14
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	72 d1       	rcall	.+740    	; 0x14e8 <fputc>
    1204:	a1 10       	cpse	r10, r1
    1206:	f6 cf       	rjmp	.-20     	; 0x11f4 <vfprintf+0x34e>
    1208:	33 20       	and	r3, r3
    120a:	09 f4       	brne	.+2      	; 0x120e <vfprintf+0x368>
    120c:	5d ce       	rjmp	.-838    	; 0xec8 <vfprintf+0x22>
    120e:	b7 01       	movw	r22, r14
    1210:	80 e2       	ldi	r24, 0x20	; 32
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	69 d1       	rcall	.+722    	; 0x14e8 <fputc>
    1216:	3a 94       	dec	r3
    1218:	f7 cf       	rjmp	.-18     	; 0x1208 <vfprintf+0x362>
    121a:	f7 01       	movw	r30, r14
    121c:	86 81       	ldd	r24, Z+6	; 0x06
    121e:	97 81       	ldd	r25, Z+7	; 0x07
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <vfprintf+0x380>
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	9f ef       	ldi	r25, 0xFF	; 255
    1226:	2c 96       	adiw	r28, 0x0c	; 12
    1228:	e2 e1       	ldi	r30, 0x12	; 18
    122a:	0a c2       	rjmp	.+1044   	; 0x1640 <__epilogue_restores__>

0000122c <calloc>:
    122c:	0f 93       	push	r16
    122e:	1f 93       	push	r17
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	86 9f       	mul	r24, r22
    1236:	80 01       	movw	r16, r0
    1238:	87 9f       	mul	r24, r23
    123a:	10 0d       	add	r17, r0
    123c:	96 9f       	mul	r25, r22
    123e:	10 0d       	add	r17, r0
    1240:	11 24       	eor	r1, r1
    1242:	c8 01       	movw	r24, r16
    1244:	0d d0       	rcall	.+26     	; 0x1260 <malloc>
    1246:	ec 01       	movw	r28, r24
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	21 f0       	breq	.+8      	; 0x1254 <calloc+0x28>
    124c:	a8 01       	movw	r20, r16
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	38 d1       	rcall	.+624    	; 0x14c4 <memset>
    1254:	ce 01       	movw	r24, r28
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	08 95       	ret

00001260 <malloc>:
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	91 05       	cpc	r25, r1
    1268:	10 f4       	brcc	.+4      	; 0x126e <malloc+0xe>
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	e0 91 bc 03 	lds	r30, 0x03BC
    1272:	f0 91 bd 03 	lds	r31, 0x03BD
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	a0 e0       	ldi	r26, 0x00	; 0
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	30 97       	sbiw	r30, 0x00	; 0
    1280:	39 f1       	breq	.+78     	; 0x12d0 <malloc+0x70>
    1282:	40 81       	ld	r20, Z
    1284:	51 81       	ldd	r21, Z+1	; 0x01
    1286:	48 17       	cp	r20, r24
    1288:	59 07       	cpc	r21, r25
    128a:	b8 f0       	brcs	.+46     	; 0x12ba <malloc+0x5a>
    128c:	48 17       	cp	r20, r24
    128e:	59 07       	cpc	r21, r25
    1290:	71 f4       	brne	.+28     	; 0x12ae <malloc+0x4e>
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	93 81       	ldd	r25, Z+3	; 0x03
    1296:	10 97       	sbiw	r26, 0x00	; 0
    1298:	29 f0       	breq	.+10     	; 0x12a4 <malloc+0x44>
    129a:	13 96       	adiw	r26, 0x03	; 3
    129c:	9c 93       	st	X, r25
    129e:	8e 93       	st	-X, r24
    12a0:	12 97       	sbiw	r26, 0x02	; 2
    12a2:	2c c0       	rjmp	.+88     	; 0x12fc <malloc+0x9c>
    12a4:	90 93 bd 03 	sts	0x03BD, r25
    12a8:	80 93 bc 03 	sts	0x03BC, r24
    12ac:	27 c0       	rjmp	.+78     	; 0x12fc <malloc+0x9c>
    12ae:	21 15       	cp	r18, r1
    12b0:	31 05       	cpc	r19, r1
    12b2:	31 f0       	breq	.+12     	; 0x12c0 <malloc+0x60>
    12b4:	42 17       	cp	r20, r18
    12b6:	53 07       	cpc	r21, r19
    12b8:	18 f0       	brcs	.+6      	; 0x12c0 <malloc+0x60>
    12ba:	a9 01       	movw	r20, r18
    12bc:	db 01       	movw	r26, r22
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <malloc+0x62>
    12c0:	ef 01       	movw	r28, r30
    12c2:	9a 01       	movw	r18, r20
    12c4:	bd 01       	movw	r22, r26
    12c6:	df 01       	movw	r26, r30
    12c8:	02 80       	ldd	r0, Z+2	; 0x02
    12ca:	f3 81       	ldd	r31, Z+3	; 0x03
    12cc:	e0 2d       	mov	r30, r0
    12ce:	d7 cf       	rjmp	.-82     	; 0x127e <malloc+0x1e>
    12d0:	21 15       	cp	r18, r1
    12d2:	31 05       	cpc	r19, r1
    12d4:	f9 f0       	breq	.+62     	; 0x1314 <malloc+0xb4>
    12d6:	28 1b       	sub	r18, r24
    12d8:	39 0b       	sbc	r19, r25
    12da:	24 30       	cpi	r18, 0x04	; 4
    12dc:	31 05       	cpc	r19, r1
    12de:	80 f4       	brcc	.+32     	; 0x1300 <malloc+0xa0>
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	9b 81       	ldd	r25, Y+3	; 0x03
    12e4:	61 15       	cp	r22, r1
    12e6:	71 05       	cpc	r23, r1
    12e8:	21 f0       	breq	.+8      	; 0x12f2 <malloc+0x92>
    12ea:	fb 01       	movw	r30, r22
    12ec:	93 83       	std	Z+3, r25	; 0x03
    12ee:	82 83       	std	Z+2, r24	; 0x02
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <malloc+0x9a>
    12f2:	90 93 bd 03 	sts	0x03BD, r25
    12f6:	80 93 bc 03 	sts	0x03BC, r24
    12fa:	fe 01       	movw	r30, r28
    12fc:	32 96       	adiw	r30, 0x02	; 2
    12fe:	44 c0       	rjmp	.+136    	; 0x1388 <malloc+0x128>
    1300:	fe 01       	movw	r30, r28
    1302:	e2 0f       	add	r30, r18
    1304:	f3 1f       	adc	r31, r19
    1306:	81 93       	st	Z+, r24
    1308:	91 93       	st	Z+, r25
    130a:	22 50       	subi	r18, 0x02	; 2
    130c:	31 09       	sbc	r19, r1
    130e:	39 83       	std	Y+1, r19	; 0x01
    1310:	28 83       	st	Y, r18
    1312:	3a c0       	rjmp	.+116    	; 0x1388 <malloc+0x128>
    1314:	20 91 ba 03 	lds	r18, 0x03BA
    1318:	30 91 bb 03 	lds	r19, 0x03BB
    131c:	23 2b       	or	r18, r19
    131e:	41 f4       	brne	.+16     	; 0x1330 <malloc+0xd0>
    1320:	20 91 02 01 	lds	r18, 0x0102
    1324:	30 91 03 01 	lds	r19, 0x0103
    1328:	30 93 bb 03 	sts	0x03BB, r19
    132c:	20 93 ba 03 	sts	0x03BA, r18
    1330:	20 91 00 01 	lds	r18, 0x0100
    1334:	30 91 01 01 	lds	r19, 0x0101
    1338:	21 15       	cp	r18, r1
    133a:	31 05       	cpc	r19, r1
    133c:	41 f4       	brne	.+16     	; 0x134e <malloc+0xee>
    133e:	2d b7       	in	r18, 0x3d	; 61
    1340:	3e b7       	in	r19, 0x3e	; 62
    1342:	40 91 04 01 	lds	r20, 0x0104
    1346:	50 91 05 01 	lds	r21, 0x0105
    134a:	24 1b       	sub	r18, r20
    134c:	35 0b       	sbc	r19, r21
    134e:	e0 91 ba 03 	lds	r30, 0x03BA
    1352:	f0 91 bb 03 	lds	r31, 0x03BB
    1356:	e2 17       	cp	r30, r18
    1358:	f3 07       	cpc	r31, r19
    135a:	a0 f4       	brcc	.+40     	; 0x1384 <malloc+0x124>
    135c:	2e 1b       	sub	r18, r30
    135e:	3f 0b       	sbc	r19, r31
    1360:	28 17       	cp	r18, r24
    1362:	39 07       	cpc	r19, r25
    1364:	78 f0       	brcs	.+30     	; 0x1384 <malloc+0x124>
    1366:	ac 01       	movw	r20, r24
    1368:	4e 5f       	subi	r20, 0xFE	; 254
    136a:	5f 4f       	sbci	r21, 0xFF	; 255
    136c:	24 17       	cp	r18, r20
    136e:	35 07       	cpc	r19, r21
    1370:	48 f0       	brcs	.+18     	; 0x1384 <malloc+0x124>
    1372:	4e 0f       	add	r20, r30
    1374:	5f 1f       	adc	r21, r31
    1376:	50 93 bb 03 	sts	0x03BB, r21
    137a:	40 93 ba 03 	sts	0x03BA, r20
    137e:	81 93       	st	Z+, r24
    1380:	91 93       	st	Z+, r25
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <malloc+0x128>
    1384:	e0 e0       	ldi	r30, 0x00	; 0
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	cf 01       	movw	r24, r30
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	08 95       	ret

00001390 <free>:
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	09 f4       	brne	.+2      	; 0x139a <free+0xa>
    1398:	87 c0       	rjmp	.+270    	; 0x14a8 <free+0x118>
    139a:	fc 01       	movw	r30, r24
    139c:	32 97       	sbiw	r30, 0x02	; 2
    139e:	13 82       	std	Z+3, r1	; 0x03
    13a0:	12 82       	std	Z+2, r1	; 0x02
    13a2:	c0 91 bc 03 	lds	r28, 0x03BC
    13a6:	d0 91 bd 03 	lds	r29, 0x03BD
    13aa:	20 97       	sbiw	r28, 0x00	; 0
    13ac:	81 f4       	brne	.+32     	; 0x13ce <free+0x3e>
    13ae:	20 81       	ld	r18, Z
    13b0:	31 81       	ldd	r19, Z+1	; 0x01
    13b2:	28 0f       	add	r18, r24
    13b4:	39 1f       	adc	r19, r25
    13b6:	80 91 ba 03 	lds	r24, 0x03BA
    13ba:	90 91 bb 03 	lds	r25, 0x03BB
    13be:	82 17       	cp	r24, r18
    13c0:	93 07       	cpc	r25, r19
    13c2:	79 f5       	brne	.+94     	; 0x1422 <free+0x92>
    13c4:	f0 93 bb 03 	sts	0x03BB, r31
    13c8:	e0 93 ba 03 	sts	0x03BA, r30
    13cc:	6d c0       	rjmp	.+218    	; 0x14a8 <free+0x118>
    13ce:	de 01       	movw	r26, r28
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	ae 17       	cp	r26, r30
    13d6:	bf 07       	cpc	r27, r31
    13d8:	50 f4       	brcc	.+20     	; 0x13ee <free+0x5e>
    13da:	12 96       	adiw	r26, 0x02	; 2
    13dc:	4d 91       	ld	r20, X+
    13de:	5c 91       	ld	r21, X
    13e0:	13 97       	sbiw	r26, 0x03	; 3
    13e2:	9d 01       	movw	r18, r26
    13e4:	41 15       	cp	r20, r1
    13e6:	51 05       	cpc	r21, r1
    13e8:	09 f1       	breq	.+66     	; 0x142c <free+0x9c>
    13ea:	da 01       	movw	r26, r20
    13ec:	f3 cf       	rjmp	.-26     	; 0x13d4 <free+0x44>
    13ee:	b3 83       	std	Z+3, r27	; 0x03
    13f0:	a2 83       	std	Z+2, r26	; 0x02
    13f2:	40 81       	ld	r20, Z
    13f4:	51 81       	ldd	r21, Z+1	; 0x01
    13f6:	84 0f       	add	r24, r20
    13f8:	95 1f       	adc	r25, r21
    13fa:	8a 17       	cp	r24, r26
    13fc:	9b 07       	cpc	r25, r27
    13fe:	71 f4       	brne	.+28     	; 0x141c <free+0x8c>
    1400:	8d 91       	ld	r24, X+
    1402:	9c 91       	ld	r25, X
    1404:	11 97       	sbiw	r26, 0x01	; 1
    1406:	84 0f       	add	r24, r20
    1408:	95 1f       	adc	r25, r21
    140a:	02 96       	adiw	r24, 0x02	; 2
    140c:	91 83       	std	Z+1, r25	; 0x01
    140e:	80 83       	st	Z, r24
    1410:	12 96       	adiw	r26, 0x02	; 2
    1412:	8d 91       	ld	r24, X+
    1414:	9c 91       	ld	r25, X
    1416:	13 97       	sbiw	r26, 0x03	; 3
    1418:	93 83       	std	Z+3, r25	; 0x03
    141a:	82 83       	std	Z+2, r24	; 0x02
    141c:	21 15       	cp	r18, r1
    141e:	31 05       	cpc	r19, r1
    1420:	29 f4       	brne	.+10     	; 0x142c <free+0x9c>
    1422:	f0 93 bd 03 	sts	0x03BD, r31
    1426:	e0 93 bc 03 	sts	0x03BC, r30
    142a:	3e c0       	rjmp	.+124    	; 0x14a8 <free+0x118>
    142c:	d9 01       	movw	r26, r18
    142e:	13 96       	adiw	r26, 0x03	; 3
    1430:	fc 93       	st	X, r31
    1432:	ee 93       	st	-X, r30
    1434:	12 97       	sbiw	r26, 0x02	; 2
    1436:	4d 91       	ld	r20, X+
    1438:	5d 91       	ld	r21, X+
    143a:	a4 0f       	add	r26, r20
    143c:	b5 1f       	adc	r27, r21
    143e:	ea 17       	cp	r30, r26
    1440:	fb 07       	cpc	r31, r27
    1442:	79 f4       	brne	.+30     	; 0x1462 <free+0xd2>
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	84 0f       	add	r24, r20
    144a:	95 1f       	adc	r25, r21
    144c:	02 96       	adiw	r24, 0x02	; 2
    144e:	d9 01       	movw	r26, r18
    1450:	11 96       	adiw	r26, 0x01	; 1
    1452:	9c 93       	st	X, r25
    1454:	8e 93       	st	-X, r24
    1456:	82 81       	ldd	r24, Z+2	; 0x02
    1458:	93 81       	ldd	r25, Z+3	; 0x03
    145a:	13 96       	adiw	r26, 0x03	; 3
    145c:	9c 93       	st	X, r25
    145e:	8e 93       	st	-X, r24
    1460:	12 97       	sbiw	r26, 0x02	; 2
    1462:	e0 e0       	ldi	r30, 0x00	; 0
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	9b 81       	ldd	r25, Y+3	; 0x03
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	19 f0       	breq	.+6      	; 0x1474 <free+0xe4>
    146e:	fe 01       	movw	r30, r28
    1470:	ec 01       	movw	r28, r24
    1472:	f9 cf       	rjmp	.-14     	; 0x1466 <free+0xd6>
    1474:	ce 01       	movw	r24, r28
    1476:	02 96       	adiw	r24, 0x02	; 2
    1478:	28 81       	ld	r18, Y
    147a:	39 81       	ldd	r19, Y+1	; 0x01
    147c:	82 0f       	add	r24, r18
    147e:	93 1f       	adc	r25, r19
    1480:	20 91 ba 03 	lds	r18, 0x03BA
    1484:	30 91 bb 03 	lds	r19, 0x03BB
    1488:	28 17       	cp	r18, r24
    148a:	39 07       	cpc	r19, r25
    148c:	69 f4       	brne	.+26     	; 0x14a8 <free+0x118>
    148e:	30 97       	sbiw	r30, 0x00	; 0
    1490:	29 f4       	brne	.+10     	; 0x149c <free+0x10c>
    1492:	10 92 bd 03 	sts	0x03BD, r1
    1496:	10 92 bc 03 	sts	0x03BC, r1
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <free+0x110>
    149c:	13 82       	std	Z+3, r1	; 0x03
    149e:	12 82       	std	Z+2, r1	; 0x02
    14a0:	d0 93 bb 03 	sts	0x03BB, r29
    14a4:	c0 93 ba 03 	sts	0x03BA, r28
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <strnlen_P>:
    14ae:	fc 01       	movw	r30, r24
    14b0:	05 90       	lpm	r0, Z+
    14b2:	61 50       	subi	r22, 0x01	; 1
    14b4:	70 40       	sbci	r23, 0x00	; 0
    14b6:	01 10       	cpse	r0, r1
    14b8:	d8 f7       	brcc	.-10     	; 0x14b0 <strnlen_P+0x2>
    14ba:	80 95       	com	r24
    14bc:	90 95       	com	r25
    14be:	8e 0f       	add	r24, r30
    14c0:	9f 1f       	adc	r25, r31
    14c2:	08 95       	ret

000014c4 <memset>:
    14c4:	dc 01       	movw	r26, r24
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <memset+0x6>
    14c8:	6d 93       	st	X+, r22
    14ca:	41 50       	subi	r20, 0x01	; 1
    14cc:	50 40       	sbci	r21, 0x00	; 0
    14ce:	e0 f7       	brcc	.-8      	; 0x14c8 <memset+0x4>
    14d0:	08 95       	ret

000014d2 <strnlen>:
    14d2:	fc 01       	movw	r30, r24
    14d4:	61 50       	subi	r22, 0x01	; 1
    14d6:	70 40       	sbci	r23, 0x00	; 0
    14d8:	01 90       	ld	r0, Z+
    14da:	01 10       	cpse	r0, r1
    14dc:	d8 f7       	brcc	.-10     	; 0x14d4 <strnlen+0x2>
    14de:	80 95       	com	r24
    14e0:	90 95       	com	r25
    14e2:	8e 0f       	add	r24, r30
    14e4:	9f 1f       	adc	r25, r31
    14e6:	08 95       	ret

000014e8 <fputc>:
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	18 2f       	mov	r17, r24
    14f2:	09 2f       	mov	r16, r25
    14f4:	eb 01       	movw	r28, r22
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	81 fd       	sbrc	r24, 1
    14fa:	03 c0       	rjmp	.+6      	; 0x1502 <fputc+0x1a>
    14fc:	8f ef       	ldi	r24, 0xFF	; 255
    14fe:	9f ef       	ldi	r25, 0xFF	; 255
    1500:	20 c0       	rjmp	.+64     	; 0x1542 <fputc+0x5a>
    1502:	82 ff       	sbrs	r24, 2
    1504:	10 c0       	rjmp	.+32     	; 0x1526 <fputc+0x3e>
    1506:	4e 81       	ldd	r20, Y+6	; 0x06
    1508:	5f 81       	ldd	r21, Y+7	; 0x07
    150a:	2c 81       	ldd	r18, Y+4	; 0x04
    150c:	3d 81       	ldd	r19, Y+5	; 0x05
    150e:	42 17       	cp	r20, r18
    1510:	53 07       	cpc	r21, r19
    1512:	7c f4       	brge	.+30     	; 0x1532 <fputc+0x4a>
    1514:	e8 81       	ld	r30, Y
    1516:	f9 81       	ldd	r31, Y+1	; 0x01
    1518:	9f 01       	movw	r18, r30
    151a:	2f 5f       	subi	r18, 0xFF	; 255
    151c:	3f 4f       	sbci	r19, 0xFF	; 255
    151e:	39 83       	std	Y+1, r19	; 0x01
    1520:	28 83       	st	Y, r18
    1522:	10 83       	st	Z, r17
    1524:	06 c0       	rjmp	.+12     	; 0x1532 <fputc+0x4a>
    1526:	e8 85       	ldd	r30, Y+8	; 0x08
    1528:	f9 85       	ldd	r31, Y+9	; 0x09
    152a:	81 2f       	mov	r24, r17
    152c:	09 95       	icall
    152e:	89 2b       	or	r24, r25
    1530:	29 f7       	brne	.-54     	; 0x14fc <fputc+0x14>
    1532:	2e 81       	ldd	r18, Y+6	; 0x06
    1534:	3f 81       	ldd	r19, Y+7	; 0x07
    1536:	2f 5f       	subi	r18, 0xFF	; 255
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	3f 83       	std	Y+7, r19	; 0x07
    153c:	2e 83       	std	Y+6, r18	; 0x06
    153e:	81 2f       	mov	r24, r17
    1540:	90 2f       	mov	r25, r16
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	08 95       	ret

0000154c <__ultoa_invert>:
    154c:	fa 01       	movw	r30, r20
    154e:	aa 27       	eor	r26, r26
    1550:	28 30       	cpi	r18, 0x08	; 8
    1552:	51 f1       	breq	.+84     	; 0x15a8 <__ultoa_invert+0x5c>
    1554:	20 31       	cpi	r18, 0x10	; 16
    1556:	81 f1       	breq	.+96     	; 0x15b8 <__ultoa_invert+0x6c>
    1558:	e8 94       	clt
    155a:	6f 93       	push	r22
    155c:	6e 7f       	andi	r22, 0xFE	; 254
    155e:	6e 5f       	subi	r22, 0xFE	; 254
    1560:	7f 4f       	sbci	r23, 0xFF	; 255
    1562:	8f 4f       	sbci	r24, 0xFF	; 255
    1564:	9f 4f       	sbci	r25, 0xFF	; 255
    1566:	af 4f       	sbci	r26, 0xFF	; 255
    1568:	b1 e0       	ldi	r27, 0x01	; 1
    156a:	3e d0       	rcall	.+124    	; 0x15e8 <__ultoa_invert+0x9c>
    156c:	b4 e0       	ldi	r27, 0x04	; 4
    156e:	3c d0       	rcall	.+120    	; 0x15e8 <__ultoa_invert+0x9c>
    1570:	67 0f       	add	r22, r23
    1572:	78 1f       	adc	r23, r24
    1574:	89 1f       	adc	r24, r25
    1576:	9a 1f       	adc	r25, r26
    1578:	a1 1d       	adc	r26, r1
    157a:	68 0f       	add	r22, r24
    157c:	79 1f       	adc	r23, r25
    157e:	8a 1f       	adc	r24, r26
    1580:	91 1d       	adc	r25, r1
    1582:	a1 1d       	adc	r26, r1
    1584:	6a 0f       	add	r22, r26
    1586:	71 1d       	adc	r23, r1
    1588:	81 1d       	adc	r24, r1
    158a:	91 1d       	adc	r25, r1
    158c:	a1 1d       	adc	r26, r1
    158e:	20 d0       	rcall	.+64     	; 0x15d0 <__ultoa_invert+0x84>
    1590:	09 f4       	brne	.+2      	; 0x1594 <__ultoa_invert+0x48>
    1592:	68 94       	set
    1594:	3f 91       	pop	r19
    1596:	2a e0       	ldi	r18, 0x0A	; 10
    1598:	26 9f       	mul	r18, r22
    159a:	11 24       	eor	r1, r1
    159c:	30 19       	sub	r19, r0
    159e:	30 5d       	subi	r19, 0xD0	; 208
    15a0:	31 93       	st	Z+, r19
    15a2:	de f6       	brtc	.-74     	; 0x155a <__ultoa_invert+0xe>
    15a4:	cf 01       	movw	r24, r30
    15a6:	08 95       	ret
    15a8:	46 2f       	mov	r20, r22
    15aa:	47 70       	andi	r20, 0x07	; 7
    15ac:	40 5d       	subi	r20, 0xD0	; 208
    15ae:	41 93       	st	Z+, r20
    15b0:	b3 e0       	ldi	r27, 0x03	; 3
    15b2:	0f d0       	rcall	.+30     	; 0x15d2 <__ultoa_invert+0x86>
    15b4:	c9 f7       	brne	.-14     	; 0x15a8 <__ultoa_invert+0x5c>
    15b6:	f6 cf       	rjmp	.-20     	; 0x15a4 <__ultoa_invert+0x58>
    15b8:	46 2f       	mov	r20, r22
    15ba:	4f 70       	andi	r20, 0x0F	; 15
    15bc:	40 5d       	subi	r20, 0xD0	; 208
    15be:	4a 33       	cpi	r20, 0x3A	; 58
    15c0:	18 f0       	brcs	.+6      	; 0x15c8 <__ultoa_invert+0x7c>
    15c2:	49 5d       	subi	r20, 0xD9	; 217
    15c4:	31 fd       	sbrc	r19, 1
    15c6:	40 52       	subi	r20, 0x20	; 32
    15c8:	41 93       	st	Z+, r20
    15ca:	02 d0       	rcall	.+4      	; 0x15d0 <__ultoa_invert+0x84>
    15cc:	a9 f7       	brne	.-22     	; 0x15b8 <__ultoa_invert+0x6c>
    15ce:	ea cf       	rjmp	.-44     	; 0x15a4 <__ultoa_invert+0x58>
    15d0:	b4 e0       	ldi	r27, 0x04	; 4
    15d2:	a6 95       	lsr	r26
    15d4:	97 95       	ror	r25
    15d6:	87 95       	ror	r24
    15d8:	77 95       	ror	r23
    15da:	67 95       	ror	r22
    15dc:	ba 95       	dec	r27
    15de:	c9 f7       	brne	.-14     	; 0x15d2 <__ultoa_invert+0x86>
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	61 05       	cpc	r22, r1
    15e4:	71 05       	cpc	r23, r1
    15e6:	08 95       	ret
    15e8:	9b 01       	movw	r18, r22
    15ea:	ac 01       	movw	r20, r24
    15ec:	0a 2e       	mov	r0, r26
    15ee:	06 94       	lsr	r0
    15f0:	57 95       	ror	r21
    15f2:	47 95       	ror	r20
    15f4:	37 95       	ror	r19
    15f6:	27 95       	ror	r18
    15f8:	ba 95       	dec	r27
    15fa:	c9 f7       	brne	.-14     	; 0x15ee <__ultoa_invert+0xa2>
    15fc:	62 0f       	add	r22, r18
    15fe:	73 1f       	adc	r23, r19
    1600:	84 1f       	adc	r24, r20
    1602:	95 1f       	adc	r25, r21
    1604:	a0 1d       	adc	r26, r0
    1606:	08 95       	ret

00001608 <__prologue_saves__>:
    1608:	2f 92       	push	r2
    160a:	3f 92       	push	r3
    160c:	4f 92       	push	r4
    160e:	5f 92       	push	r5
    1610:	6f 92       	push	r6
    1612:	7f 92       	push	r7
    1614:	8f 92       	push	r8
    1616:	9f 92       	push	r9
    1618:	af 92       	push	r10
    161a:	bf 92       	push	r11
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	ca 1b       	sub	r28, r26
    1632:	db 0b       	sbc	r29, r27
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	09 94       	ijmp

00001640 <__epilogue_restores__>:
    1640:	2a 88       	ldd	r2, Y+18	; 0x12
    1642:	39 88       	ldd	r3, Y+17	; 0x11
    1644:	48 88       	ldd	r4, Y+16	; 0x10
    1646:	5f 84       	ldd	r5, Y+15	; 0x0f
    1648:	6e 84       	ldd	r6, Y+14	; 0x0e
    164a:	7d 84       	ldd	r7, Y+13	; 0x0d
    164c:	8c 84       	ldd	r8, Y+12	; 0x0c
    164e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1650:	aa 84       	ldd	r10, Y+10	; 0x0a
    1652:	b9 84       	ldd	r11, Y+9	; 0x09
    1654:	c8 84       	ldd	r12, Y+8	; 0x08
    1656:	df 80       	ldd	r13, Y+7	; 0x07
    1658:	ee 80       	ldd	r14, Y+6	; 0x06
    165a:	fd 80       	ldd	r15, Y+5	; 0x05
    165c:	0c 81       	ldd	r16, Y+4	; 0x04
    165e:	1b 81       	ldd	r17, Y+3	; 0x03
    1660:	aa 81       	ldd	r26, Y+2	; 0x02
    1662:	b9 81       	ldd	r27, Y+1	; 0x01
    1664:	ce 0f       	add	r28, r30
    1666:	d1 1d       	adc	r29, r1
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	ed 01       	movw	r28, r26
    1674:	08 95       	ret

00001676 <_exit>:
    1676:	f8 94       	cli

00001678 <__stop_program>:
    1678:	ff cf       	rjmp	.-2      	; 0x1678 <__stop_program>
