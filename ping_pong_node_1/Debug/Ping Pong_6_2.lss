
Ping Pong_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c0  00800100  000016ac  00001740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000114  008002c0  008002c0  00001900  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000027e0  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000de6  00000000  00000000  0000434c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e52  00000000  00000000  00005132  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000055c  00000000  00000000  00006f84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00009312  00000000  00000000  000074e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001374  00000000  00000000  000107f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  00011b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001104  00000000  00000000  00011d66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5f c3       	rjmp	.+1726   	; 0x6c0 <__ctors_end>
       2:	00 00       	nop
       4:	78 c3       	rjmp	.+1776   	; 0x6f6 <__bad_interrupt>
       6:	00 00       	nop
       8:	76 c3       	rjmp	.+1772   	; 0x6f6 <__bad_interrupt>
       a:	00 00       	nop
       c:	74 c3       	rjmp	.+1768   	; 0x6f6 <__bad_interrupt>
       e:	00 00       	nop
      10:	72 c3       	rjmp	.+1764   	; 0x6f6 <__bad_interrupt>
      12:	00 00       	nop
      14:	70 c3       	rjmp	.+1760   	; 0x6f6 <__bad_interrupt>
      16:	00 00       	nop
      18:	6e c3       	rjmp	.+1756   	; 0x6f6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6c c3       	rjmp	.+1752   	; 0x6f6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6a c3       	rjmp	.+1748   	; 0x6f6 <__bad_interrupt>
      22:	00 00       	nop
      24:	68 c3       	rjmp	.+1744   	; 0x6f6 <__bad_interrupt>
      26:	00 00       	nop
      28:	66 c3       	rjmp	.+1740   	; 0x6f6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	64 c3       	rjmp	.+1736   	; 0x6f6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	62 c3       	rjmp	.+1732   	; 0x6f6 <__bad_interrupt>
      32:	00 00       	nop
      34:	60 c3       	rjmp	.+1728   	; 0x6f6 <__bad_interrupt>
      36:	00 00       	nop
      38:	5e c3       	rjmp	.+1724   	; 0x6f6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5c c3       	rjmp	.+1720   	; 0x6f6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5a c3       	rjmp	.+1716   	; 0x6f6 <__bad_interrupt>
      42:	00 00       	nop
      44:	58 c3       	rjmp	.+1712   	; 0x6f6 <__bad_interrupt>
      46:	00 00       	nop
      48:	56 c3       	rjmp	.+1708   	; 0x6f6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	54 c3       	rjmp	.+1704   	; 0x6f6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	52 c3       	rjmp	.+1700   	; 0x6f6 <__bad_interrupt>
      52:	00 00       	nop
      54:	50 c3       	rjmp	.+1696   	; 0x6f6 <__bad_interrupt>
      56:	00 00       	nop
      58:	4e c3       	rjmp	.+1692   	; 0x6f6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4c c3       	rjmp	.+1688   	; 0x6f6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4a c3       	rjmp	.+1684   	; 0x6f6 <__bad_interrupt>
      62:	00 00       	nop
      64:	48 c3       	rjmp	.+1680   	; 0x6f6 <__bad_interrupt>
      66:	00 00       	nop
      68:	46 c3       	rjmp	.+1676   	; 0x6f6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	44 c3       	rjmp	.+1672   	; 0x6f6 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	ec ea       	ldi	r30, 0xAC	; 172
     6d4:	f6 e1       	ldi	r31, 0x16	; 22
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	a0 3c       	cpi	r26, 0xC0	; 192
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	a0 ec       	ldi	r26, 0xC0	; 192
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	a4 3d       	cpi	r26, 0xD4	; 212
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	33 d3       	rcall	.+1638   	; 0xd5a <main>
     6f4:	d9 c7       	rjmp	.+4018   	; 0x16a8 <_exit>

000006f6 <__bad_interrupt>:
     6f6:	84 cc       	rjmp	.-1784   	; 0x0 <__vectors>

000006f8 <adc_init>:

int joy_adc_direction;

void adc_init()
{
	joy_adc_direction = NEUTRAL;
     6f8:	84 e0       	ldi	r24, 0x04	; 4
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	90 93 c3 02 	sts	0x02C3, r25
     700:	80 93 c2 02 	sts	0x02C2, r24
     704:	08 95       	ret

00000706 <can_init>:


// "Main" for using can:

void can_init()
{
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	2a 97       	sbiw	r28, 0x0a	; 10
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
	mcp2515_init(); //Init
     71a:	f5 d0       	rcall	.+490    	; 0x906 <mcp2515_init>
	
	
	mcp2515_write(MCP_RXB0CTRL, MCP_RXBnCTRL_NOFILTER_bm, 1); // Set to no filter
     71c:	41 e0       	ldi	r20, 0x01	; 1
     71e:	60 e6       	ldi	r22, 0x60	; 96
     720:	80 e6       	ldi	r24, 0x60	; 96
     722:	12 d1       	rcall	.+548    	; 0x948 <mcp2515_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	9f e8       	ldi	r25, 0x8F	; 143
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <can_init+0x22>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <can_init+0x28>
     72e:	00 00       	nop
	_delay_ms(30);
	
	mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 1); // Enable Interrupt when message is received
     730:	41 e0       	ldi	r20, 0x01	; 1
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	8b e2       	ldi	r24, 0x2B	; 43
     736:	2f d1       	rcall	.+606    	; 0x996 <mcp2515_bit_modify>
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	9f e8       	ldi	r25, 0x8F	; 143
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <can_init+0x36>
     740:	00 c0       	rjmp	.+0      	; 0x742 <can_init+0x3c>
     742:	00 00       	nop
	_delay_ms(30);

	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);//0b11100000 instead of MODE_MASK
     744:	40 e4       	ldi	r20, 0x40	; 64
     746:	60 ee       	ldi	r22, 0xE0	; 224
     748:	8f e0       	ldi	r24, 0x0F	; 15
     74a:	25 d1       	rcall	.+586    	; 0x996 <mcp2515_bit_modify>
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	9f e8       	ldi	r25, 0x8F	; 143
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <can_init+0x4a>
     754:	00 c0       	rjmp	.+0      	; 0x756 <can_init+0x50>
     756:	00 00       	nop
	_delay_ms(30);
	
	uint8_t mode_bits;
	uint8_t data[MAX_CAN_LENGTH];
	mcp2515_read(MCP_CANSTAT, data, MAX_CAN_LENGTH);
     758:	4a e0       	ldi	r20, 0x0A	; 10
     75a:	be 01       	movw	r22, r28
     75c:	6f 5f       	subi	r22, 0xFF	; 255
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	8e e0       	ldi	r24, 0x0E	; 14
     762:	d4 d0       	rcall	.+424    	; 0x90c <mcp2515_read>
	uint8_t val = data[0];
	mode_bits = (val & MODE_MASK);
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	80 7e       	andi	r24, 0xE0	; 224
	
	if(mode_bits != MODE_LOOPBACK){
     768:	80 34       	cpi	r24, 0x40	; 64
     76a:	99 f0       	breq	.+38     	; 0x792 <can_init+0x8c>
		
		printf("MCP2515 is NOT in correct mode after reset! Its config bits are %x\n", mode_bits);
     76c:	1f 92       	push	r1
     76e:	8f 93       	push	r24
     770:	86 e0       	ldi	r24, 0x06	; 6
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	9f 93       	push	r25
     776:	8f 93       	push	r24
     778:	9e d3       	rcall	.+1852   	; 0xeb6 <printf>
		printf("\n\r");
     77a:	8d eb       	ldi	r24, 0xBD	; 189
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	9f 93       	push	r25
     780:	8f 93       	push	r24
     782:	99 d3       	rcall	.+1842   	; 0xeb6 <printf>
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	07 c0       	rjmp	.+14     	; 0x7a0 <can_init+0x9a>
	}
	else
		printf("in mode loopback \n\r");
     792:	8a e4       	ldi	r24, 0x4A	; 74
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	8d d3       	rcall	.+1818   	; 0xeb6 <printf>
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
	
}
     7a0:	2a 96       	adiw	r28, 0x0a	; 10
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <can_message_send>:

void can_message_send(struct can_message* msg)
{
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	8c 01       	movw	r16, r24
	mcp2515_write(MCP_TXB0DLC, msg->length, 1);
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	fc 01       	movw	r30, r24
     7c6:	62 81       	ldd	r22, Z+2	; 0x02
     7c8:	85 e3       	ldi	r24, 0x35	; 53
     7ca:	be d0       	rcall	.+380    	; 0x948 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	f8 01       	movw	r30, r16
     7d0:	60 81       	ld	r22, Z
     7d2:	81 e3       	ldi	r24, 0x31	; 49
     7d4:	b9 d0       	rcall	.+370    	; 0x948 <mcp2515_write>
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
     7d6:	f8 01       	movw	r30, r16
     7d8:	82 81       	ldd	r24, Z+2	; 0x02
     7da:	88 23       	and	r24, r24
     7dc:	e9 f0       	breq	.+58     	; 0x818 <can_message_send+0x66>
     7de:	d1 2c       	mov	r13, r1
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
		printf("can message send %d", msg->data[i]);
     7e0:	0f 2e       	mov	r0, r31
     7e2:	fe e5       	ldi	r31, 0x5E	; 94
     7e4:	ef 2e       	mov	r14, r31
     7e6:	f1 e0       	ldi	r31, 0x01	; 1
     7e8:	ff 2e       	mov	r15, r31
     7ea:	f0 2d       	mov	r31, r0
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
     7ec:	e8 01       	movw	r28, r16
     7ee:	cd 0d       	add	r28, r13
     7f0:	d1 1d       	adc	r29, r1
     7f2:	41 e0       	ldi	r20, 0x01	; 1
     7f4:	6b 81       	ldd	r22, Y+3	; 0x03
     7f6:	86 e3       	ldi	r24, 0x36	; 54
     7f8:	a7 d0       	rcall	.+334    	; 0x948 <mcp2515_write>
		printf("can message send %d", msg->data[i]);
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	1f 92       	push	r1
     7fe:	8f 93       	push	r24
     800:	ff 92       	push	r15
     802:	ef 92       	push	r14
     804:	58 d3       	rcall	.+1712   	; 0xeb6 <printf>
{
	mcp2515_write(MCP_TXB0DLC, msg->length, 1);
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
     806:	d3 94       	inc	r13
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	f8 01       	movw	r30, r16
     812:	82 81       	ldd	r24, Z+2	; 0x02
     814:	d8 16       	cp	r13, r24
     816:	50 f3       	brcs	.-44     	; 0x7ec <can_message_send+0x3a>
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
		printf("can message send %d", msg->data[i]);
	}
	printf("\n\r");
     818:	8d eb       	ldi	r24, 0xBD	; 189
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	9f 93       	push	r25
     81e:	8f 93       	push	r24
     820:	4a d3       	rcall	.+1684   	; 0xeb6 <printf>
	mcp2515_request(MCP_RTS_TX0);
     822:	81 e8       	ldi	r24, 0x81	; 129
     824:	a8 d0       	rcall	.+336    	; 0x976 <mcp2515_request>
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
	//Do something...
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	df 90       	pop	r13
     838:	08 95       	ret

0000083a <can_data_receive>:
{
	
}
*/
void can_data_receive(struct can_message* msg)
{
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	2a 97       	sbiw	r28, 0x0a	; 10
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	de bf       	out	0x3e, r29	; 62
     854:	0f be       	out	0x3f, r0	; 63
     856:	cd bf       	out	0x3d, r28	; 61
     858:	8c 01       	movw	r16, r24
	uint8_t i;
	
	uint8_t result[MAX_CAN_LENGTH];
	
	for (i = 0; i < msg->length; i++)
     85a:	fc 01       	movw	r30, r24
     85c:	82 81       	ldd	r24, Z+2	; 0x02
     85e:	88 23       	and	r24, r24
     860:	41 f1       	breq	.+80     	; 0x8b2 <can_data_receive+0x78>
     862:	d1 2c       	mov	r13, r1
	{
		mcp2515_read(MCP_RXB0D(0), result, 1);
		msg->data[i] = result[i];
		printf("can messsage received %d", msg->data[i]);
     864:	0f 2e       	mov	r0, r31
     866:	f2 e7       	ldi	r31, 0x72	; 114
     868:	ef 2e       	mov	r14, r31
     86a:	f1 e0       	ldi	r31, 0x01	; 1
     86c:	ff 2e       	mov	r15, r31
     86e:	f0 2d       	mov	r31, r0
	
	uint8_t result[MAX_CAN_LENGTH];
	
	for (i = 0; i < msg->length; i++)
	{
		mcp2515_read(MCP_RXB0D(0), result, 1);
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	be 01       	movw	r22, r28
     874:	6f 5f       	subi	r22, 0xFF	; 255
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	86 e6       	ldi	r24, 0x66	; 102
     87a:	48 d0       	rcall	.+144    	; 0x90c <mcp2515_read>
		msg->data[i] = result[i];
     87c:	2d 2d       	mov	r18, r13
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	e1 e0       	ldi	r30, 0x01	; 1
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	ec 0f       	add	r30, r28
     886:	fd 1f       	adc	r31, r29
     888:	e2 0f       	add	r30, r18
     88a:	f3 1f       	adc	r31, r19
     88c:	80 81       	ld	r24, Z
     88e:	f8 01       	movw	r30, r16
     890:	e2 0f       	add	r30, r18
     892:	f3 1f       	adc	r31, r19
     894:	83 83       	std	Z+3, r24	; 0x03
		printf("can messsage received %d", msg->data[i]);
     896:	1f 92       	push	r1
     898:	8f 93       	push	r24
     89a:	ff 92       	push	r15
     89c:	ef 92       	push	r14
     89e:	0b d3       	rcall	.+1558   	; 0xeb6 <printf>
{
	uint8_t i;
	
	uint8_t result[MAX_CAN_LENGTH];
	
	for (i = 0; i < msg->length; i++)
     8a0:	d3 94       	inc	r13
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	f8 01       	movw	r30, r16
     8ac:	82 81       	ldd	r24, Z+2	; 0x02
     8ae:	d8 16       	cp	r13, r24
     8b0:	f8 f2       	brcs	.-66     	; 0x870 <can_data_receive+0x36>
	{
		mcp2515_read(MCP_RXB0D(0), result, 1);
		msg->data[i] = result[i];
		printf("can messsage received %d", msg->data[i]);
	}
	printf("\n\r");
     8b2:	8d eb       	ldi	r24, 0xBD	; 189
     8b4:	92 e0       	ldi	r25, 0x02	; 2
     8b6:	9f 93       	push	r25
     8b8:	8f 93       	push	r24
     8ba:	fd d2       	rcall	.+1530   	; 0xeb6 <printf>
	
	mcp2515_bit_modify(MCP_CANINTF, 0x01, 0x00);
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	61 e0       	ldi	r22, 0x01	; 1
     8c0:	8c e2       	ldi	r24, 0x2C	; 44
     8c2:	69 d0       	rcall	.+210    	; 0x996 <mcp2515_bit_modify>
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
}
     8c8:	2a 96       	adiw	r28, 0x0a	; 10
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	df 90       	pop	r13
     8e2:	08 95       	ret

000008e4 <mcp2515_reset>:
	 spi_init();
	 mcp2515_reset();
}

void mcp2515_reset()
{
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	1f 92       	push	r1
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     8ee:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);	
	
	uint8_t reset[] = {MCP_RESET};
     8f0:	80 ec       	ldi	r24, 0xC0	; 192
     8f2:	89 83       	std	Y+1, r24	; 0x01
	spi_write(reset, 1);
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	01 d2       	rcall	.+1026   	; 0xcfe <spi_write>
	
	PORTB |= (1<<PINB4); // DeselectCAN-controller
     8fc:	c4 9a       	sbi	0x18, 4	; 24
}
     8fe:	0f 90       	pop	r0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <mcp2515_init>:
#include "MCP2515_driver.h"


void mcp2515_init() 
{
	 spi_init();
     906:	d0 d1       	rcall	.+928    	; 0xca8 <spi_init>
	 mcp2515_reset();
     908:	ed cf       	rjmp	.-38     	; 0x8e4 <mcp2515_reset>
     90a:	08 95       	ret

0000090c <mcp2515_read>:
	
	PORTB |= (1<<PINB4); // DeselectCAN-controller
}

void mcp2515_read(uint8_t address, uint8_t result[MAX_CAN_LENGTH], uint8_t data_size)
{	
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	00 d0       	rcall	.+0      	; 0x918 <mcp2515_read+0xc>
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	8b 01       	movw	r16, r22
     91e:	f4 2e       	mov	r15, r20
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     920:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);
	
	uint8_t write[] = {MCP_READ, address};
     922:	93 e0       	ldi	r25, 0x03	; 3
     924:	99 83       	std	Y+1, r25	; 0x01
     926:	8a 83       	std	Y+2, r24	; 0x02
	spi_write(write, 2); // Send read instruction
     928:	62 e0       	ldi	r22, 0x02	; 2
     92a:	ce 01       	movw	r24, r28
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	e7 d1       	rcall	.+974    	; 0xcfe <spi_write>
	
	spi_read(result, data_size); // Readresult
     930:	6f 2d       	mov	r22, r15
     932:	c8 01       	movw	r24, r16
     934:	bf d1       	rcall	.+894    	; 0xcb4 <spi_read>
	
	PORTB |= (1<<PINB4); // DeselectCAN-controller
     936:	c4 9a       	sbi	0x18, 4	; 24
	
	
}
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	08 95       	ret

00000948 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data, uint8_t data_size)
{
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	00 d0       	rcall	.+0      	; 0x94e <mcp2515_write+0x6>
     94e:	1f 92       	push	r1
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     954:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);
	
	uint8_t write[] = {MCP_WRITE, address, data};
     956:	92 e0       	ldi	r25, 0x02	; 2
     958:	99 83       	std	Y+1, r25	; 0x01
     95a:	8a 83       	std	Y+2, r24	; 0x02
     95c:	6b 83       	std	Y+3, r22	; 0x03
	spi_write(write, data_size + 2); // Send read instruction
     95e:	62 e0       	ldi	r22, 0x02	; 2
     960:	64 0f       	add	r22, r20
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	cb d1       	rcall	.+918    	; 0xcfe <spi_write>
	
	PORTB |= (1<<PINB4); // DeselectCAN-controller
     968:	c4 9a       	sbi	0x18, 4	; 24
		
}
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <mcp2515_request>:

void mcp2515_request(uint8_t rqs)
{
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	1f 92       	push	r1
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     980:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);		
		
	uint8_t cmd[] = {rqs};
     982:	89 83       	std	Y+1, r24	; 0x01
	spi_write(cmd, 1);		
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	ce 01       	movw	r24, r28
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	b9 d1       	rcall	.+882    	; 0xcfe <spi_write>
	
	PORTB |= (1<<PINB4); // Deselect CAN-controller
     98c:	c4 9a       	sbi	0x18, 4	; 24
}
     98e:	0f 90       	pop	r0
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <mcp2515_bit_modify>:

// Modify bits in the register / See datasheet 12.10
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) 
{
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	00 d0       	rcall	.+0      	; 0x99c <mcp2515_bit_modify+0x6>
     99c:	00 d0       	rcall	.+0      	; 0x99e <mcp2515_bit_modify+0x8>
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     9a2:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);	
	
	uint8_t bit_list[] = {MCP_BITMOD, address, mask, data};
     9a4:	95 e0       	ldi	r25, 0x05	; 5
     9a6:	99 83       	std	Y+1, r25	; 0x01
     9a8:	8a 83       	std	Y+2, r24	; 0x02
     9aa:	6b 83       	std	Y+3, r22	; 0x03
     9ac:	4c 83       	std	Y+4, r20	; 0x04
	spi_write(bit_list, 4);	
     9ae:	64 e0       	ldi	r22, 0x04	; 4
     9b0:	ce 01       	movw	r24, r28
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	a4 d1       	rcall	.+840    	; 0xcfe <spi_write>
	
	PORTB |= (1<<PINB4); //Deselect CAN-controller
     9b6:	c4 9a       	sbi	0x18, 4	; 24

}
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <oled_columb_range_select>:
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     9c6:	91 e2       	ldi	r25, 0x21	; 33
     9c8:	90 93 00 10 	sts	0x1000, r25
	//oled_display_activity();
}

void oled_columb_range_select(uint8_t start, uint8_t end) {
	oled_write_c(OLED_COLUMB_SET);
	if (start < OLED_COLUMBS) {
     9cc:	88 23       	and	r24, r24
     9ce:	1c f0       	brlt	.+6      	; 0x9d6 <oled_columb_range_select+0x10>
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     9d0:	80 93 00 10 	sts	0x1000, r24
     9d4:	03 c0       	rjmp	.+6      	; 0x9dc <oled_columb_range_select+0x16>
     9d6:	8f e7       	ldi	r24, 0x7F	; 127
     9d8:	80 93 00 10 	sts	0x1000, r24
		oled_write_c(start);
		} else {
		oled_write_c(OLED_COLUMBS - 1);
	}

	if (end < OLED_COLUMBS) {
     9dc:	66 23       	and	r22, r22
     9de:	1c f0       	brlt	.+6      	; 0x9e6 <oled_columb_range_select+0x20>
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     9e0:	60 93 00 10 	sts	0x1000, r22
     9e4:	08 95       	ret
     9e6:	8f e7       	ldi	r24, 0x7F	; 127
     9e8:	80 93 00 10 	sts	0x1000, r24
     9ec:	08 95       	ret

000009ee <oled_page_select>:
     9ee:	92 e2       	ldi	r25, 0x22	; 34
     9f0:	90 93 00 10 	sts	0x1000, r25
	}
}

void oled_page_select(uint8_t page) {
	oled_write_c(OLED_PAGE_SET);
	if (page < OLED_PAGES) {
     9f4:	88 30       	cpi	r24, 0x08	; 8
     9f6:	28 f4       	brcc	.+10     	; 0xa02 <oled_page_select+0x14>
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     9f8:	e0 e0       	ldi	r30, 0x00	; 0
     9fa:	f0 e1       	ldi	r31, 0x10	; 16
     9fc:	80 83       	st	Z, r24
     9fe:	80 83       	st	Z, r24
     a00:	08 95       	ret
     a02:	e0 e0       	ldi	r30, 0x00	; 0
     a04:	f0 e1       	ldi	r31, 0x10	; 16
     a06:	87 e0       	ldi	r24, 0x07	; 7
     a08:	80 83       	st	Z, r24
     a0a:	80 83       	st	Z, r24
     a0c:	08 95       	ret

00000a0e <oled_clear_page>:
		oled_write_c(OLED_PAGES - 1);
	}
}

void oled_clear_page(uint8_t page) {
	if (page < OLED_PAGES) {
     a0e:	88 30       	cpi	r24, 0x08	; 8
     a10:	60 f4       	brcc	.+24     	; 0xa2a <oled_clear_page+0x1c>
		oled_page_select(page);
     a12:	ed df       	rcall	.-38     	; 0x9ee <oled_page_select>
		oled_columb_range_select(0, OLED_COLUMBS - 1);
     a14:	6f e7       	ldi	r22, 0x7F	; 127
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	d6 df       	rcall	.-84     	; 0x9c6 <oled_columb_range_select>
     a1a:	80 e8       	ldi	r24, 0x80	; 128
     a1c:	90 e0       	ldi	r25, 0x00	; 0
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     a1e:	e0 e0       	ldi	r30, 0x00	; 0
     a20:	f2 e1       	ldi	r31, 0x12	; 18
     a22:	10 82       	st	Z, r1
     a24:	01 97       	sbiw	r24, 0x01	; 1

void oled_clear_page(uint8_t page) {
	if (page < OLED_PAGES) {
		oled_page_select(page);
		oled_columb_range_select(0, OLED_COLUMBS - 1);
		for (int i = 0; i < OLED_COLUMBS; i++) {
     a26:	00 97       	sbiw	r24, 0x00	; 0
     a28:	e1 f7       	brne	.-8      	; 0xa22 <oled_clear_page+0x14>
     a2a:	08 95       	ret

00000a2c <oled_clear_screen>:
			oled_write_data(0x00);
		}
	}
}

void oled_clear_screen() {
     a2c:	cf 93       	push	r28
     a2e:	c0 e0       	ldi	r28, 0x00	; 0
	for (int i = 0; i < OLED_PAGES; i++) {
		oled_clear_page(i);
     a30:	8c 2f       	mov	r24, r28
     a32:	ed df       	rcall	.-38     	; 0xa0e <oled_clear_page>
     a34:	cf 5f       	subi	r28, 0xFF	; 255
		}
	}
}

void oled_clear_screen() {
	for (int i = 0; i < OLED_PAGES; i++) {
     a36:	c8 30       	cpi	r28, 0x08	; 8
     a38:	d9 f7       	brne	.-10     	; 0xa30 <oled_clear_screen+0x4>
		oled_clear_page(i);
	}
}
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <oled_init>:
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     a3e:	e0 e0       	ldi	r30, 0x00	; 0
     a40:	f0 e1       	ldi	r31, 0x10	; 16
     a42:	8e ea       	ldi	r24, 0xAE	; 174
     a44:	80 83       	st	Z, r24
     a46:	81 ea       	ldi	r24, 0xA1	; 161
     a48:	80 83       	st	Z, r24
     a4a:	8a ed       	ldi	r24, 0xDA	; 218
     a4c:	80 83       	st	Z, r24
     a4e:	82 e1       	ldi	r24, 0x12	; 18
     a50:	80 83       	st	Z, r24
     a52:	88 ec       	ldi	r24, 0xC8	; 200
     a54:	80 83       	st	Z, r24
     a56:	88 ea       	ldi	r24, 0xA8	; 168
     a58:	80 83       	st	Z, r24
     a5a:	8f e3       	ldi	r24, 0x3F	; 63
     a5c:	80 83       	st	Z, r24
     a5e:	85 ed       	ldi	r24, 0xD5	; 213
     a60:	80 83       	st	Z, r24
     a62:	80 e8       	ldi	r24, 0x80	; 128
     a64:	80 83       	st	Z, r24
     a66:	81 e8       	ldi	r24, 0x81	; 129
     a68:	80 83       	st	Z, r24
     a6a:	80 e5       	ldi	r24, 0x50	; 80
     a6c:	80 83       	st	Z, r24
     a6e:	89 ed       	ldi	r24, 0xD9	; 217
     a70:	80 83       	st	Z, r24
     a72:	81 e2       	ldi	r24, 0x21	; 33
     a74:	80 83       	st	Z, r24
     a76:	80 e2       	ldi	r24, 0x20	; 32
     a78:	80 83       	st	Z, r24
     a7a:	82 e0       	ldi	r24, 0x02	; 2
     a7c:	80 83       	st	Z, r24
     a7e:	8b ed       	ldi	r24, 0xDB	; 219
     a80:	80 83       	st	Z, r24
     a82:	80 e3       	ldi	r24, 0x30	; 48
     a84:	80 83       	st	Z, r24
     a86:	8d ea       	ldi	r24, 0xAD	; 173
     a88:	80 83       	st	Z, r24
     a8a:	10 82       	st	Z, r1
     a8c:	84 ea       	ldi	r24, 0xA4	; 164
     a8e:	80 83       	st	Z, r24
     a90:	86 ea       	ldi	r24, 0xA6	; 166
     a92:	80 83       	st	Z, r24
     a94:	8f ea       	ldi	r24, 0xAF	; 175
     a96:	80 83       	st	Z, r24
	oled_write_c(0xad);	//master configuration
	oled_write_c(0x00);
	oled_write_c(0xa4);	//out follows RAM content
	oled_write_c(0xa6);	//set normal display
	oled_write_c(0xaf);	//display on
	oled_clear_screen();
     a98:	c9 df       	rcall	.-110    	; 0xa2c <oled_clear_screen>
	//current_activity = &oled_main;
	joy_pos = 0;
     a9a:	10 92 c9 03 	sts	0x03C9, r1
     a9e:	10 92 c8 03 	sts	0x03C8, r1
	//oled_display_activity();
}
     aa2:	08 95       	ret

00000aa4 <oled_print_char_of_size>:
}

void oled_print_char_of_size(char letter, uint8_t size) {
	uint8_t char_length = 0;
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
     aa4:	62 30       	cpi	r22, 0x02	; 2
     aa6:	41 f4       	brne	.+16     	; 0xab8 <oled_print_char_of_size+0x14>
		char_length = 4;
		letter_bitmap = font4[letter - ' '];
     aa8:	94 e0       	ldi	r25, 0x04	; 4
     aaa:	89 02       	muls	r24, r25
     aac:	a0 01       	movw	r20, r0
     aae:	11 24       	eor	r1, r1
     ab0:	40 51       	subi	r20, 0x10	; 16
     ab2:	50 40       	sbci	r21, 0x00	; 0

void oled_print_char_of_size(char letter, uint8_t size) {
	uint8_t char_length = 0;
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
		char_length = 4;
     ab4:	24 e0       	ldi	r18, 0x04	; 4
     ab6:	25 c0       	rjmp	.+74     	; 0xb02 <oled_print_char_of_size+0x5e>
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
     ab8:	61 30       	cpi	r22, 0x01	; 1
     aba:	89 f4       	brne	.+34     	; 0xade <oled_print_char_of_size+0x3a>
		char_length = 5;
		letter_bitmap = font5[letter - ' '];
     abc:	48 2f       	mov	r20, r24
     abe:	55 27       	eor	r21, r21
     ac0:	47 fd       	sbrc	r20, 7
     ac2:	50 95       	com	r21
     ac4:	40 52       	subi	r20, 0x20	; 32
     ac6:	51 09       	sbc	r21, r1
     ac8:	ca 01       	movw	r24, r20
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	48 0f       	add	r20, r24
     ad4:	59 1f       	adc	r21, r25
     ad6:	44 51       	subi	r20, 0x14	; 20
     ad8:	5e 4f       	sbci	r21, 0xFE	; 254
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
		char_length = 4;
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
		char_length = 5;
     ada:	25 e0       	ldi	r18, 0x05	; 5
     adc:	12 c0       	rjmp	.+36     	; 0xb02 <oled_print_char_of_size+0x5e>
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
		letter_bitmap = font8[letter - ' '];
     ade:	98 e0       	ldi	r25, 0x08	; 8
     ae0:	89 02       	muls	r24, r25
     ae2:	a0 01       	movw	r20, r0
     ae4:	11 24       	eor	r1, r1
     ae6:	49 53       	subi	r20, 0x39	; 57
     ae8:	5d 4f       	sbci	r21, 0xFD	; 253
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
		char_length = 5;
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
     aea:	28 e0       	ldi	r18, 0x08	; 8
     aec:	0a c0       	rjmp	.+20     	; 0xb02 <oled_print_char_of_size+0x5e>
     aee:	fa 01       	movw	r30, r20
     af0:	e8 0f       	add	r30, r24
     af2:	f9 1f       	adc	r31, r25
		letter_bitmap = font8[letter - ' '];
	}
	for (int i = 0; i < char_length; i++) {
      oled_write_data(pgm_read_byte(&(letter_bitmap[i])));
     af4:	e4 91       	lpm	r30, Z
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     af6:	ec 93       	st	X, r30
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
		letter_bitmap = font8[letter - ' '];
	}
	for (int i = 0; i < char_length; i++) {
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	82 17       	cp	r24, r18
     afc:	93 07       	cpc	r25, r19
     afe:	bc f3       	brlt	.-18     	; 0xaee <oled_print_char_of_size+0x4a>
     b00:	08 95       	ret
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     b08:	a0 e0       	ldi	r26, 0x00	; 0
     b0a:	b2 e1       	ldi	r27, 0x12	; 18
     b0c:	f0 cf       	rjmp	.-32     	; 0xaee <oled_print_char_of_size+0x4a>

00000b0e <oled_print_char_of_size_inverted>:
}

void oled_print_char_of_size_inverted(char letter, uint8_t size) {
	uint8_t char_length = 0;
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
     b0e:	62 30       	cpi	r22, 0x02	; 2
     b10:	41 f4       	brne	.+16     	; 0xb22 <oled_print_char_of_size_inverted+0x14>
		char_length = 4;
		letter_bitmap = font4[letter - ' '];
     b12:	94 e0       	ldi	r25, 0x04	; 4
     b14:	89 02       	muls	r24, r25
     b16:	a0 01       	movw	r20, r0
     b18:	11 24       	eor	r1, r1
     b1a:	40 51       	subi	r20, 0x10	; 16
     b1c:	50 40       	sbci	r21, 0x00	; 0

void oled_print_char_of_size_inverted(char letter, uint8_t size) {
	uint8_t char_length = 0;
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
		char_length = 4;
     b1e:	24 e0       	ldi	r18, 0x04	; 4
     b20:	26 c0       	rjmp	.+76     	; 0xb6e <oled_print_char_of_size_inverted+0x60>
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
     b22:	61 30       	cpi	r22, 0x01	; 1
     b24:	89 f4       	brne	.+34     	; 0xb48 <oled_print_char_of_size_inverted+0x3a>
		char_length = 5;
		letter_bitmap = font5[letter - ' '];
     b26:	48 2f       	mov	r20, r24
     b28:	55 27       	eor	r21, r21
     b2a:	47 fd       	sbrc	r20, 7
     b2c:	50 95       	com	r21
     b2e:	40 52       	subi	r20, 0x20	; 32
     b30:	51 09       	sbc	r21, r1
     b32:	ca 01       	movw	r24, r20
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	48 0f       	add	r20, r24
     b3e:	59 1f       	adc	r21, r25
     b40:	44 51       	subi	r20, 0x14	; 20
     b42:	5e 4f       	sbci	r21, 0xFE	; 254
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
		char_length = 4;
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
		char_length = 5;
     b44:	25 e0       	ldi	r18, 0x05	; 5
     b46:	13 c0       	rjmp	.+38     	; 0xb6e <oled_print_char_of_size_inverted+0x60>
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
		letter_bitmap = font8[letter - ' '];
     b48:	98 e0       	ldi	r25, 0x08	; 8
     b4a:	89 02       	muls	r24, r25
     b4c:	a0 01       	movw	r20, r0
     b4e:	11 24       	eor	r1, r1
     b50:	49 53       	subi	r20, 0x39	; 57
     b52:	5d 4f       	sbci	r21, 0xFD	; 253
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
		char_length = 5;
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
     b54:	28 e0       	ldi	r18, 0x08	; 8
     b56:	0b c0       	rjmp	.+22     	; 0xb6e <oled_print_char_of_size_inverted+0x60>
     b58:	fa 01       	movw	r30, r20
     b5a:	e8 0f       	add	r30, r24
     b5c:	f9 1f       	adc	r31, r25
		letter_bitmap = font8[letter - ' '];
	}
	for (int i = 0; i < char_length; i++) {
      oled_write_data(~pgm_read_byte(&(letter_bitmap[i])));
     b5e:	e4 91       	lpm	r30, Z
     b60:	e0 95       	com	r30
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     b62:	ec 93       	st	X, r30
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
		letter_bitmap = font8[letter - ' '];
	}
	for (int i = 0; i < char_length; i++) {
     b64:	01 96       	adiw	r24, 0x01	; 1
     b66:	82 17       	cp	r24, r18
     b68:	93 07       	cpc	r25, r19
     b6a:	b4 f3       	brlt	.-20     	; 0xb58 <oled_print_char_of_size_inverted+0x4a>
     b6c:	08 95       	ret
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     b74:	a0 e0       	ldi	r26, 0x00	; 0
     b76:	b2 e1       	ldi	r27, 0x12	; 18
     b78:	ef cf       	rjmp	.-34     	; 0xb58 <oled_print_char_of_size_inverted+0x4a>

00000b7a <oled_print_char>:

uint8_t printf_page = 0;
uint8_t printf_size = 0;

uint8_t oled_print_char(char letter) {
	if (letter == '\n') {
     b7a:	8a 30       	cpi	r24, 0x0A	; 10
     b7c:	51 f4       	brne	.+20     	; 0xb92 <oled_print_char+0x18>
		printf_page += 1;
     b7e:	80 91 c1 02 	lds	r24, 0x02C1
     b82:	8f 5f       	subi	r24, 0xFF	; 255
     b84:	80 93 c1 02 	sts	0x02C1, r24
		oled_page_select(printf_page);
     b88:	32 df       	rcall	.-412    	; 0x9ee <oled_page_select>
		oled_columb_range_select(0, OLED_COLUMBS);
     b8a:	60 e8       	ldi	r22, 0x80	; 128
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	1b df       	rcall	.-458    	; 0x9c6 <oled_columb_range_select>
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <oled_print_char+0x1e>
		} else {
		oled_print_char_of_size(letter, printf_size);
     b92:	60 91 c0 02 	lds	r22, 0x02C0
     b96:	86 df       	rcall	.-244    	; 0xaa4 <oled_print_char_of_size>
		uint8_t columb_adder = 0;
	}
	return 0;
}
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	08 95       	ret

00000b9c <oled_print_char_inverted>:

uint8_t oled_print_char_inverted(char letter) {
	if (letter == '\n') {
     b9c:	8a 30       	cpi	r24, 0x0A	; 10
     b9e:	51 f4       	brne	.+20     	; 0xbb4 <oled_print_char_inverted+0x18>
		printf_page += 1;
     ba0:	80 91 c1 02 	lds	r24, 0x02C1
     ba4:	8f 5f       	subi	r24, 0xFF	; 255
     ba6:	80 93 c1 02 	sts	0x02C1, r24
		oled_page_select(printf_page);
     baa:	21 df       	rcall	.-446    	; 0x9ee <oled_page_select>
		oled_columb_range_select(0, OLED_COLUMBS);
     bac:	60 e8       	ldi	r22, 0x80	; 128
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	0a df       	rcall	.-492    	; 0x9c6 <oled_columb_range_select>
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <oled_print_char_inverted+0x1e>
	} else {
		oled_print_char_of_size_inverted(letter, printf_size);
     bb4:	60 91 c0 02 	lds	r22, 0x02C0
     bb8:	aa df       	rcall	.-172    	; 0xb0e <oled_print_char_of_size_inverted>
		uint8_t columb_adder = 0;
	}
	return 0;
}
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	08 95       	ret

00000bbe <oled_printf>:

void oled_printf(char text[]){
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
	int lenght = strlen(text);
     bca:	fc 01       	movw	r30, r24
     bcc:	01 90       	ld	r0, Z+
     bce:	00 20       	and	r0, r0
     bd0:	e9 f7       	brne	.-6      	; 0xbcc <oled_printf+0xe>
     bd2:	31 97       	sbiw	r30, 0x01	; 1
     bd4:	7f 01       	movw	r14, r30
     bd6:	e8 1a       	sub	r14, r24
     bd8:	f9 0a       	sbc	r15, r25
	//printf("size =  %d \r\n", lenght);
	for (int c = 0; c<lenght; c++){
     bda:	1e 14       	cp	r1, r14
     bdc:	1f 04       	cpc	r1, r15
     bde:	5c f4       	brge	.+22     	; 0xbf6 <oled_printf+0x38>
     be0:	8c 01       	movw	r16, r24
     be2:	c0 e0       	ldi	r28, 0x00	; 0
     be4:	d0 e0       	ldi	r29, 0x00	; 0
		//printf("letter =  %d \r\n", c);
		oled_print_char(text[c]);
     be6:	f8 01       	movw	r30, r16
     be8:	81 91       	ld	r24, Z+
     bea:	8f 01       	movw	r16, r30
     bec:	c6 df       	rcall	.-116    	; 0xb7a <oled_print_char>
}

void oled_printf(char text[]){
	int lenght = strlen(text);
	//printf("size =  %d \r\n", lenght);
	for (int c = 0; c<lenght; c++){
     bee:	21 96       	adiw	r28, 0x01	; 1
     bf0:	ec 16       	cp	r14, r28
     bf2:	fd 06       	cpc	r15, r29
     bf4:	c1 f7       	brne	.-16     	; 0xbe6 <oled_printf+0x28>
		//printf("letter =  %d \r\n", c);
		oled_print_char(text[c]);
	}
}
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	08 95       	ret

00000c04 <oled_printf_inverted>:

void oled_printf_inverted(char text[]){
     c04:	ef 92       	push	r14
     c06:	ff 92       	push	r15
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
	int lenght = strlen(text);
     c10:	fc 01       	movw	r30, r24
     c12:	01 90       	ld	r0, Z+
     c14:	00 20       	and	r0, r0
     c16:	e9 f7       	brne	.-6      	; 0xc12 <oled_printf_inverted+0xe>
     c18:	31 97       	sbiw	r30, 0x01	; 1
     c1a:	7f 01       	movw	r14, r30
     c1c:	e8 1a       	sub	r14, r24
     c1e:	f9 0a       	sbc	r15, r25
	//printf("size =  %d \r\n", lenght);
	for (int c = 0; c<lenght; c++){
     c20:	1e 14       	cp	r1, r14
     c22:	1f 04       	cpc	r1, r15
     c24:	5c f4       	brge	.+22     	; 0xc3c <oled_printf_inverted+0x38>
     c26:	8c 01       	movw	r16, r24
     c28:	c0 e0       	ldi	r28, 0x00	; 0
     c2a:	d0 e0       	ldi	r29, 0x00	; 0
		//printf("letter =  %d \r\n", c);
		oled_print_char_inverted(text[c]);
     c2c:	f8 01       	movw	r30, r16
     c2e:	81 91       	ld	r24, Z+
     c30:	8f 01       	movw	r16, r30
     c32:	b4 df       	rcall	.-152    	; 0xb9c <oled_print_char_inverted>
}

void oled_printf_inverted(char text[]){
	int lenght = strlen(text);
	//printf("size =  %d \r\n", lenght);
	for (int c = 0; c<lenght; c++){
     c34:	21 96       	adiw	r28, 0x01	; 1
     c36:	ec 16       	cp	r14, r28
     c38:	fd 06       	cpc	r15, r29
     c3a:	c1 f7       	brne	.-16     	; 0xc2c <oled_printf_inverted+0x28>
		//printf("letter =  %d \r\n", c);
		oled_print_char_inverted(text[c]);
	}
}
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	08 95       	ret

00000c4a <oled_display_activity>:

void oled_display_activity(){
	oled_clear_screen();
     c4a:	f0 de       	rcall	.-544    	; 0xa2c <oled_clear_screen>
		if(joy_pos == i)
			oled_printf_inverted(current_activity->oled_string[i]);
		else
			oled_printf(current_activity->oled_string[i]);
	}*/
	oled_page_select(1);
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	cf de       	rcall	.-610    	; 0x9ee <oled_page_select>
	if(joy_pos == 0)
     c50:	80 91 c8 03 	lds	r24, 0x03C8
     c54:	90 91 c9 03 	lds	r25, 0x03C9
     c58:	89 2b       	or	r24, r25
     c5a:	21 f4       	brne	.+8      	; 0xc64 <oled_display_activity+0x1a>
		oled_printf_inverted("Spring \n");
     c5c:	8b e8       	ldi	r24, 0x8B	; 139
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	d1 df       	rcall	.-94     	; 0xc04 <oled_printf_inverted>
     c62:	03 c0       	rjmp	.+6      	; 0xc6a <oled_display_activity+0x20>
	else
		oled_printf("Spring \n");
     c64:	8b e8       	ldi	r24, 0x8B	; 139
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	aa df       	rcall	.-172    	; 0xbbe <oled_printf>
	
	oled_page_select(2);
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	c0 de       	rcall	.-640    	; 0x9ee <oled_page_select>
	if(joy_pos == 1)
     c6e:	80 91 c8 03 	lds	r24, 0x03C8
     c72:	90 91 c9 03 	lds	r25, 0x03C9
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	21 f4       	brne	.+8      	; 0xc82 <oled_display_activity+0x38>
		oled_printf_inverted("Summer \n");
     c7a:	84 e9       	ldi	r24, 0x94	; 148
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	c2 df       	rcall	.-124    	; 0xc04 <oled_printf_inverted>
     c80:	03 c0       	rjmp	.+6      	; 0xc88 <oled_display_activity+0x3e>
	else
		oled_printf("Summer \n");
     c82:	84 e9       	ldi	r24, 0x94	; 148
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	9b df       	rcall	.-202    	; 0xbbe <oled_printf>
	
	oled_page_select(3);
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	b1 de       	rcall	.-670    	; 0x9ee <oled_page_select>
	if(joy_pos == 2)
     c8c:	80 91 c8 03 	lds	r24, 0x03C8
     c90:	90 91 c9 03 	lds	r25, 0x03C9
     c94:	02 97       	sbiw	r24, 0x02	; 2
     c96:	21 f4       	brne	.+8      	; 0xca0 <oled_display_activity+0x56>
		oled_printf_inverted("Return \n");
     c98:	8d e9       	ldi	r24, 0x9D	; 157
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	b3 cf       	rjmp	.-154    	; 0xc04 <oled_printf_inverted>
     c9e:	08 95       	ret
	else
		oled_printf("Return \n");
     ca0:	8d e9       	ldi	r24, 0x9D	; 157
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	8c cf       	rjmp	.-232    	; 0xbbe <oled_printf>
     ca6:	08 95       	ret

00000ca8 <spi_init>:
#include "spi.h"

void spi_init() 
{
	/* Set MOSI and SCK and CS output, all others input */
	DDRB = (1 << PB5) | (1 << PB7) | (1 << PB4);
     ca8:	80 eb       	ldi	r24, 0xB0	; 176
     caa:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PB4);
     cac:	c4 9a       	sbi	0x18, 4	; 24
	/* Enable interrupt */

	// SPCR = 1<<SPIE;

	/* Enable SPI, Master, set clock rate fck/16 , SPI mode 0 by default*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);// | (1<<SPIE)
     cae:	81 e5       	ldi	r24, 0x51	; 81
     cb0:	8d b9       	out	0x0d, r24	; 13
     cb2:	08 95       	ret

00000cb4 <spi_read>:
}

void spi_read(uint8_t *receive_data, uint8_t data_length) 
{
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	2a 97       	sbiw	r28, 0x0a	; 10
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
	uint8_t dummy_data[MAX_CAN_LENGTH];
	
	for (int i = 0; i < data_length; i++)
     cc8:	66 23       	and	r22, r22
     cca:	81 f0       	breq	.+32     	; 0xcec <spi_read+0x38>
     ccc:	fe 01       	movw	r30, r28
     cce:	31 96       	adiw	r30, 0x01	; 1
     cd0:	a8 2f       	mov	r26, r24
     cd2:	b9 2f       	mov	r27, r25
     cd4:	cf 01       	movw	r24, r30
     cd6:	86 0f       	add	r24, r22
     cd8:	91 1d       	adc	r25, r1
	{
		SPDR = dummy_data[i];
     cda:	21 91       	ld	r18, Z+
     cdc:	2f b9       	out	0x0f, r18	; 15
		while (!(SPSR & (1 << SPIF)));
     cde:	77 9b       	sbis	0x0e, 7	; 14
     ce0:	fe cf       	rjmp	.-4      	; 0xcde <spi_read+0x2a>
		receive_data[i] = SPDR;
     ce2:	2f b1       	in	r18, 0x0f	; 15
     ce4:	2d 93       	st	X+, r18

void spi_read(uint8_t *receive_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	
	for (int i = 0; i < data_length; i++)
     ce6:	e8 17       	cp	r30, r24
     ce8:	f9 07       	cpc	r31, r25
     cea:	b9 f7       	brne	.-18     	; 0xcda <spi_read+0x26>
		SPDR = dummy_data[i];
		while (!(SPSR & (1 << SPIF)));
		receive_data[i] = SPDR;
	}
	
}
     cec:	2a 96       	adiw	r28, 0x0a	; 10
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	08 95       	ret

00000cfe <spi_write>:

void spi_write(uint8_t *send_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	for (int i = 0; i < data_length; i++)
     cfe:	26 2f       	mov	r18, r22
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	12 16       	cp	r1, r18
     d04:	13 06       	cpc	r1, r19
     d06:	6c f4       	brge	.+26     	; 0xd22 <spi_write+0x24>
     d08:	e8 2f       	mov	r30, r24
     d0a:	f9 2f       	mov	r31, r25
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
	{
		SPDR = send_data[i];
     d10:	41 91       	ld	r20, Z+
     d12:	4f b9       	out	0x0f, r20	; 15
		while (!(SPSR & (1 << SPIF)));
     d14:	77 9b       	sbis	0x0e, 7	; 14
     d16:	fe cf       	rjmp	.-4      	; 0xd14 <spi_write+0x16>
		dummy_data[i] = SPDR;
     d18:	4f b1       	in	r20, 0x0f	; 15
}

void spi_write(uint8_t *send_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	for (int i = 0; i < data_length; i++)
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	82 17       	cp	r24, r18
     d1e:	93 07       	cpc	r25, r19
     d20:	bc f3       	brlt	.-18     	; 0xd10 <spi_write+0x12>
     d22:	08 95       	ret

00000d24 <USART_Transmit>:

//for 5 to 8 Data bits
void USART_Transmit(unsigned char data)
{
	//wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));//or UDRE1
     d24:	5d 9b       	sbis	0x0b, 5	; 11
     d26:	fe cf       	rjmp	.-4      	; 0xd24 <USART_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;//or UDR1
     d28:	8c b9       	out	0x0c, r24	; 12
     d2a:	08 95       	ret

00000d2c <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	//Wait for data to be received
	while((UCSR0A & (1<<RXC0)));
     d2c:	5f 99       	sbic	0x0b, 7	; 11
     d2e:	fe cf       	rjmp	.-4      	; 0xd2c <USART_Receive>
	
	//Get and return data from buffer
	return UDR0;//or UDR1
     d30:	8c b1       	in	r24, 0x0c	; 12
}
     d32:	08 95       	ret

00000d34 <USART_Init>:

void USART_Init(unsigned int ubrr)
{
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
     d34:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
     d36:	89 b9       	out	0x09, r24	; 9
	
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)  | (1<<TXEN0) | (1<<RXCIE0);
     d38:	88 e9       	ldi	r24, 0x98	; 152
     d3a:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8 data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00); // or USBS1 or other one
     d3c:	8e e8       	ldi	r24, 0x8E	; 142
     d3e:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
     d40:	66 e9       	ldi	r22, 0x96	; 150
     d42:	76 e0       	ldi	r23, 0x06	; 6
     d44:	82 e9       	ldi	r24, 0x92	; 146
     d46:	96 e0       	ldi	r25, 0x06	; 6
     d48:	6c c0       	rjmp	.+216    	; 0xe22 <fdevopen>
     d4a:	08 95       	ret

00000d4c <xmem_init>:

uint8_t xmem_read(uint16_t addr){
	volatile char *ext_mem = (char*) BASE_ADDRESS;
	uint8_t ret_val = ext_mem[addr];
	return ret_val;
}
     d4c:	85 b7       	in	r24, 0x35	; 53
     d4e:	80 68       	ori	r24, 0x80	; 128
     d50:	85 bf       	out	0x35, r24	; 53
     d52:	80 b7       	in	r24, 0x30	; 48
     d54:	80 62       	ori	r24, 0x20	; 32
     d56:	80 bf       	out	0x30, r24	; 48
     d58:	08 95       	ret

00000d5a <main>:


int main(void){
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	6a 97       	sbiw	r28, 0x1a	; 26
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
	
	USART_Init(MYUBRR);
     d6e:	8f e1       	ldi	r24, 0x1F	; 31
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	e0 df       	rcall	.-64     	; 0xd34 <USART_Init>
	xmem_init();
     d74:	eb df       	rcall	.-42     	; 0xd4c <xmem_init>
	
	uint8_t data = 5;
	DDRB &= ~(0b0111);
     d76:	87 b3       	in	r24, 0x17	; 23
     d78:	88 7f       	andi	r24, 0xF8	; 248
     d7a:	87 bb       	out	0x17, r24	; 23
	//SRAM_test();
	
	int left_s = 0, right_s = 0, x = 0, y = 0;
	int temp_value = NEUTRAL;
	oled_init();
     d7c:	60 de       	rcall	.-832    	; 0xa3e <oled_init>
	adc_init();
     d7e:	bc dc       	rcall	.-1672   	; 0x6f8 <adc_init>
	oled_display_activity();	
     d80:	64 df       	rcall	.-312    	; 0xc4a <oled_display_activity>
	
	
	
	
	
	can_init();
     d82:	c1 dc       	rcall	.-1662   	; 0x706 <can_init>
	struct can_message message;
	message.id = 3;
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	89 83       	std	Y+1, r24	; 0x01
	message.length = 1;
     d8c:	31 e0       	ldi	r19, 0x01	; 1
     d8e:	3b 83       	std	Y+3, r19	; 0x03
	message.data[0] = (uint8_t) 'c';
     d90:	23 e6       	ldi	r18, 0x63	; 99
     d92:	2c 83       	std	Y+4, r18	; 0x04
	
	
	struct can_message message2;
	message2.id = 3;
     d94:	9f 87       	std	Y+15, r25	; 0x0f
     d96:	8e 87       	std	Y+14, r24	; 0x0e
	message2.length = 1;
     d98:	38 8b       	std	Y+16, r19	; 0x10
	
	
	printf("In the main send %c \n\r", message.data[0]);
     d9a:	1f 92       	push	r1
     d9c:	2f 93       	push	r18
     d9e:	8b e8       	ldi	r24, 0x8B	; 139
     da0:	92 e0       	ldi	r25, 0x02	; 2
     da2:	9f 93       	push	r25
     da4:	8f 93       	push	r24
     da6:	87 d0       	rcall	.+270    	; 0xeb6 <printf>
	
	can_message_send(&message);
     da8:	ce 01       	movw	r24, r28
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	02 dd       	rcall	.-1532   	; 0x7b2 <can_message_send>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 ef       	ldi	r25, 0xF0	; 240
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <main+0x58>
	_delay_ms(50);
	can_data_receive(&message2);
     db6:	ce 01       	movw	r24, r28
     db8:	0e 96       	adiw	r24, 0x0e	; 14
     dba:	3f dd       	rcall	.-1410   	; 0x83a <can_data_receive>
	
	
	printf("In the main received %c \n\r \n\r", message2.data[0]);
     dbc:	89 89       	ldd	r24, Y+17	; 0x11
     dbe:	1f 92       	push	r1
     dc0:	8f 93       	push	r24
     dc2:	82 ea       	ldi	r24, 0xA2	; 162
     dc4:	92 e0       	ldi	r25, 0x02	; 2
     dc6:	9f 93       	push	r25
     dc8:	8f 93       	push	r24
     dca:	75 d0       	rcall	.+234    	; 0xeb6 <printf>
	
	message.data[0] = (uint8_t) 'g';
     dcc:	87 e6       	ldi	r24, 0x67	; 103
     dce:	8c 83       	std	Y+4, r24	; 0x04
	
	printf("In the main send %c \n\r", message.data[0]);
     dd0:	1f 92       	push	r1
     dd2:	8f 93       	push	r24
     dd4:	8b e8       	ldi	r24, 0x8B	; 139
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	9f 93       	push	r25
     dda:	8f 93       	push	r24
     ddc:	6c d0       	rcall	.+216    	; 0xeb6 <printf>
	
	can_message_send(&message);
     dde:	ce 01       	movw	r24, r28
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	e7 dc       	rcall	.-1586   	; 0x7b2 <can_message_send>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 ef       	ldi	r25, 0xF0	; 240
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <main+0x8e>
	_delay_ms(50);
	can_data_receive(&message2);
     dec:	ce 01       	movw	r24, r28
     dee:	0e 96       	adiw	r24, 0x0e	; 14
     df0:	24 dd       	rcall	.-1464   	; 0x83a <can_data_receive>
	
	
	printf("In the main received %c \n\r \n\r", message2.data[0]);
     df2:	89 89       	ldd	r24, Y+17	; 0x11
     df4:	1f 92       	push	r1
     df6:	8f 93       	push	r24
     df8:	82 ea       	ldi	r24, 0xA2	; 162
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	9f 93       	push	r25
     dfe:	8f 93       	push	r24
     e00:	5a d0       	rcall	.+180    	; 0xeb6 <printf>
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
		
	//}
	
	
	return 0;
}
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	6a 96       	adiw	r28, 0x1a	; 26
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	08 95       	ret

00000e22 <fdevopen>:
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	ec 01       	movw	r28, r24
     e2c:	8b 01       	movw	r16, r22
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	31 f4       	brne	.+12     	; 0xe3e <fdevopen+0x1c>
     e32:	61 15       	cp	r22, r1
     e34:	71 05       	cpc	r23, r1
     e36:	19 f4       	brne	.+6      	; 0xe3e <fdevopen+0x1c>
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	37 c0       	rjmp	.+110    	; 0xeac <fdevopen+0x8a>
     e3e:	6e e0       	ldi	r22, 0x0E	; 14
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0b d2       	rcall	.+1046   	; 0x125e <calloc>
     e48:	fc 01       	movw	r30, r24
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	a9 f3       	breq	.-22     	; 0xe38 <fdevopen+0x16>
     e4e:	80 e8       	ldi	r24, 0x80	; 128
     e50:	83 83       	std	Z+3, r24	; 0x03
     e52:	01 15       	cp	r16, r1
     e54:	11 05       	cpc	r17, r1
     e56:	71 f0       	breq	.+28     	; 0xe74 <fdevopen+0x52>
     e58:	13 87       	std	Z+11, r17	; 0x0b
     e5a:	02 87       	std	Z+10, r16	; 0x0a
     e5c:	81 e8       	ldi	r24, 0x81	; 129
     e5e:	83 83       	std	Z+3, r24	; 0x03
     e60:	80 91 ca 03 	lds	r24, 0x03CA
     e64:	90 91 cb 03 	lds	r25, 0x03CB
     e68:	89 2b       	or	r24, r25
     e6a:	21 f4       	brne	.+8      	; 0xe74 <fdevopen+0x52>
     e6c:	f0 93 cb 03 	sts	0x03CB, r31
     e70:	e0 93 ca 03 	sts	0x03CA, r30
     e74:	20 97       	sbiw	r28, 0x00	; 0
     e76:	c9 f0       	breq	.+50     	; 0xeaa <fdevopen+0x88>
     e78:	d1 87       	std	Z+9, r29	; 0x09
     e7a:	c0 87       	std	Z+8, r28	; 0x08
     e7c:	83 81       	ldd	r24, Z+3	; 0x03
     e7e:	82 60       	ori	r24, 0x02	; 2
     e80:	83 83       	std	Z+3, r24	; 0x03
     e82:	80 91 cc 03 	lds	r24, 0x03CC
     e86:	90 91 cd 03 	lds	r25, 0x03CD
     e8a:	89 2b       	or	r24, r25
     e8c:	71 f4       	brne	.+28     	; 0xeaa <fdevopen+0x88>
     e8e:	f0 93 cd 03 	sts	0x03CD, r31
     e92:	e0 93 cc 03 	sts	0x03CC, r30
     e96:	80 91 ce 03 	lds	r24, 0x03CE
     e9a:	90 91 cf 03 	lds	r25, 0x03CF
     e9e:	89 2b       	or	r24, r25
     ea0:	21 f4       	brne	.+8      	; 0xeaa <fdevopen+0x88>
     ea2:	f0 93 cf 03 	sts	0x03CF, r31
     ea6:	e0 93 ce 03 	sts	0x03CE, r30
     eaa:	cf 01       	movw	r24, r30
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	08 95       	ret

00000eb6 <printf>:
     eb6:	a0 e0       	ldi	r26, 0x00	; 0
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e0 e6       	ldi	r30, 0x60	; 96
     ebc:	f7 e0       	ldi	r31, 0x07	; 7
     ebe:	cd c3       	rjmp	.+1946   	; 0x165a <__prologue_saves__+0x20>
     ec0:	fe 01       	movw	r30, r28
     ec2:	35 96       	adiw	r30, 0x05	; 5
     ec4:	61 91       	ld	r22, Z+
     ec6:	71 91       	ld	r23, Z+
     ec8:	af 01       	movw	r20, r30
     eca:	80 91 cc 03 	lds	r24, 0x03CC
     ece:	90 91 cd 03 	lds	r25, 0x03CD
     ed2:	02 d0       	rcall	.+4      	; 0xed8 <vfprintf>
     ed4:	e2 e0       	ldi	r30, 0x02	; 2
     ed6:	dd c3       	rjmp	.+1978   	; 0x1692 <__epilogue_restores__+0x20>

00000ed8 <vfprintf>:
     ed8:	ac e0       	ldi	r26, 0x0C	; 12
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e1 e7       	ldi	r30, 0x71	; 113
     ede:	f7 e0       	ldi	r31, 0x07	; 7
     ee0:	ac c3       	rjmp	.+1880   	; 0x163a <__prologue_saves__>
     ee2:	7c 01       	movw	r14, r24
     ee4:	6b 01       	movw	r12, r22
     ee6:	8a 01       	movw	r16, r20
     ee8:	fc 01       	movw	r30, r24
     eea:	17 82       	std	Z+7, r1	; 0x07
     eec:	16 82       	std	Z+6, r1	; 0x06
     eee:	83 81       	ldd	r24, Z+3	; 0x03
     ef0:	81 ff       	sbrs	r24, 1
     ef2:	b0 c1       	rjmp	.+864    	; 0x1254 <vfprintf+0x37c>
     ef4:	ce 01       	movw	r24, r28
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	4c 01       	movw	r8, r24
     efa:	f7 01       	movw	r30, r14
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	f6 01       	movw	r30, r12
     f00:	93 fd       	sbrc	r25, 3
     f02:	85 91       	lpm	r24, Z+
     f04:	93 ff       	sbrs	r25, 3
     f06:	81 91       	ld	r24, Z+
     f08:	6f 01       	movw	r12, r30
     f0a:	88 23       	and	r24, r24
     f0c:	09 f4       	brne	.+2      	; 0xf10 <vfprintf+0x38>
     f0e:	9e c1       	rjmp	.+828    	; 0x124c <vfprintf+0x374>
     f10:	85 32       	cpi	r24, 0x25	; 37
     f12:	39 f4       	brne	.+14     	; 0xf22 <vfprintf+0x4a>
     f14:	93 fd       	sbrc	r25, 3
     f16:	85 91       	lpm	r24, Z+
     f18:	93 ff       	sbrs	r25, 3
     f1a:	81 91       	ld	r24, Z+
     f1c:	6f 01       	movw	r12, r30
     f1e:	85 32       	cpi	r24, 0x25	; 37
     f20:	21 f4       	brne	.+8      	; 0xf2a <vfprintf+0x52>
     f22:	b7 01       	movw	r22, r14
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	f9 d2       	rcall	.+1522   	; 0x151a <fputc>
     f28:	e8 cf       	rjmp	.-48     	; 0xefa <vfprintf+0x22>
     f2a:	51 2c       	mov	r5, r1
     f2c:	31 2c       	mov	r3, r1
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	20 32       	cpi	r18, 0x20	; 32
     f32:	a0 f4       	brcc	.+40     	; 0xf5c <vfprintf+0x84>
     f34:	8b 32       	cpi	r24, 0x2B	; 43
     f36:	69 f0       	breq	.+26     	; 0xf52 <vfprintf+0x7a>
     f38:	30 f4       	brcc	.+12     	; 0xf46 <vfprintf+0x6e>
     f3a:	80 32       	cpi	r24, 0x20	; 32
     f3c:	59 f0       	breq	.+22     	; 0xf54 <vfprintf+0x7c>
     f3e:	83 32       	cpi	r24, 0x23	; 35
     f40:	69 f4       	brne	.+26     	; 0xf5c <vfprintf+0x84>
     f42:	20 61       	ori	r18, 0x10	; 16
     f44:	2c c0       	rjmp	.+88     	; 0xf9e <vfprintf+0xc6>
     f46:	8d 32       	cpi	r24, 0x2D	; 45
     f48:	39 f0       	breq	.+14     	; 0xf58 <vfprintf+0x80>
     f4a:	80 33       	cpi	r24, 0x30	; 48
     f4c:	39 f4       	brne	.+14     	; 0xf5c <vfprintf+0x84>
     f4e:	21 60       	ori	r18, 0x01	; 1
     f50:	26 c0       	rjmp	.+76     	; 0xf9e <vfprintf+0xc6>
     f52:	22 60       	ori	r18, 0x02	; 2
     f54:	24 60       	ori	r18, 0x04	; 4
     f56:	23 c0       	rjmp	.+70     	; 0xf9e <vfprintf+0xc6>
     f58:	28 60       	ori	r18, 0x08	; 8
     f5a:	21 c0       	rjmp	.+66     	; 0xf9e <vfprintf+0xc6>
     f5c:	27 fd       	sbrc	r18, 7
     f5e:	27 c0       	rjmp	.+78     	; 0xfae <vfprintf+0xd6>
     f60:	30 ed       	ldi	r19, 0xD0	; 208
     f62:	38 0f       	add	r19, r24
     f64:	3a 30       	cpi	r19, 0x0A	; 10
     f66:	78 f4       	brcc	.+30     	; 0xf86 <vfprintf+0xae>
     f68:	26 ff       	sbrs	r18, 6
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <vfprintf+0xa0>
     f6c:	fa e0       	ldi	r31, 0x0A	; 10
     f6e:	5f 9e       	mul	r5, r31
     f70:	30 0d       	add	r19, r0
     f72:	11 24       	eor	r1, r1
     f74:	53 2e       	mov	r5, r19
     f76:	13 c0       	rjmp	.+38     	; 0xf9e <vfprintf+0xc6>
     f78:	8a e0       	ldi	r24, 0x0A	; 10
     f7a:	38 9e       	mul	r3, r24
     f7c:	30 0d       	add	r19, r0
     f7e:	11 24       	eor	r1, r1
     f80:	33 2e       	mov	r3, r19
     f82:	20 62       	ori	r18, 0x20	; 32
     f84:	0c c0       	rjmp	.+24     	; 0xf9e <vfprintf+0xc6>
     f86:	8e 32       	cpi	r24, 0x2E	; 46
     f88:	21 f4       	brne	.+8      	; 0xf92 <vfprintf+0xba>
     f8a:	26 fd       	sbrc	r18, 6
     f8c:	5f c1       	rjmp	.+702    	; 0x124c <vfprintf+0x374>
     f8e:	20 64       	ori	r18, 0x40	; 64
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <vfprintf+0xc6>
     f92:	8c 36       	cpi	r24, 0x6C	; 108
     f94:	11 f4       	brne	.+4      	; 0xf9a <vfprintf+0xc2>
     f96:	20 68       	ori	r18, 0x80	; 128
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <vfprintf+0xc6>
     f9a:	88 36       	cpi	r24, 0x68	; 104
     f9c:	41 f4       	brne	.+16     	; 0xfae <vfprintf+0xd6>
     f9e:	f6 01       	movw	r30, r12
     fa0:	93 fd       	sbrc	r25, 3
     fa2:	85 91       	lpm	r24, Z+
     fa4:	93 ff       	sbrs	r25, 3
     fa6:	81 91       	ld	r24, Z+
     fa8:	6f 01       	movw	r12, r30
     faa:	81 11       	cpse	r24, r1
     fac:	c1 cf       	rjmp	.-126    	; 0xf30 <vfprintf+0x58>
     fae:	98 2f       	mov	r25, r24
     fb0:	9f 7d       	andi	r25, 0xDF	; 223
     fb2:	95 54       	subi	r25, 0x45	; 69
     fb4:	93 30       	cpi	r25, 0x03	; 3
     fb6:	28 f4       	brcc	.+10     	; 0xfc2 <vfprintf+0xea>
     fb8:	0c 5f       	subi	r16, 0xFC	; 252
     fba:	1f 4f       	sbci	r17, 0xFF	; 255
     fbc:	ff e3       	ldi	r31, 0x3F	; 63
     fbe:	f9 83       	std	Y+1, r31	; 0x01
     fc0:	0d c0       	rjmp	.+26     	; 0xfdc <vfprintf+0x104>
     fc2:	83 36       	cpi	r24, 0x63	; 99
     fc4:	31 f0       	breq	.+12     	; 0xfd2 <vfprintf+0xfa>
     fc6:	83 37       	cpi	r24, 0x73	; 115
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <vfprintf+0x10e>
     fca:	83 35       	cpi	r24, 0x53	; 83
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <vfprintf+0xf8>
     fce:	57 c0       	rjmp	.+174    	; 0x107e <vfprintf+0x1a6>
     fd0:	21 c0       	rjmp	.+66     	; 0x1014 <vfprintf+0x13c>
     fd2:	f8 01       	movw	r30, r16
     fd4:	80 81       	ld	r24, Z
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	0e 5f       	subi	r16, 0xFE	; 254
     fda:	1f 4f       	sbci	r17, 0xFF	; 255
     fdc:	44 24       	eor	r4, r4
     fde:	43 94       	inc	r4
     fe0:	51 2c       	mov	r5, r1
     fe2:	54 01       	movw	r10, r8
     fe4:	14 c0       	rjmp	.+40     	; 0x100e <vfprintf+0x136>
     fe6:	38 01       	movw	r6, r16
     fe8:	f2 e0       	ldi	r31, 0x02	; 2
     fea:	6f 0e       	add	r6, r31
     fec:	71 1c       	adc	r7, r1
     fee:	f8 01       	movw	r30, r16
     ff0:	a0 80       	ld	r10, Z
     ff2:	b1 80       	ldd	r11, Z+1	; 0x01
     ff4:	26 ff       	sbrs	r18, 6
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <vfprintf+0x126>
     ff8:	65 2d       	mov	r22, r5
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <vfprintf+0x12a>
     ffe:	6f ef       	ldi	r22, 0xFF	; 255
    1000:	7f ef       	ldi	r23, 0xFF	; 255
    1002:	c5 01       	movw	r24, r10
    1004:	2c 87       	std	Y+12, r18	; 0x0c
    1006:	7e d2       	rcall	.+1276   	; 0x1504 <strnlen>
    1008:	2c 01       	movw	r4, r24
    100a:	83 01       	movw	r16, r6
    100c:	2c 85       	ldd	r18, Y+12	; 0x0c
    100e:	2f 77       	andi	r18, 0x7F	; 127
    1010:	22 2e       	mov	r2, r18
    1012:	16 c0       	rjmp	.+44     	; 0x1040 <vfprintf+0x168>
    1014:	38 01       	movw	r6, r16
    1016:	f2 e0       	ldi	r31, 0x02	; 2
    1018:	6f 0e       	add	r6, r31
    101a:	71 1c       	adc	r7, r1
    101c:	f8 01       	movw	r30, r16
    101e:	a0 80       	ld	r10, Z
    1020:	b1 80       	ldd	r11, Z+1	; 0x01
    1022:	26 ff       	sbrs	r18, 6
    1024:	03 c0       	rjmp	.+6      	; 0x102c <vfprintf+0x154>
    1026:	65 2d       	mov	r22, r5
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <vfprintf+0x158>
    102c:	6f ef       	ldi	r22, 0xFF	; 255
    102e:	7f ef       	ldi	r23, 0xFF	; 255
    1030:	c5 01       	movw	r24, r10
    1032:	2c 87       	std	Y+12, r18	; 0x0c
    1034:	55 d2       	rcall	.+1194   	; 0x14e0 <strnlen_P>
    1036:	2c 01       	movw	r4, r24
    1038:	2c 85       	ldd	r18, Y+12	; 0x0c
    103a:	20 68       	ori	r18, 0x80	; 128
    103c:	22 2e       	mov	r2, r18
    103e:	83 01       	movw	r16, r6
    1040:	23 fc       	sbrc	r2, 3
    1042:	19 c0       	rjmp	.+50     	; 0x1076 <vfprintf+0x19e>
    1044:	83 2d       	mov	r24, r3
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	48 16       	cp	r4, r24
    104a:	59 06       	cpc	r5, r25
    104c:	a0 f4       	brcc	.+40     	; 0x1076 <vfprintf+0x19e>
    104e:	b7 01       	movw	r22, r14
    1050:	80 e2       	ldi	r24, 0x20	; 32
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	62 d2       	rcall	.+1220   	; 0x151a <fputc>
    1056:	3a 94       	dec	r3
    1058:	f5 cf       	rjmp	.-22     	; 0x1044 <vfprintf+0x16c>
    105a:	f5 01       	movw	r30, r10
    105c:	27 fc       	sbrc	r2, 7
    105e:	85 91       	lpm	r24, Z+
    1060:	27 fe       	sbrs	r2, 7
    1062:	81 91       	ld	r24, Z+
    1064:	5f 01       	movw	r10, r30
    1066:	b7 01       	movw	r22, r14
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	57 d2       	rcall	.+1198   	; 0x151a <fputc>
    106c:	31 10       	cpse	r3, r1
    106e:	3a 94       	dec	r3
    1070:	f1 e0       	ldi	r31, 0x01	; 1
    1072:	4f 1a       	sub	r4, r31
    1074:	51 08       	sbc	r5, r1
    1076:	41 14       	cp	r4, r1
    1078:	51 04       	cpc	r5, r1
    107a:	79 f7       	brne	.-34     	; 0x105a <vfprintf+0x182>
    107c:	de c0       	rjmp	.+444    	; 0x123a <vfprintf+0x362>
    107e:	84 36       	cpi	r24, 0x64	; 100
    1080:	11 f0       	breq	.+4      	; 0x1086 <vfprintf+0x1ae>
    1082:	89 36       	cpi	r24, 0x69	; 105
    1084:	31 f5       	brne	.+76     	; 0x10d2 <vfprintf+0x1fa>
    1086:	f8 01       	movw	r30, r16
    1088:	27 ff       	sbrs	r18, 7
    108a:	07 c0       	rjmp	.+14     	; 0x109a <vfprintf+0x1c2>
    108c:	60 81       	ld	r22, Z
    108e:	71 81       	ldd	r23, Z+1	; 0x01
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	0c 5f       	subi	r16, 0xFC	; 252
    1096:	1f 4f       	sbci	r17, 0xFF	; 255
    1098:	08 c0       	rjmp	.+16     	; 0x10aa <vfprintf+0x1d2>
    109a:	60 81       	ld	r22, Z
    109c:	71 81       	ldd	r23, Z+1	; 0x01
    109e:	88 27       	eor	r24, r24
    10a0:	77 fd       	sbrc	r23, 7
    10a2:	80 95       	com	r24
    10a4:	98 2f       	mov	r25, r24
    10a6:	0e 5f       	subi	r16, 0xFE	; 254
    10a8:	1f 4f       	sbci	r17, 0xFF	; 255
    10aa:	2f 76       	andi	r18, 0x6F	; 111
    10ac:	b2 2e       	mov	r11, r18
    10ae:	97 ff       	sbrs	r25, 7
    10b0:	09 c0       	rjmp	.+18     	; 0x10c4 <vfprintf+0x1ec>
    10b2:	90 95       	com	r25
    10b4:	80 95       	com	r24
    10b6:	70 95       	com	r23
    10b8:	61 95       	neg	r22
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	8f 4f       	sbci	r24, 0xFF	; 255
    10be:	9f 4f       	sbci	r25, 0xFF	; 255
    10c0:	20 68       	ori	r18, 0x80	; 128
    10c2:	b2 2e       	mov	r11, r18
    10c4:	2a e0       	ldi	r18, 0x0A	; 10
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	a4 01       	movw	r20, r8
    10ca:	59 d2       	rcall	.+1202   	; 0x157e <__ultoa_invert>
    10cc:	a8 2e       	mov	r10, r24
    10ce:	a8 18       	sub	r10, r8
    10d0:	43 c0       	rjmp	.+134    	; 0x1158 <vfprintf+0x280>
    10d2:	85 37       	cpi	r24, 0x75	; 117
    10d4:	29 f4       	brne	.+10     	; 0x10e0 <vfprintf+0x208>
    10d6:	2f 7e       	andi	r18, 0xEF	; 239
    10d8:	b2 2e       	mov	r11, r18
    10da:	2a e0       	ldi	r18, 0x0A	; 10
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	25 c0       	rjmp	.+74     	; 0x112a <vfprintf+0x252>
    10e0:	f2 2f       	mov	r31, r18
    10e2:	f9 7f       	andi	r31, 0xF9	; 249
    10e4:	bf 2e       	mov	r11, r31
    10e6:	8f 36       	cpi	r24, 0x6F	; 111
    10e8:	c1 f0       	breq	.+48     	; 0x111a <vfprintf+0x242>
    10ea:	18 f4       	brcc	.+6      	; 0x10f2 <vfprintf+0x21a>
    10ec:	88 35       	cpi	r24, 0x58	; 88
    10ee:	79 f0       	breq	.+30     	; 0x110e <vfprintf+0x236>
    10f0:	ad c0       	rjmp	.+346    	; 0x124c <vfprintf+0x374>
    10f2:	80 37       	cpi	r24, 0x70	; 112
    10f4:	19 f0       	breq	.+6      	; 0x10fc <vfprintf+0x224>
    10f6:	88 37       	cpi	r24, 0x78	; 120
    10f8:	21 f0       	breq	.+8      	; 0x1102 <vfprintf+0x22a>
    10fa:	a8 c0       	rjmp	.+336    	; 0x124c <vfprintf+0x374>
    10fc:	2f 2f       	mov	r18, r31
    10fe:	20 61       	ori	r18, 0x10	; 16
    1100:	b2 2e       	mov	r11, r18
    1102:	b4 fe       	sbrs	r11, 4
    1104:	0d c0       	rjmp	.+26     	; 0x1120 <vfprintf+0x248>
    1106:	8b 2d       	mov	r24, r11
    1108:	84 60       	ori	r24, 0x04	; 4
    110a:	b8 2e       	mov	r11, r24
    110c:	09 c0       	rjmp	.+18     	; 0x1120 <vfprintf+0x248>
    110e:	24 ff       	sbrs	r18, 4
    1110:	0a c0       	rjmp	.+20     	; 0x1126 <vfprintf+0x24e>
    1112:	9f 2f       	mov	r25, r31
    1114:	96 60       	ori	r25, 0x06	; 6
    1116:	b9 2e       	mov	r11, r25
    1118:	06 c0       	rjmp	.+12     	; 0x1126 <vfprintf+0x24e>
    111a:	28 e0       	ldi	r18, 0x08	; 8
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	05 c0       	rjmp	.+10     	; 0x112a <vfprintf+0x252>
    1120:	20 e1       	ldi	r18, 0x10	; 16
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	02 c0       	rjmp	.+4      	; 0x112a <vfprintf+0x252>
    1126:	20 e1       	ldi	r18, 0x10	; 16
    1128:	32 e0       	ldi	r19, 0x02	; 2
    112a:	f8 01       	movw	r30, r16
    112c:	b7 fe       	sbrs	r11, 7
    112e:	07 c0       	rjmp	.+14     	; 0x113e <vfprintf+0x266>
    1130:	60 81       	ld	r22, Z
    1132:	71 81       	ldd	r23, Z+1	; 0x01
    1134:	82 81       	ldd	r24, Z+2	; 0x02
    1136:	93 81       	ldd	r25, Z+3	; 0x03
    1138:	0c 5f       	subi	r16, 0xFC	; 252
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	06 c0       	rjmp	.+12     	; 0x114a <vfprintf+0x272>
    113e:	60 81       	ld	r22, Z
    1140:	71 81       	ldd	r23, Z+1	; 0x01
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 5f       	subi	r16, 0xFE	; 254
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
    114a:	a4 01       	movw	r20, r8
    114c:	18 d2       	rcall	.+1072   	; 0x157e <__ultoa_invert>
    114e:	a8 2e       	mov	r10, r24
    1150:	a8 18       	sub	r10, r8
    1152:	fb 2d       	mov	r31, r11
    1154:	ff 77       	andi	r31, 0x7F	; 127
    1156:	bf 2e       	mov	r11, r31
    1158:	b6 fe       	sbrs	r11, 6
    115a:	0b c0       	rjmp	.+22     	; 0x1172 <vfprintf+0x29a>
    115c:	2b 2d       	mov	r18, r11
    115e:	2e 7f       	andi	r18, 0xFE	; 254
    1160:	a5 14       	cp	r10, r5
    1162:	50 f4       	brcc	.+20     	; 0x1178 <vfprintf+0x2a0>
    1164:	b4 fe       	sbrs	r11, 4
    1166:	0a c0       	rjmp	.+20     	; 0x117c <vfprintf+0x2a4>
    1168:	b2 fc       	sbrc	r11, 2
    116a:	08 c0       	rjmp	.+16     	; 0x117c <vfprintf+0x2a4>
    116c:	2b 2d       	mov	r18, r11
    116e:	2e 7e       	andi	r18, 0xEE	; 238
    1170:	05 c0       	rjmp	.+10     	; 0x117c <vfprintf+0x2a4>
    1172:	7a 2c       	mov	r7, r10
    1174:	2b 2d       	mov	r18, r11
    1176:	03 c0       	rjmp	.+6      	; 0x117e <vfprintf+0x2a6>
    1178:	7a 2c       	mov	r7, r10
    117a:	01 c0       	rjmp	.+2      	; 0x117e <vfprintf+0x2a6>
    117c:	75 2c       	mov	r7, r5
    117e:	24 ff       	sbrs	r18, 4
    1180:	0d c0       	rjmp	.+26     	; 0x119c <vfprintf+0x2c4>
    1182:	fe 01       	movw	r30, r28
    1184:	ea 0d       	add	r30, r10
    1186:	f1 1d       	adc	r31, r1
    1188:	80 81       	ld	r24, Z
    118a:	80 33       	cpi	r24, 0x30	; 48
    118c:	11 f4       	brne	.+4      	; 0x1192 <vfprintf+0x2ba>
    118e:	29 7e       	andi	r18, 0xE9	; 233
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <vfprintf+0x2cc>
    1192:	22 ff       	sbrs	r18, 2
    1194:	06 c0       	rjmp	.+12     	; 0x11a2 <vfprintf+0x2ca>
    1196:	73 94       	inc	r7
    1198:	73 94       	inc	r7
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <vfprintf+0x2cc>
    119c:	82 2f       	mov	r24, r18
    119e:	86 78       	andi	r24, 0x86	; 134
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <vfprintf+0x2cc>
    11a2:	73 94       	inc	r7
    11a4:	23 fd       	sbrc	r18, 3
    11a6:	12 c0       	rjmp	.+36     	; 0x11cc <vfprintf+0x2f4>
    11a8:	20 ff       	sbrs	r18, 0
    11aa:	06 c0       	rjmp	.+12     	; 0x11b8 <vfprintf+0x2e0>
    11ac:	5a 2c       	mov	r5, r10
    11ae:	73 14       	cp	r7, r3
    11b0:	18 f4       	brcc	.+6      	; 0x11b8 <vfprintf+0x2e0>
    11b2:	53 0c       	add	r5, r3
    11b4:	57 18       	sub	r5, r7
    11b6:	73 2c       	mov	r7, r3
    11b8:	73 14       	cp	r7, r3
    11ba:	60 f4       	brcc	.+24     	; 0x11d4 <vfprintf+0x2fc>
    11bc:	b7 01       	movw	r22, r14
    11be:	80 e2       	ldi	r24, 0x20	; 32
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	2c 87       	std	Y+12, r18	; 0x0c
    11c4:	aa d1       	rcall	.+852    	; 0x151a <fputc>
    11c6:	73 94       	inc	r7
    11c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    11ca:	f6 cf       	rjmp	.-20     	; 0x11b8 <vfprintf+0x2e0>
    11cc:	73 14       	cp	r7, r3
    11ce:	10 f4       	brcc	.+4      	; 0x11d4 <vfprintf+0x2fc>
    11d0:	37 18       	sub	r3, r7
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <vfprintf+0x2fe>
    11d4:	31 2c       	mov	r3, r1
    11d6:	24 ff       	sbrs	r18, 4
    11d8:	11 c0       	rjmp	.+34     	; 0x11fc <vfprintf+0x324>
    11da:	b7 01       	movw	r22, r14
    11dc:	80 e3       	ldi	r24, 0x30	; 48
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	2c 87       	std	Y+12, r18	; 0x0c
    11e2:	9b d1       	rcall	.+822    	; 0x151a <fputc>
    11e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    11e6:	22 ff       	sbrs	r18, 2
    11e8:	16 c0       	rjmp	.+44     	; 0x1216 <vfprintf+0x33e>
    11ea:	21 ff       	sbrs	r18, 1
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <vfprintf+0x31c>
    11ee:	88 e5       	ldi	r24, 0x58	; 88
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <vfprintf+0x320>
    11f4:	88 e7       	ldi	r24, 0x78	; 120
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	b7 01       	movw	r22, r14
    11fa:	0c c0       	rjmp	.+24     	; 0x1214 <vfprintf+0x33c>
    11fc:	82 2f       	mov	r24, r18
    11fe:	86 78       	andi	r24, 0x86	; 134
    1200:	51 f0       	breq	.+20     	; 0x1216 <vfprintf+0x33e>
    1202:	21 fd       	sbrc	r18, 1
    1204:	02 c0       	rjmp	.+4      	; 0x120a <vfprintf+0x332>
    1206:	80 e2       	ldi	r24, 0x20	; 32
    1208:	01 c0       	rjmp	.+2      	; 0x120c <vfprintf+0x334>
    120a:	8b e2       	ldi	r24, 0x2B	; 43
    120c:	27 fd       	sbrc	r18, 7
    120e:	8d e2       	ldi	r24, 0x2D	; 45
    1210:	b7 01       	movw	r22, r14
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	82 d1       	rcall	.+772    	; 0x151a <fputc>
    1216:	a5 14       	cp	r10, r5
    1218:	30 f4       	brcc	.+12     	; 0x1226 <vfprintf+0x34e>
    121a:	b7 01       	movw	r22, r14
    121c:	80 e3       	ldi	r24, 0x30	; 48
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	7c d1       	rcall	.+760    	; 0x151a <fputc>
    1222:	5a 94       	dec	r5
    1224:	f8 cf       	rjmp	.-16     	; 0x1216 <vfprintf+0x33e>
    1226:	aa 94       	dec	r10
    1228:	f4 01       	movw	r30, r8
    122a:	ea 0d       	add	r30, r10
    122c:	f1 1d       	adc	r31, r1
    122e:	80 81       	ld	r24, Z
    1230:	b7 01       	movw	r22, r14
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	72 d1       	rcall	.+740    	; 0x151a <fputc>
    1236:	a1 10       	cpse	r10, r1
    1238:	f6 cf       	rjmp	.-20     	; 0x1226 <vfprintf+0x34e>
    123a:	33 20       	and	r3, r3
    123c:	09 f4       	brne	.+2      	; 0x1240 <vfprintf+0x368>
    123e:	5d ce       	rjmp	.-838    	; 0xefa <vfprintf+0x22>
    1240:	b7 01       	movw	r22, r14
    1242:	80 e2       	ldi	r24, 0x20	; 32
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	69 d1       	rcall	.+722    	; 0x151a <fputc>
    1248:	3a 94       	dec	r3
    124a:	f7 cf       	rjmp	.-18     	; 0x123a <vfprintf+0x362>
    124c:	f7 01       	movw	r30, r14
    124e:	86 81       	ldd	r24, Z+6	; 0x06
    1250:	97 81       	ldd	r25, Z+7	; 0x07
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <vfprintf+0x380>
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	9f ef       	ldi	r25, 0xFF	; 255
    1258:	2c 96       	adiw	r28, 0x0c	; 12
    125a:	e2 e1       	ldi	r30, 0x12	; 18
    125c:	0a c2       	rjmp	.+1044   	; 0x1672 <__epilogue_restores__>

0000125e <calloc>:
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	86 9f       	mul	r24, r22
    1268:	80 01       	movw	r16, r0
    126a:	87 9f       	mul	r24, r23
    126c:	10 0d       	add	r17, r0
    126e:	96 9f       	mul	r25, r22
    1270:	10 0d       	add	r17, r0
    1272:	11 24       	eor	r1, r1
    1274:	c8 01       	movw	r24, r16
    1276:	0d d0       	rcall	.+26     	; 0x1292 <malloc>
    1278:	ec 01       	movw	r28, r24
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	21 f0       	breq	.+8      	; 0x1286 <calloc+0x28>
    127e:	a8 01       	movw	r20, r16
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	38 d1       	rcall	.+624    	; 0x14f6 <memset>
    1286:	ce 01       	movw	r24, r28
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	08 95       	ret

00001292 <malloc>:
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	82 30       	cpi	r24, 0x02	; 2
    1298:	91 05       	cpc	r25, r1
    129a:	10 f4       	brcc	.+4      	; 0x12a0 <malloc+0xe>
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	e0 91 d2 03 	lds	r30, 0x03D2
    12a4:	f0 91 d3 03 	lds	r31, 0x03D3
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	a0 e0       	ldi	r26, 0x00	; 0
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	30 97       	sbiw	r30, 0x00	; 0
    12b2:	39 f1       	breq	.+78     	; 0x1302 <malloc+0x70>
    12b4:	40 81       	ld	r20, Z
    12b6:	51 81       	ldd	r21, Z+1	; 0x01
    12b8:	48 17       	cp	r20, r24
    12ba:	59 07       	cpc	r21, r25
    12bc:	b8 f0       	brcs	.+46     	; 0x12ec <malloc+0x5a>
    12be:	48 17       	cp	r20, r24
    12c0:	59 07       	cpc	r21, r25
    12c2:	71 f4       	brne	.+28     	; 0x12e0 <malloc+0x4e>
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	93 81       	ldd	r25, Z+3	; 0x03
    12c8:	10 97       	sbiw	r26, 0x00	; 0
    12ca:	29 f0       	breq	.+10     	; 0x12d6 <malloc+0x44>
    12cc:	13 96       	adiw	r26, 0x03	; 3
    12ce:	9c 93       	st	X, r25
    12d0:	8e 93       	st	-X, r24
    12d2:	12 97       	sbiw	r26, 0x02	; 2
    12d4:	2c c0       	rjmp	.+88     	; 0x132e <malloc+0x9c>
    12d6:	90 93 d3 03 	sts	0x03D3, r25
    12da:	80 93 d2 03 	sts	0x03D2, r24
    12de:	27 c0       	rjmp	.+78     	; 0x132e <malloc+0x9c>
    12e0:	21 15       	cp	r18, r1
    12e2:	31 05       	cpc	r19, r1
    12e4:	31 f0       	breq	.+12     	; 0x12f2 <malloc+0x60>
    12e6:	42 17       	cp	r20, r18
    12e8:	53 07       	cpc	r21, r19
    12ea:	18 f0       	brcs	.+6      	; 0x12f2 <malloc+0x60>
    12ec:	a9 01       	movw	r20, r18
    12ee:	db 01       	movw	r26, r22
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <malloc+0x62>
    12f2:	ef 01       	movw	r28, r30
    12f4:	9a 01       	movw	r18, r20
    12f6:	bd 01       	movw	r22, r26
    12f8:	df 01       	movw	r26, r30
    12fa:	02 80       	ldd	r0, Z+2	; 0x02
    12fc:	f3 81       	ldd	r31, Z+3	; 0x03
    12fe:	e0 2d       	mov	r30, r0
    1300:	d7 cf       	rjmp	.-82     	; 0x12b0 <malloc+0x1e>
    1302:	21 15       	cp	r18, r1
    1304:	31 05       	cpc	r19, r1
    1306:	f9 f0       	breq	.+62     	; 0x1346 <malloc+0xb4>
    1308:	28 1b       	sub	r18, r24
    130a:	39 0b       	sbc	r19, r25
    130c:	24 30       	cpi	r18, 0x04	; 4
    130e:	31 05       	cpc	r19, r1
    1310:	80 f4       	brcc	.+32     	; 0x1332 <malloc+0xa0>
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	9b 81       	ldd	r25, Y+3	; 0x03
    1316:	61 15       	cp	r22, r1
    1318:	71 05       	cpc	r23, r1
    131a:	21 f0       	breq	.+8      	; 0x1324 <malloc+0x92>
    131c:	fb 01       	movw	r30, r22
    131e:	93 83       	std	Z+3, r25	; 0x03
    1320:	82 83       	std	Z+2, r24	; 0x02
    1322:	04 c0       	rjmp	.+8      	; 0x132c <malloc+0x9a>
    1324:	90 93 d3 03 	sts	0x03D3, r25
    1328:	80 93 d2 03 	sts	0x03D2, r24
    132c:	fe 01       	movw	r30, r28
    132e:	32 96       	adiw	r30, 0x02	; 2
    1330:	44 c0       	rjmp	.+136    	; 0x13ba <malloc+0x128>
    1332:	fe 01       	movw	r30, r28
    1334:	e2 0f       	add	r30, r18
    1336:	f3 1f       	adc	r31, r19
    1338:	81 93       	st	Z+, r24
    133a:	91 93       	st	Z+, r25
    133c:	22 50       	subi	r18, 0x02	; 2
    133e:	31 09       	sbc	r19, r1
    1340:	39 83       	std	Y+1, r19	; 0x01
    1342:	28 83       	st	Y, r18
    1344:	3a c0       	rjmp	.+116    	; 0x13ba <malloc+0x128>
    1346:	20 91 d0 03 	lds	r18, 0x03D0
    134a:	30 91 d1 03 	lds	r19, 0x03D1
    134e:	23 2b       	or	r18, r19
    1350:	41 f4       	brne	.+16     	; 0x1362 <malloc+0xd0>
    1352:	20 91 02 01 	lds	r18, 0x0102
    1356:	30 91 03 01 	lds	r19, 0x0103
    135a:	30 93 d1 03 	sts	0x03D1, r19
    135e:	20 93 d0 03 	sts	0x03D0, r18
    1362:	20 91 00 01 	lds	r18, 0x0100
    1366:	30 91 01 01 	lds	r19, 0x0101
    136a:	21 15       	cp	r18, r1
    136c:	31 05       	cpc	r19, r1
    136e:	41 f4       	brne	.+16     	; 0x1380 <malloc+0xee>
    1370:	2d b7       	in	r18, 0x3d	; 61
    1372:	3e b7       	in	r19, 0x3e	; 62
    1374:	40 91 04 01 	lds	r20, 0x0104
    1378:	50 91 05 01 	lds	r21, 0x0105
    137c:	24 1b       	sub	r18, r20
    137e:	35 0b       	sbc	r19, r21
    1380:	e0 91 d0 03 	lds	r30, 0x03D0
    1384:	f0 91 d1 03 	lds	r31, 0x03D1
    1388:	e2 17       	cp	r30, r18
    138a:	f3 07       	cpc	r31, r19
    138c:	a0 f4       	brcc	.+40     	; 0x13b6 <malloc+0x124>
    138e:	2e 1b       	sub	r18, r30
    1390:	3f 0b       	sbc	r19, r31
    1392:	28 17       	cp	r18, r24
    1394:	39 07       	cpc	r19, r25
    1396:	78 f0       	brcs	.+30     	; 0x13b6 <malloc+0x124>
    1398:	ac 01       	movw	r20, r24
    139a:	4e 5f       	subi	r20, 0xFE	; 254
    139c:	5f 4f       	sbci	r21, 0xFF	; 255
    139e:	24 17       	cp	r18, r20
    13a0:	35 07       	cpc	r19, r21
    13a2:	48 f0       	brcs	.+18     	; 0x13b6 <malloc+0x124>
    13a4:	4e 0f       	add	r20, r30
    13a6:	5f 1f       	adc	r21, r31
    13a8:	50 93 d1 03 	sts	0x03D1, r21
    13ac:	40 93 d0 03 	sts	0x03D0, r20
    13b0:	81 93       	st	Z+, r24
    13b2:	91 93       	st	Z+, r25
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <malloc+0x128>
    13b6:	e0 e0       	ldi	r30, 0x00	; 0
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	cf 01       	movw	r24, r30
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <free>:
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	09 f4       	brne	.+2      	; 0x13cc <free+0xa>
    13ca:	87 c0       	rjmp	.+270    	; 0x14da <free+0x118>
    13cc:	fc 01       	movw	r30, r24
    13ce:	32 97       	sbiw	r30, 0x02	; 2
    13d0:	13 82       	std	Z+3, r1	; 0x03
    13d2:	12 82       	std	Z+2, r1	; 0x02
    13d4:	c0 91 d2 03 	lds	r28, 0x03D2
    13d8:	d0 91 d3 03 	lds	r29, 0x03D3
    13dc:	20 97       	sbiw	r28, 0x00	; 0
    13de:	81 f4       	brne	.+32     	; 0x1400 <free+0x3e>
    13e0:	20 81       	ld	r18, Z
    13e2:	31 81       	ldd	r19, Z+1	; 0x01
    13e4:	28 0f       	add	r18, r24
    13e6:	39 1f       	adc	r19, r25
    13e8:	80 91 d0 03 	lds	r24, 0x03D0
    13ec:	90 91 d1 03 	lds	r25, 0x03D1
    13f0:	82 17       	cp	r24, r18
    13f2:	93 07       	cpc	r25, r19
    13f4:	79 f5       	brne	.+94     	; 0x1454 <free+0x92>
    13f6:	f0 93 d1 03 	sts	0x03D1, r31
    13fa:	e0 93 d0 03 	sts	0x03D0, r30
    13fe:	6d c0       	rjmp	.+218    	; 0x14da <free+0x118>
    1400:	de 01       	movw	r26, r28
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	ae 17       	cp	r26, r30
    1408:	bf 07       	cpc	r27, r31
    140a:	50 f4       	brcc	.+20     	; 0x1420 <free+0x5e>
    140c:	12 96       	adiw	r26, 0x02	; 2
    140e:	4d 91       	ld	r20, X+
    1410:	5c 91       	ld	r21, X
    1412:	13 97       	sbiw	r26, 0x03	; 3
    1414:	9d 01       	movw	r18, r26
    1416:	41 15       	cp	r20, r1
    1418:	51 05       	cpc	r21, r1
    141a:	09 f1       	breq	.+66     	; 0x145e <free+0x9c>
    141c:	da 01       	movw	r26, r20
    141e:	f3 cf       	rjmp	.-26     	; 0x1406 <free+0x44>
    1420:	b3 83       	std	Z+3, r27	; 0x03
    1422:	a2 83       	std	Z+2, r26	; 0x02
    1424:	40 81       	ld	r20, Z
    1426:	51 81       	ldd	r21, Z+1	; 0x01
    1428:	84 0f       	add	r24, r20
    142a:	95 1f       	adc	r25, r21
    142c:	8a 17       	cp	r24, r26
    142e:	9b 07       	cpc	r25, r27
    1430:	71 f4       	brne	.+28     	; 0x144e <free+0x8c>
    1432:	8d 91       	ld	r24, X+
    1434:	9c 91       	ld	r25, X
    1436:	11 97       	sbiw	r26, 0x01	; 1
    1438:	84 0f       	add	r24, r20
    143a:	95 1f       	adc	r25, r21
    143c:	02 96       	adiw	r24, 0x02	; 2
    143e:	91 83       	std	Z+1, r25	; 0x01
    1440:	80 83       	st	Z, r24
    1442:	12 96       	adiw	r26, 0x02	; 2
    1444:	8d 91       	ld	r24, X+
    1446:	9c 91       	ld	r25, X
    1448:	13 97       	sbiw	r26, 0x03	; 3
    144a:	93 83       	std	Z+3, r25	; 0x03
    144c:	82 83       	std	Z+2, r24	; 0x02
    144e:	21 15       	cp	r18, r1
    1450:	31 05       	cpc	r19, r1
    1452:	29 f4       	brne	.+10     	; 0x145e <free+0x9c>
    1454:	f0 93 d3 03 	sts	0x03D3, r31
    1458:	e0 93 d2 03 	sts	0x03D2, r30
    145c:	3e c0       	rjmp	.+124    	; 0x14da <free+0x118>
    145e:	d9 01       	movw	r26, r18
    1460:	13 96       	adiw	r26, 0x03	; 3
    1462:	fc 93       	st	X, r31
    1464:	ee 93       	st	-X, r30
    1466:	12 97       	sbiw	r26, 0x02	; 2
    1468:	4d 91       	ld	r20, X+
    146a:	5d 91       	ld	r21, X+
    146c:	a4 0f       	add	r26, r20
    146e:	b5 1f       	adc	r27, r21
    1470:	ea 17       	cp	r30, r26
    1472:	fb 07       	cpc	r31, r27
    1474:	79 f4       	brne	.+30     	; 0x1494 <free+0xd2>
    1476:	80 81       	ld	r24, Z
    1478:	91 81       	ldd	r25, Z+1	; 0x01
    147a:	84 0f       	add	r24, r20
    147c:	95 1f       	adc	r25, r21
    147e:	02 96       	adiw	r24, 0x02	; 2
    1480:	d9 01       	movw	r26, r18
    1482:	11 96       	adiw	r26, 0x01	; 1
    1484:	9c 93       	st	X, r25
    1486:	8e 93       	st	-X, r24
    1488:	82 81       	ldd	r24, Z+2	; 0x02
    148a:	93 81       	ldd	r25, Z+3	; 0x03
    148c:	13 96       	adiw	r26, 0x03	; 3
    148e:	9c 93       	st	X, r25
    1490:	8e 93       	st	-X, r24
    1492:	12 97       	sbiw	r26, 0x02	; 2
    1494:	e0 e0       	ldi	r30, 0x00	; 0
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	9b 81       	ldd	r25, Y+3	; 0x03
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	19 f0       	breq	.+6      	; 0x14a6 <free+0xe4>
    14a0:	fe 01       	movw	r30, r28
    14a2:	ec 01       	movw	r28, r24
    14a4:	f9 cf       	rjmp	.-14     	; 0x1498 <free+0xd6>
    14a6:	ce 01       	movw	r24, r28
    14a8:	02 96       	adiw	r24, 0x02	; 2
    14aa:	28 81       	ld	r18, Y
    14ac:	39 81       	ldd	r19, Y+1	; 0x01
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	20 91 d0 03 	lds	r18, 0x03D0
    14b6:	30 91 d1 03 	lds	r19, 0x03D1
    14ba:	28 17       	cp	r18, r24
    14bc:	39 07       	cpc	r19, r25
    14be:	69 f4       	brne	.+26     	; 0x14da <free+0x118>
    14c0:	30 97       	sbiw	r30, 0x00	; 0
    14c2:	29 f4       	brne	.+10     	; 0x14ce <free+0x10c>
    14c4:	10 92 d3 03 	sts	0x03D3, r1
    14c8:	10 92 d2 03 	sts	0x03D2, r1
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <free+0x110>
    14ce:	13 82       	std	Z+3, r1	; 0x03
    14d0:	12 82       	std	Z+2, r1	; 0x02
    14d2:	d0 93 d1 03 	sts	0x03D1, r29
    14d6:	c0 93 d0 03 	sts	0x03D0, r28
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	08 95       	ret

000014e0 <strnlen_P>:
    14e0:	fc 01       	movw	r30, r24
    14e2:	05 90       	lpm	r0, Z+
    14e4:	61 50       	subi	r22, 0x01	; 1
    14e6:	70 40       	sbci	r23, 0x00	; 0
    14e8:	01 10       	cpse	r0, r1
    14ea:	d8 f7       	brcc	.-10     	; 0x14e2 <strnlen_P+0x2>
    14ec:	80 95       	com	r24
    14ee:	90 95       	com	r25
    14f0:	8e 0f       	add	r24, r30
    14f2:	9f 1f       	adc	r25, r31
    14f4:	08 95       	ret

000014f6 <memset>:
    14f6:	dc 01       	movw	r26, r24
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <memset+0x6>
    14fa:	6d 93       	st	X+, r22
    14fc:	41 50       	subi	r20, 0x01	; 1
    14fe:	50 40       	sbci	r21, 0x00	; 0
    1500:	e0 f7       	brcc	.-8      	; 0x14fa <memset+0x4>
    1502:	08 95       	ret

00001504 <strnlen>:
    1504:	fc 01       	movw	r30, r24
    1506:	61 50       	subi	r22, 0x01	; 1
    1508:	70 40       	sbci	r23, 0x00	; 0
    150a:	01 90       	ld	r0, Z+
    150c:	01 10       	cpse	r0, r1
    150e:	d8 f7       	brcc	.-10     	; 0x1506 <strnlen+0x2>
    1510:	80 95       	com	r24
    1512:	90 95       	com	r25
    1514:	8e 0f       	add	r24, r30
    1516:	9f 1f       	adc	r25, r31
    1518:	08 95       	ret

0000151a <fputc>:
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	18 2f       	mov	r17, r24
    1524:	09 2f       	mov	r16, r25
    1526:	eb 01       	movw	r28, r22
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	81 fd       	sbrc	r24, 1
    152c:	03 c0       	rjmp	.+6      	; 0x1534 <fputc+0x1a>
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	9f ef       	ldi	r25, 0xFF	; 255
    1532:	20 c0       	rjmp	.+64     	; 0x1574 <fputc+0x5a>
    1534:	82 ff       	sbrs	r24, 2
    1536:	10 c0       	rjmp	.+32     	; 0x1558 <fputc+0x3e>
    1538:	4e 81       	ldd	r20, Y+6	; 0x06
    153a:	5f 81       	ldd	r21, Y+7	; 0x07
    153c:	2c 81       	ldd	r18, Y+4	; 0x04
    153e:	3d 81       	ldd	r19, Y+5	; 0x05
    1540:	42 17       	cp	r20, r18
    1542:	53 07       	cpc	r21, r19
    1544:	7c f4       	brge	.+30     	; 0x1564 <fputc+0x4a>
    1546:	e8 81       	ld	r30, Y
    1548:	f9 81       	ldd	r31, Y+1	; 0x01
    154a:	9f 01       	movw	r18, r30
    154c:	2f 5f       	subi	r18, 0xFF	; 255
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	39 83       	std	Y+1, r19	; 0x01
    1552:	28 83       	st	Y, r18
    1554:	10 83       	st	Z, r17
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <fputc+0x4a>
    1558:	e8 85       	ldd	r30, Y+8	; 0x08
    155a:	f9 85       	ldd	r31, Y+9	; 0x09
    155c:	81 2f       	mov	r24, r17
    155e:	09 95       	icall
    1560:	89 2b       	or	r24, r25
    1562:	29 f7       	brne	.-54     	; 0x152e <fputc+0x14>
    1564:	2e 81       	ldd	r18, Y+6	; 0x06
    1566:	3f 81       	ldd	r19, Y+7	; 0x07
    1568:	2f 5f       	subi	r18, 0xFF	; 255
    156a:	3f 4f       	sbci	r19, 0xFF	; 255
    156c:	3f 83       	std	Y+7, r19	; 0x07
    156e:	2e 83       	std	Y+6, r18	; 0x06
    1570:	81 2f       	mov	r24, r17
    1572:	90 2f       	mov	r25, r16
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	08 95       	ret

0000157e <__ultoa_invert>:
    157e:	fa 01       	movw	r30, r20
    1580:	aa 27       	eor	r26, r26
    1582:	28 30       	cpi	r18, 0x08	; 8
    1584:	51 f1       	breq	.+84     	; 0x15da <__ultoa_invert+0x5c>
    1586:	20 31       	cpi	r18, 0x10	; 16
    1588:	81 f1       	breq	.+96     	; 0x15ea <__ultoa_invert+0x6c>
    158a:	e8 94       	clt
    158c:	6f 93       	push	r22
    158e:	6e 7f       	andi	r22, 0xFE	; 254
    1590:	6e 5f       	subi	r22, 0xFE	; 254
    1592:	7f 4f       	sbci	r23, 0xFF	; 255
    1594:	8f 4f       	sbci	r24, 0xFF	; 255
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	af 4f       	sbci	r26, 0xFF	; 255
    159a:	b1 e0       	ldi	r27, 0x01	; 1
    159c:	3e d0       	rcall	.+124    	; 0x161a <__ultoa_invert+0x9c>
    159e:	b4 e0       	ldi	r27, 0x04	; 4
    15a0:	3c d0       	rcall	.+120    	; 0x161a <__ultoa_invert+0x9c>
    15a2:	67 0f       	add	r22, r23
    15a4:	78 1f       	adc	r23, r24
    15a6:	89 1f       	adc	r24, r25
    15a8:	9a 1f       	adc	r25, r26
    15aa:	a1 1d       	adc	r26, r1
    15ac:	68 0f       	add	r22, r24
    15ae:	79 1f       	adc	r23, r25
    15b0:	8a 1f       	adc	r24, r26
    15b2:	91 1d       	adc	r25, r1
    15b4:	a1 1d       	adc	r26, r1
    15b6:	6a 0f       	add	r22, r26
    15b8:	71 1d       	adc	r23, r1
    15ba:	81 1d       	adc	r24, r1
    15bc:	91 1d       	adc	r25, r1
    15be:	a1 1d       	adc	r26, r1
    15c0:	20 d0       	rcall	.+64     	; 0x1602 <__ultoa_invert+0x84>
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <__ultoa_invert+0x48>
    15c4:	68 94       	set
    15c6:	3f 91       	pop	r19
    15c8:	2a e0       	ldi	r18, 0x0A	; 10
    15ca:	26 9f       	mul	r18, r22
    15cc:	11 24       	eor	r1, r1
    15ce:	30 19       	sub	r19, r0
    15d0:	30 5d       	subi	r19, 0xD0	; 208
    15d2:	31 93       	st	Z+, r19
    15d4:	de f6       	brtc	.-74     	; 0x158c <__ultoa_invert+0xe>
    15d6:	cf 01       	movw	r24, r30
    15d8:	08 95       	ret
    15da:	46 2f       	mov	r20, r22
    15dc:	47 70       	andi	r20, 0x07	; 7
    15de:	40 5d       	subi	r20, 0xD0	; 208
    15e0:	41 93       	st	Z+, r20
    15e2:	b3 e0       	ldi	r27, 0x03	; 3
    15e4:	0f d0       	rcall	.+30     	; 0x1604 <__ultoa_invert+0x86>
    15e6:	c9 f7       	brne	.-14     	; 0x15da <__ultoa_invert+0x5c>
    15e8:	f6 cf       	rjmp	.-20     	; 0x15d6 <__ultoa_invert+0x58>
    15ea:	46 2f       	mov	r20, r22
    15ec:	4f 70       	andi	r20, 0x0F	; 15
    15ee:	40 5d       	subi	r20, 0xD0	; 208
    15f0:	4a 33       	cpi	r20, 0x3A	; 58
    15f2:	18 f0       	brcs	.+6      	; 0x15fa <__ultoa_invert+0x7c>
    15f4:	49 5d       	subi	r20, 0xD9	; 217
    15f6:	31 fd       	sbrc	r19, 1
    15f8:	40 52       	subi	r20, 0x20	; 32
    15fa:	41 93       	st	Z+, r20
    15fc:	02 d0       	rcall	.+4      	; 0x1602 <__ultoa_invert+0x84>
    15fe:	a9 f7       	brne	.-22     	; 0x15ea <__ultoa_invert+0x6c>
    1600:	ea cf       	rjmp	.-44     	; 0x15d6 <__ultoa_invert+0x58>
    1602:	b4 e0       	ldi	r27, 0x04	; 4
    1604:	a6 95       	lsr	r26
    1606:	97 95       	ror	r25
    1608:	87 95       	ror	r24
    160a:	77 95       	ror	r23
    160c:	67 95       	ror	r22
    160e:	ba 95       	dec	r27
    1610:	c9 f7       	brne	.-14     	; 0x1604 <__ultoa_invert+0x86>
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	61 05       	cpc	r22, r1
    1616:	71 05       	cpc	r23, r1
    1618:	08 95       	ret
    161a:	9b 01       	movw	r18, r22
    161c:	ac 01       	movw	r20, r24
    161e:	0a 2e       	mov	r0, r26
    1620:	06 94       	lsr	r0
    1622:	57 95       	ror	r21
    1624:	47 95       	ror	r20
    1626:	37 95       	ror	r19
    1628:	27 95       	ror	r18
    162a:	ba 95       	dec	r27
    162c:	c9 f7       	brne	.-14     	; 0x1620 <__ultoa_invert+0xa2>
    162e:	62 0f       	add	r22, r18
    1630:	73 1f       	adc	r23, r19
    1632:	84 1f       	adc	r24, r20
    1634:	95 1f       	adc	r25, r21
    1636:	a0 1d       	adc	r26, r0
    1638:	08 95       	ret

0000163a <__prologue_saves__>:
    163a:	2f 92       	push	r2
    163c:	3f 92       	push	r3
    163e:	4f 92       	push	r4
    1640:	5f 92       	push	r5
    1642:	6f 92       	push	r6
    1644:	7f 92       	push	r7
    1646:	8f 92       	push	r8
    1648:	9f 92       	push	r9
    164a:	af 92       	push	r10
    164c:	bf 92       	push	r11
    164e:	cf 92       	push	r12
    1650:	df 92       	push	r13
    1652:	ef 92       	push	r14
    1654:	ff 92       	push	r15
    1656:	0f 93       	push	r16
    1658:	1f 93       	push	r17
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	ca 1b       	sub	r28, r26
    1664:	db 0b       	sbc	r29, r27
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	de bf       	out	0x3e, r29	; 62
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	cd bf       	out	0x3d, r28	; 61
    1670:	09 94       	ijmp

00001672 <__epilogue_restores__>:
    1672:	2a 88       	ldd	r2, Y+18	; 0x12
    1674:	39 88       	ldd	r3, Y+17	; 0x11
    1676:	48 88       	ldd	r4, Y+16	; 0x10
    1678:	5f 84       	ldd	r5, Y+15	; 0x0f
    167a:	6e 84       	ldd	r6, Y+14	; 0x0e
    167c:	7d 84       	ldd	r7, Y+13	; 0x0d
    167e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1680:	9b 84       	ldd	r9, Y+11	; 0x0b
    1682:	aa 84       	ldd	r10, Y+10	; 0x0a
    1684:	b9 84       	ldd	r11, Y+9	; 0x09
    1686:	c8 84       	ldd	r12, Y+8	; 0x08
    1688:	df 80       	ldd	r13, Y+7	; 0x07
    168a:	ee 80       	ldd	r14, Y+6	; 0x06
    168c:	fd 80       	ldd	r15, Y+5	; 0x05
    168e:	0c 81       	ldd	r16, Y+4	; 0x04
    1690:	1b 81       	ldd	r17, Y+3	; 0x03
    1692:	aa 81       	ldd	r26, Y+2	; 0x02
    1694:	b9 81       	ldd	r27, Y+1	; 0x01
    1696:	ce 0f       	add	r28, r30
    1698:	d1 1d       	adc	r29, r1
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	ed 01       	movw	r28, r26
    16a6:	08 95       	ret

000016a8 <_exit>:
    16a8:	f8 94       	cli

000016aa <__stop_program>:
    16aa:	ff cf       	rjmp	.-2      	; 0x16aa <__stop_program>
