
Ping Pong_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  000017ee  00001882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008001aa  008001aa  0000192c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e76  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010a7  00000000  00000000  00004a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000261e  00000000  00000000  00005b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005fc  00000000  00000000  0000813c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000094c1  00000000  00000000  00008738  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001643  00000000  00000000  00011bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000248  00000000  00000000  0001323c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001618  00000000  00000000  00013484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5f c3       	rjmp	.+1726   	; 0x6c0 <__ctors_end>
       2:	00 00       	nop
       4:	79 c3       	rjmp	.+1778   	; 0x6f8 <__bad_interrupt>
       6:	00 00       	nop
       8:	77 c3       	rjmp	.+1774   	; 0x6f8 <__bad_interrupt>
       a:	00 00       	nop
       c:	75 c3       	rjmp	.+1770   	; 0x6f8 <__bad_interrupt>
       e:	00 00       	nop
      10:	73 c3       	rjmp	.+1766   	; 0x6f8 <__bad_interrupt>
      12:	00 00       	nop
      14:	71 c3       	rjmp	.+1762   	; 0x6f8 <__bad_interrupt>
      16:	00 00       	nop
      18:	6f c3       	rjmp	.+1758   	; 0x6f8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6d c3       	rjmp	.+1754   	; 0x6f8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6b c3       	rjmp	.+1750   	; 0x6f8 <__bad_interrupt>
      22:	00 00       	nop
      24:	69 c3       	rjmp	.+1746   	; 0x6f8 <__bad_interrupt>
      26:	00 00       	nop
      28:	67 c3       	rjmp	.+1742   	; 0x6f8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	65 c3       	rjmp	.+1738   	; 0x6f8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	63 c3       	rjmp	.+1734   	; 0x6f8 <__bad_interrupt>
      32:	00 00       	nop
      34:	61 c3       	rjmp	.+1730   	; 0x6f8 <__bad_interrupt>
      36:	00 00       	nop
      38:	5f c3       	rjmp	.+1726   	; 0x6f8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5d c3       	rjmp	.+1722   	; 0x6f8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5b c3       	rjmp	.+1718   	; 0x6f8 <__bad_interrupt>
      42:	00 00       	nop
      44:	59 c3       	rjmp	.+1714   	; 0x6f8 <__bad_interrupt>
      46:	00 00       	nop
      48:	57 c3       	rjmp	.+1710   	; 0x6f8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	55 c3       	rjmp	.+1706   	; 0x6f8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	53 c3       	rjmp	.+1702   	; 0x6f8 <__bad_interrupt>
      52:	00 00       	nop
      54:	51 c3       	rjmp	.+1698   	; 0x6f8 <__bad_interrupt>
      56:	00 00       	nop
      58:	4f c3       	rjmp	.+1694   	; 0x6f8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4d c3       	rjmp	.+1690   	; 0x6f8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4b c3       	rjmp	.+1686   	; 0x6f8 <__bad_interrupt>
      62:	00 00       	nop
      64:	49 c3       	rjmp	.+1682   	; 0x6f8 <__bad_interrupt>
      66:	00 00       	nop
      68:	47 c3       	rjmp	.+1678   	; 0x6f8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	45 c3       	rjmp	.+1674   	; 0x6f8 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	11 e0       	ldi	r17, 0x01	; 1
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	ee ee       	ldi	r30, 0xEE	; 238
     6d4:	f7 e1       	ldi	r31, 0x17	; 23
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	aa 3a       	cpi	r26, 0xAA	; 170
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	21 e0       	ldi	r18, 0x01	; 1
     6e4:	aa ea       	ldi	r26, 0xAA	; 170
     6e6:	b1 e0       	ldi	r27, 0x01	; 1
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	a8 3b       	cpi	r26, 0xB8	; 184
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e d4       	rcall	.+2076   	; 0xf10 <main>
     6f4:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <_exit>

000006f8 <__bad_interrupt>:
     6f8:	83 cc       	rjmp	.-1786   	; 0x0 <__vectors>

000006fa <adc_read>:
	else{
		ans = joy_adc_direction;
	}
	//printf("answer % d \n \r \n \r", ans);
	return ans;*/
}
     6fa:	9f ef       	ldi	r25, 0xFF	; 255
     6fc:	98 0f       	add	r25, r24
     6fe:	94 30       	cpi	r25, 0x04	; 4
     700:	58 f4       	brcc	.+22     	; 0x718 <adc_read+0x1e>
     702:	8d 5f       	subi	r24, 0xFD	; 253
     704:	80 93 00 14 	sts	0x1400, r24
     708:	85 e3       	ldi	r24, 0x35	; 53
     70a:	8a 95       	dec	r24
     70c:	f1 f7       	brne	.-4      	; 0x70a <adc_read+0x10>
     70e:	00 00       	nop
     710:	80 91 00 14 	lds	r24, 0x1400
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	08 95       	ret
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	08 95       	ret

0000071e <adc_joystick_direction>:
     71e:	84 e0       	ldi	r24, 0x04	; 4
     720:	80 93 00 14 	sts	0x1400, r24
     724:	85 e3       	ldi	r24, 0x35	; 53
     726:	8a 95       	dec	r24
     728:	f1 f7       	brne	.-4      	; 0x726 <adc_joystick_direction+0x8>
     72a:	00 00       	nop
     72c:	e0 e0       	ldi	r30, 0x00	; 0
     72e:	f4 e1       	ldi	r31, 0x14	; 20
     730:	40 81       	ld	r20, Z
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	4c 58       	subi	r20, 0x8C	; 140
     736:	51 09       	sbc	r21, r1
     738:	85 e0       	ldi	r24, 0x05	; 5
     73a:	80 83       	st	Z, r24
     73c:	85 e3       	ldi	r24, 0x35	; 53
     73e:	8a 95       	dec	r24
     740:	f1 f7       	brne	.-4      	; 0x73e <adc_joystick_direction+0x20>
     742:	00 00       	nop
     744:	20 91 00 14 	lds	r18, 0x1400
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	2c 58       	subi	r18, 0x8C	; 140
     74c:	31 09       	sbc	r19, r1
     74e:	ba 01       	movw	r22, r20
     750:	55 23       	and	r21, r21
     752:	24 f4       	brge	.+8      	; 0x75c <adc_joystick_direction+0x3e>
     754:	66 27       	eor	r22, r22
     756:	77 27       	eor	r23, r23
     758:	64 1b       	sub	r22, r20
     75a:	75 0b       	sbc	r23, r21
     75c:	c9 01       	movw	r24, r18
     75e:	33 23       	and	r19, r19
     760:	24 f4       	brge	.+8      	; 0x76a <adc_joystick_direction+0x4c>
     762:	88 27       	eor	r24, r24
     764:	99 27       	eor	r25, r25
     766:	82 1b       	sub	r24, r18
     768:	93 0b       	sbc	r25, r19
     76a:	68 17       	cp	r22, r24
     76c:	79 07       	cpc	r23, r25
     76e:	44 f4       	brge	.+16     	; 0x780 <adc_joystick_direction+0x62>
     770:	33 23       	and	r19, r19
     772:	8c f0       	brlt	.+34     	; 0x796 <adc_joystick_direction+0x78>
     774:	12 16       	cp	r1, r18
     776:	13 06       	cpc	r1, r19
     778:	8c f0       	brlt	.+34     	; 0x79c <adc_joystick_direction+0x7e>
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	19 c0       	rjmp	.+50     	; 0x7b2 <adc_joystick_direction+0x94>
     780:	86 17       	cp	r24, r22
     782:	97 07       	cpc	r25, r23
     784:	74 f4       	brge	.+28     	; 0x7a2 <adc_joystick_direction+0x84>
     786:	55 23       	and	r21, r21
     788:	7c f0       	brlt	.+30     	; 0x7a8 <adc_joystick_direction+0x8a>
     78a:	14 16       	cp	r1, r20
     78c:	15 06       	cpc	r1, r21
     78e:	7c f0       	brlt	.+30     	; 0x7ae <adc_joystick_direction+0x90>
     790:	84 e0       	ldi	r24, 0x04	; 4
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e c0       	rjmp	.+28     	; 0x7b2 <adc_joystick_direction+0x94>
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0b c0       	rjmp	.+22     	; 0x7b2 <adc_joystick_direction+0x94>
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	08 c0       	rjmp	.+16     	; 0x7b2 <adc_joystick_direction+0x94>
     7a2:	84 e0       	ldi	r24, 0x04	; 4
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <adc_joystick_direction+0x94>
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <adc_joystick_direction+0x94>
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	43 5e       	subi	r20, 0xE3	; 227
     7b4:	5f 4f       	sbci	r21, 0xFF	; 255
     7b6:	4b 33       	cpi	r20, 0x3B	; 59
     7b8:	51 05       	cpc	r21, r1
     7ba:	38 f4       	brcc	.+14     	; 0x7ca <adc_joystick_direction+0xac>
     7bc:	23 5e       	subi	r18, 0xE3	; 227
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	2b 33       	cpi	r18, 0x3B	; 59
     7c2:	31 05       	cpc	r19, r1
     7c4:	10 f4       	brcc	.+4      	; 0x7ca <adc_joystick_direction+0xac>
     7c6:	84 e0       	ldi	r24, 0x04	; 4
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	08 95       	ret

000007cc <get_joy_adc_direction>:

int get_joy_adc_direction(){
	return xmem_read(JOY_DIR_ADDRESS);
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	98 e1       	ldi	r25, 0x18	; 24
     7d0:	90 d3       	rcall	.+1824   	; 0xef2 <xmem_read>
}
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	08 95       	ret

000007d6 <set_joy_adc_direction>:

void set_joy_adc_direction(int joy_adc_direction){
	xmem_write(joy_adc_direction, JOY_DIR_ADDRESS);
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	78 e1       	ldi	r23, 0x18	; 24
     7da:	87 c3       	rjmp	.+1806   	; 0xeea <xmem_write>
     7dc:	08 95       	ret

000007de <adc_init>:




void adc_init(){
	set_joy_adc_direction(NEUTRAL);
     7de:	84 e0       	ldi	r24, 0x04	; 4
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	f9 cf       	rjmp	.-14     	; 0x7d6 <set_joy_adc_direction>
     7e4:	08 95       	ret

000007e6 <adc_joy_pos_changed>:
		ans = NEUTRAL;
	}
	return ans;
}

int adc_joy_pos_changed(){
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
	int ans = 0;
	int joy_adc_direction = get_joy_adc_direction();
     7ea:	f0 df       	rcall	.-32     	; 0x7cc <get_joy_adc_direction>
     7ec:	ec 01       	movw	r28, r24
	int previous_joy_adc_direction = joy_adc_direction;
	joy_adc_direction = adc_joystick_direction();
     7ee:	97 df       	rcall	.-210    	; 0x71e <adc_joystick_direction>

	
	if(previous_joy_adc_direction == joy_adc_direction){
     7f0:	c8 17       	cp	r28, r24
     7f2:	d9 07       	cpc	r29, r25
     7f4:	19 f4       	brne	.+6      	; 0x7fc <adc_joy_pos_changed+0x16>
		ans = 5;
     7f6:	d5 e0       	ldi	r29, 0x05	; 5
     7f8:	c0 e0       	ldi	r28, 0x00	; 0
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <adc_joy_pos_changed+0x1a>
	}
	else{
		ans = joy_adc_direction;
     7fc:	d8 2f       	mov	r29, r24
     7fe:	c9 2f       	mov	r28, r25
	}
	set_joy_adc_direction(joy_adc_direction);
     800:	ea df       	rcall	.-44     	; 0x7d6 <set_joy_adc_direction>
	return ans;
}
     802:	8d 2f       	mov	r24, r29
     804:	9c 2f       	mov	r25, r28
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <can_init>:


// "Main" for using can:

void can_init()
{
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	2a 97       	sbiw	r28, 0x0a	; 10
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
	mcp2515_init(); //Init
     820:	0e d1       	rcall	.+540    	; 0xa3e <mcp2515_init>
	
	
	mcp2515_write(MCP_RXB0CTRL, MCP_RXBnCTRL_NOFILTER_bm, 1); // Set to no filter
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	60 e6       	ldi	r22, 0x60	; 96
     826:	80 e6       	ldi	r24, 0x60	; 96
     828:	2b d1       	rcall	.+598    	; 0xa80 <mcp2515_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	9f e8       	ldi	r25, 0x8F	; 143
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	f1 f7       	brne	.-4      	; 0x82e <can_init+0x22>
     832:	00 c0       	rjmp	.+0      	; 0x834 <can_init+0x28>
     834:	00 00       	nop
	_delay_ms(30);
	
	mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 1); // Enable Interrupt when message is received
     836:	41 e0       	ldi	r20, 0x01	; 1
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	8b e2       	ldi	r24, 0x2B	; 43
     83c:	48 d1       	rcall	.+656    	; 0xace <mcp2515_bit_modify>
     83e:	8f ef       	ldi	r24, 0xFF	; 255
     840:	9f e8       	ldi	r25, 0x8F	; 143
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <can_init+0x36>
     846:	00 c0       	rjmp	.+0      	; 0x848 <can_init+0x3c>
     848:	00 00       	nop
	_delay_ms(30);

	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);//0b11100000 instead of MODE_MASK
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	60 ee       	ldi	r22, 0xE0	; 224
     84e:	8f e0       	ldi	r24, 0x0F	; 15
     850:	3e d1       	rcall	.+636    	; 0xace <mcp2515_bit_modify>
     852:	8f ef       	ldi	r24, 0xFF	; 255
     854:	9f e8       	ldi	r25, 0x8F	; 143
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	f1 f7       	brne	.-4      	; 0x856 <can_init+0x4a>
     85a:	00 c0       	rjmp	.+0      	; 0x85c <can_init+0x50>
     85c:	00 00       	nop
	_delay_ms(30);
	
	uint8_t mode_bits;
	uint8_t data[MAX_CAN_LENGTH];
	mcp2515_read(MCP_CANSTAT, data, MAX_CAN_LENGTH);
     85e:	4a e0       	ldi	r20, 0x0A	; 10
     860:	be 01       	movw	r22, r28
     862:	6f 5f       	subi	r22, 0xFF	; 255
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	8e e0       	ldi	r24, 0x0E	; 14
     868:	ed d0       	rcall	.+474    	; 0xa44 <mcp2515_read>
	uint8_t val = data[0];
	
	mode_bits = (val & MODE_MASK);
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	80 7e       	andi	r24, 0xE0	; 224
	if(mode_bits != MODE_NORMAL){
     86e:	99 f0       	breq	.+38     	; 0x896 <can_init+0x8a>
		
		printf("MCP2515 is NOT in correct mode after reset! Its config bits are %x\n", mode_bits);
     870:	1f 92       	push	r1
     872:	8f 93       	push	r24
     874:	88 e0       	ldi	r24, 0x08	; 8
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	9f 93       	push	r25
     87a:	8f 93       	push	r24
     87c:	bd d3       	rcall	.+1914   	; 0xff8 <printf>
		printf("\n\r");
     87e:	8d e6       	ldi	r24, 0x6D	; 109
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	9f 93       	push	r25
     884:	8f 93       	push	r24
     886:	b8 d3       	rcall	.+1904   	; 0xff8 <printf>
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	07 c0       	rjmp	.+14     	; 0x8a4 <can_init+0x98>
	}
	else
	printf("in mode normal \n\r");
     896:	8c e4       	ldi	r24, 0x4C	; 76
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	9f 93       	push	r25
     89c:	8f 93       	push	r24
     89e:	ac d3       	rcall	.+1880   	; 0xff8 <printf>
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
	
}
     8a4:	2a 96       	adiw	r28, 0x0a	; 10
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <can_message_send>:

void can_message_send(struct can_message* msg)
{
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24

	mcp2515_write(MCP_TXB0DLC, msg->length, 1);
     8be:	41 e0       	ldi	r20, 0x01	; 1
     8c0:	6a 81       	ldd	r22, Y+2	; 0x02
     8c2:	85 e3       	ldi	r24, 0x35	; 53
     8c4:	dd d0       	rcall	.+442    	; 0xa80 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
     8c6:	41 e0       	ldi	r20, 0x01	; 1
     8c8:	68 81       	ld	r22, Y
     8ca:	81 e3       	ldi	r24, 0x31	; 49
     8cc:	d9 d0       	rcall	.+434    	; 0xa80 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, msg->id, 1);
     8ce:	41 e0       	ldi	r20, 0x01	; 1
     8d0:	68 81       	ld	r22, Y
     8d2:	82 e3       	ldi	r24, 0x32	; 50
     8d4:	d5 d0       	rcall	.+426    	; 0xa80 <mcp2515_write>
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
     8d6:	8a 81       	ldd	r24, Y+2	; 0x02
     8d8:	88 23       	and	r24, r24
     8da:	61 f0       	breq	.+24     	; 0x8f4 <can_message_send+0x3e>
     8dc:	10 e0       	ldi	r17, 0x00	; 0
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
     8de:	fe 01       	movw	r30, r28
     8e0:	e1 0f       	add	r30, r17
     8e2:	f1 1d       	adc	r31, r1
     8e4:	41 e0       	ldi	r20, 0x01	; 1
     8e6:	63 81       	ldd	r22, Z+3	; 0x03
     8e8:	86 e3       	ldi	r24, 0x36	; 54
     8ea:	ca d0       	rcall	.+404    	; 0xa80 <mcp2515_write>
	mcp2515_write(MCP_TXB0DLC, msg->length, 1);
	mcp2515_write(MCP_TXB0SIDH, msg->id, 1);
	mcp2515_write(MCP_TXB0SIDL, msg->id, 1);
	
	uint8_t i;
	for (i = 0; i < msg->length; i++)
     8ec:	1f 5f       	subi	r17, 0xFF	; 255
     8ee:	8a 81       	ldd	r24, Y+2	; 0x02
     8f0:	18 17       	cp	r17, r24
     8f2:	a8 f3       	brcs	.-22     	; 0x8de <can_message_send+0x28>
	{
		mcp2515_write(MCP_TXB0D(0), msg->data[i], 1);
	}
	mcp2515_request(MCP_RTS_TX0);
     8f4:	81 e8       	ldi	r24, 0x81	; 129
     8f6:	db d0       	rcall	.+438    	; 0xaae <mcp2515_request>
	//Do something...
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <com_actualise_system>:
#include "oled.h"
#include "can_controller.h"

int old_val = 1;

void com_actualise_system(){
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
     90c:	a7 97       	sbiw	r28, 0x27	; 39
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
	
	int pin = 1;
	int temp_value = NEUTRAL;
	int new_val;
	
	pin = (PINB & 0b0100)>>2;
     918:	36 b3       	in	r19, 0x16	; 22
	
	struct can_message message_servo;
	message_servo.id = 1;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	9a 83       	std	Y+2, r25	; 0x02
     920:	89 83       	std	Y+1, r24	; 0x01
	message_servo.length = 1;
     922:	21 e0       	ldi	r18, 0x01	; 1
     924:	2b 83       	std	Y+3, r18	; 0x03
	
	struct can_message message_motor;
	message_motor.id = 2;
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	9f 87       	std	Y+15, r25	; 0x0f
     92c:	8e 87       	std	Y+14, r24	; 0x0e
	message_motor.length = 1;
     92e:	28 8b       	std	Y+16, r18	; 0x10
	
	struct can_message message_solenoid;
	message_solenoid.id = 3;
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	9c 8f       	std	Y+28, r25	; 0x1c
     936:	8b 8f       	std	Y+27, r24	; 0x1b
	message_solenoid.length = 1;
     938:	2d 8f       	std	Y+29, r18	; 0x1d
	
	
	if(pin == 0){
     93a:	32 fd       	sbrc	r19, 2
     93c:	0c c0       	rjmp	.+24     	; 0x956 <com_actualise_system+0x56>
		printf("string number %d selected \n \r", oled_get_joy_pos());
     93e:	ee d1       	rcall	.+988    	; 0xd1c <oled_get_joy_pos>
     940:	9f 93       	push	r25
     942:	8f 93       	push	r24
     944:	80 e7       	ldi	r24, 0x70	; 112
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	9f 93       	push	r25
     94a:	8f 93       	push	r24
     94c:	55 d3       	rcall	.+1706   	; 0xff8 <printf>
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
	}
	
	temp_value = adc_joy_pos_changed();
     956:	47 df       	rcall	.-370    	; 0x7e6 <adc_joy_pos_changed>
	
	if(temp_value == UP || temp_value == DOWN)
     958:	9c 01       	movw	r18, r24
     95a:	22 50       	subi	r18, 0x02	; 2
     95c:	31 09       	sbc	r19, r1
     95e:	22 30       	cpi	r18, 0x02	; 2
     960:	31 05       	cpc	r19, r1
     962:	58 f4       	brcc	.+22     	; 0x97a <com_actualise_system+0x7a>
	{
		oled_actualise_joy_pos(temp_value);
     964:	4b d2       	rcall	.+1174   	; 0xdfc <oled_actualise_joy_pos>
		oled_display_activity();
     966:	df d1       	rcall	.+958    	; 0xd26 <oled_display_activity>
     968:	2f e7       	ldi	r18, 0x7F	; 127
     96a:	88 e3       	ldi	r24, 0x38	; 56
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	21 50       	subi	r18, 0x01	; 1
     970:	80 40       	sbci	r24, 0x00	; 0
     972:	90 40       	sbci	r25, 0x00	; 0
     974:	e1 f7       	brne	.-8      	; 0x96e <com_actualise_system+0x6e>
     976:	00 c0       	rjmp	.+0      	; 0x978 <com_actualise_system+0x78>
     978:	00 00       	nop
		_delay_ms(400);
	}
	
	message_servo.data[0] = adc_read(1);
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	be de       	rcall	.-644    	; 0x6fa <adc_read>
     97e:	8c 83       	std	Y+4, r24	; 0x04
	can_message_send(&message_servo);
     980:	ce 01       	movw	r24, r28
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	98 df       	rcall	.-208    	; 0x8b6 <can_message_send>
	
	message_motor.data[0] = adc_read(4);
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	b8 de       	rcall	.-656    	; 0x6fa <adc_read>
     98a:	89 8b       	std	Y+17, r24	; 0x11
	can_message_send(&message_motor);
     98c:	ce 01       	movw	r24, r28
     98e:	0e 96       	adiw	r24, 0x0e	; 14
     990:	92 df       	rcall	.-220    	; 0x8b6 <can_message_send>
	
	new_val = (PINB & 0b0100)>>2;
     992:	86 b3       	in	r24, 0x16	; 22
     994:	82 fb       	bst	r24, 2
     996:	00 27       	eor	r16, r16
     998:	00 f9       	bld	r16, 0
     99a:	10 e0       	ldi	r17, 0x00	; 0
	
	if( (old_val == 0) && (new_val == 1) )
     99c:	80 91 06 01 	lds	r24, 0x0106
     9a0:	90 91 07 01 	lds	r25, 0x0107
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	81 f4       	brne	.+32     	; 0x9c8 <com_actualise_system+0xc8>
     9a8:	01 30       	cpi	r16, 0x01	; 1
     9aa:	11 05       	cpc	r17, r1
     9ac:	61 f5       	brne	.+88     	; 0xa06 <com_actualise_system+0x106>
	{
		old_val = 1;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	90 93 07 01 	sts	0x0107, r25
     9b6:	80 93 06 01 	sts	0x0106, r24
     9ba:	83 ed       	ldi	r24, 0xD3	; 211
     9bc:	90 e3       	ldi	r25, 0x30	; 48
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <com_actualise_system+0xbe>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <com_actualise_system+0xc4>
     9c4:	00 00       	nop
     9c6:	1f c0       	rjmp	.+62     	; 0xa06 <com_actualise_system+0x106>
		_delay_ms(50);
	}
	else if( (old_val == 1) && (new_val == 0) )
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	e9 f4       	brne	.+58     	; 0xa06 <com_actualise_system+0x106>
     9cc:	01 2b       	or	r16, r17
     9ce:	d9 f4       	brne	.+54     	; 0xa06 <com_actualise_system+0x106>
	{
		printf("string number %d selected \n \r", oled_get_joy_pos());
     9d0:	a5 d1       	rcall	.+842    	; 0xd1c <oled_get_joy_pos>
     9d2:	9f 93       	push	r25
     9d4:	8f 93       	push	r24
     9d6:	80 e7       	ldi	r24, 0x70	; 112
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	9f 93       	push	r25
     9dc:	8f 93       	push	r24
     9de:	0c d3       	rcall	.+1560   	; 0xff8 <printf>
		message_solenoid.data[0] = 1;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	8e 8f       	std	Y+30, r24	; 0x1e
		can_message_send(&message_solenoid);
     9e4:	ce 01       	movw	r24, r28
     9e6:	4b 96       	adiw	r24, 0x1b	; 27
     9e8:	66 df       	rcall	.-308    	; 0x8b6 <can_message_send>
		old_val = 0;
     9ea:	10 92 07 01 	sts	0x0107, r1
     9ee:	10 92 06 01 	sts	0x0106, r1
     9f2:	83 ed       	ldi	r24, 0xD3	; 211
     9f4:	90 e3       	ldi	r25, 0x30	; 48
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <com_actualise_system+0xf6>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <com_actualise_system+0xfc>
     9fc:	00 00       	nop
     9fe:	0f 90       	pop	r0
     a00:	0f 90       	pop	r0
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
		_delay_ms(50);
	}
		

}
     a06:	a7 96       	adiw	r28, 0x27	; 39
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	08 95       	ret

00000a1c <mcp2515_reset>:
	 spi_init();
	 mcp2515_reset();
}

void mcp2515_reset()
{
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	1f 92       	push	r1
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     a26:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);	
	
	uint8_t reset[] = {MCP_RESET};
     a28:	80 ec       	ldi	r24, 0xC0	; 192
     a2a:	89 83       	std	Y+1, r24	; 0x01
	spi_write(reset, 1);
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	ce 01       	movw	r24, r28
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	2d d2       	rcall	.+1114   	; 0xe8e <spi_write>
	
	PORTB |= (1<<PINB4); // DeselectCAN-controller
     a34:	c4 9a       	sbi	0x18, 4	; 24
}
     a36:	0f 90       	pop	r0
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <mcp2515_init>:
#include "MCP2515_driver.h"


void mcp2515_init() 
{
	 spi_init();
     a3e:	fc d1       	rcall	.+1016   	; 0xe38 <spi_init>
	 mcp2515_reset();
     a40:	ed cf       	rjmp	.-38     	; 0xa1c <mcp2515_reset>
     a42:	08 95       	ret

00000a44 <mcp2515_read>:
	
	PORTB |= (1<<PINB4); // DeselectCAN-controller
}

void mcp2515_read(uint8_t address, uint8_t result[MAX_CAN_LENGTH], uint8_t data_size)
{	
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <mcp2515_read+0xc>
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	8b 01       	movw	r16, r22
     a56:	f4 2e       	mov	r15, r20
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     a58:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);
	
	uint8_t write[] = {MCP_READ, address};
     a5a:	93 e0       	ldi	r25, 0x03	; 3
     a5c:	99 83       	std	Y+1, r25	; 0x01
     a5e:	8a 83       	std	Y+2, r24	; 0x02
	spi_write(write, 2); // Send read instruction
     a60:	62 e0       	ldi	r22, 0x02	; 2
     a62:	ce 01       	movw	r24, r28
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	13 d2       	rcall	.+1062   	; 0xe8e <spi_write>
	
	spi_read(result, data_size); // Readresult
     a68:	6f 2d       	mov	r22, r15
     a6a:	c8 01       	movw	r24, r16
     a6c:	eb d1       	rcall	.+982    	; 0xe44 <spi_read>
	
	PORTB |= (1<<PINB4); // DeselectCAN-controller
     a6e:	c4 9a       	sbi	0x18, 4	; 24
	
	
}
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	08 95       	ret

00000a80 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data, uint8_t data_size)
{
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	00 d0       	rcall	.+0      	; 0xa86 <mcp2515_write+0x6>
     a86:	1f 92       	push	r1
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     a8c:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);
	
	uint8_t write[] = {MCP_WRITE, address, data};
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	99 83       	std	Y+1, r25	; 0x01
     a92:	8a 83       	std	Y+2, r24	; 0x02
     a94:	6b 83       	std	Y+3, r22	; 0x03
	spi_write(write, data_size + 2); // Send read instruction
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	64 0f       	add	r22, r20
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	f7 d1       	rcall	.+1006   	; 0xe8e <spi_write>
	
	PORTB |= (1<<PINB4); // DeselectCAN-controller
     aa0:	c4 9a       	sbi	0x18, 4	; 24
		
}
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <mcp2515_request>:

void mcp2515_request(uint8_t rqs)
{
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	1f 92       	push	r1
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     ab8:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);		
		
	uint8_t cmd[] = {rqs};
     aba:	89 83       	std	Y+1, r24	; 0x01
	spi_write(cmd, 1);		
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	ce 01       	movw	r24, r28
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	e5 d1       	rcall	.+970    	; 0xe8e <spi_write>
	
	PORTB |= (1<<PINB4); // Deselect CAN-controller
     ac4:	c4 9a       	sbi	0x18, 4	; 24
}
     ac6:	0f 90       	pop	r0
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	08 95       	ret

00000ace <mcp2515_bit_modify>:

// Modify bits in the register / See datasheet 12.10
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) 
{
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	00 d0       	rcall	.+0      	; 0xad4 <mcp2515_bit_modify+0x6>
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <mcp2515_bit_modify+0x8>
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PINB4); // Select CAN-controller
     ada:	c4 98       	cbi	0x18, 4	; 24
	//SPSR &= ~(1 << SPIF);	
	
	uint8_t bit_list[] = {MCP_BITMOD, address, mask, data};
     adc:	95 e0       	ldi	r25, 0x05	; 5
     ade:	99 83       	std	Y+1, r25	; 0x01
     ae0:	8a 83       	std	Y+2, r24	; 0x02
     ae2:	6b 83       	std	Y+3, r22	; 0x03
     ae4:	4c 83       	std	Y+4, r20	; 0x04
	spi_write(bit_list, 4);	
     ae6:	64 e0       	ldi	r22, 0x04	; 4
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	d0 d1       	rcall	.+928    	; 0xe8e <spi_write>
	
	PORTB |= (1<<PINB4); //Deselect CAN-controller
     aee:	c4 9a       	sbi	0x18, 4	; 24

}
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	08 95       	ret

00000afe <oled_columb_range_select>:
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     afe:	91 e2       	ldi	r25, 0x21	; 33
     b00:	90 93 00 10 	sts	0x1000, r25
	oled_display_activity();
}

void oled_columb_range_select(uint8_t start, uint8_t end) {
	oled_write_c(OLED_COLUMB_SET);
	if (start < OLED_COLUMBS) {
     b04:	88 23       	and	r24, r24
     b06:	1c f0       	brlt	.+6      	; 0xb0e <oled_columb_range_select+0x10>
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     b08:	80 93 00 10 	sts	0x1000, r24
     b0c:	03 c0       	rjmp	.+6      	; 0xb14 <oled_columb_range_select+0x16>
     b0e:	8f e7       	ldi	r24, 0x7F	; 127
     b10:	80 93 00 10 	sts	0x1000, r24
		oled_write_c(start);
		} else {
		oled_write_c(OLED_COLUMBS - 1);
	}

	if (end < OLED_COLUMBS) {
     b14:	66 23       	and	r22, r22
     b16:	1c f0       	brlt	.+6      	; 0xb1e <oled_columb_range_select+0x20>
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     b18:	60 93 00 10 	sts	0x1000, r22
     b1c:	08 95       	ret
     b1e:	8f e7       	ldi	r24, 0x7F	; 127
     b20:	80 93 00 10 	sts	0x1000, r24
     b24:	08 95       	ret

00000b26 <oled_page_select>:
     b26:	92 e2       	ldi	r25, 0x22	; 34
     b28:	90 93 00 10 	sts	0x1000, r25
	}
}

void oled_page_select(uint8_t page) {
	oled_write_c(OLED_PAGE_SET);
	if (page < OLED_PAGES) {
     b2c:	88 30       	cpi	r24, 0x08	; 8
     b2e:	28 f4       	brcc	.+10     	; 0xb3a <oled_page_select+0x14>
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     b30:	e0 e0       	ldi	r30, 0x00	; 0
     b32:	f0 e1       	ldi	r31, 0x10	; 16
     b34:	80 83       	st	Z, r24
     b36:	80 83       	st	Z, r24
     b38:	08 95       	ret
     b3a:	e0 e0       	ldi	r30, 0x00	; 0
     b3c:	f0 e1       	ldi	r31, 0x10	; 16
     b3e:	87 e0       	ldi	r24, 0x07	; 7
     b40:	80 83       	st	Z, r24
     b42:	80 83       	st	Z, r24
     b44:	08 95       	ret

00000b46 <oled_clear_page>:
		oled_write_c(OLED_PAGES - 1);
	}
}

void oled_clear_page(uint8_t page) {
	if (page < OLED_PAGES) {
     b46:	88 30       	cpi	r24, 0x08	; 8
     b48:	60 f4       	brcc	.+24     	; 0xb62 <oled_clear_page+0x1c>
		oled_page_select(page);
     b4a:	ed df       	rcall	.-38     	; 0xb26 <oled_page_select>
		oled_columb_range_select(0, OLED_COLUMBS - 1);
     b4c:	6f e7       	ldi	r22, 0x7F	; 127
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	d6 df       	rcall	.-84     	; 0xafe <oled_columb_range_select>
     b52:	80 e8       	ldi	r24, 0x80	; 128
     b54:	90 e0       	ldi	r25, 0x00	; 0
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f2 e1       	ldi	r31, 0x12	; 18
     b5a:	10 82       	st	Z, r1
     b5c:	01 97       	sbiw	r24, 0x01	; 1

void oled_clear_page(uint8_t page) {
	if (page < OLED_PAGES) {
		oled_page_select(page);
		oled_columb_range_select(0, OLED_COLUMBS - 1);
		for (int i = 0; i < OLED_COLUMBS; i++) {
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	e1 f7       	brne	.-8      	; 0xb5a <oled_clear_page+0x14>
     b62:	08 95       	ret

00000b64 <oled_clear_screen>:
			oled_write_data(0x00);
		}
	}
}

void oled_clear_screen() {
     b64:	cf 93       	push	r28
     b66:	c0 e0       	ldi	r28, 0x00	; 0
	for (int i = 0; i < OLED_PAGES; i++) {
		oled_clear_page(i);
     b68:	8c 2f       	mov	r24, r28
     b6a:	ed df       	rcall	.-38     	; 0xb46 <oled_clear_page>
     b6c:	cf 5f       	subi	r28, 0xFF	; 255
		}
	}
}

void oled_clear_screen() {
	for (int i = 0; i < OLED_PAGES; i++) {
     b6e:	c8 30       	cpi	r28, 0x08	; 8
     b70:	d9 f7       	brne	.-10     	; 0xb68 <oled_clear_screen+0x4>
		oled_clear_page(i);
	}
}
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <oled_print_char_of_size>:

void oled_print_char_of_size(char letter, uint8_t size) {
	uint8_t char_length = 0;
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
     b76:	62 30       	cpi	r22, 0x02	; 2
     b78:	41 f4       	brne	.+16     	; 0xb8a <oled_print_char_of_size+0x14>
		char_length = 4;
		letter_bitmap = font4[letter - ' '];
     b7a:	94 e0       	ldi	r25, 0x04	; 4
     b7c:	89 02       	muls	r24, r25
     b7e:	a0 01       	movw	r20, r0
     b80:	11 24       	eor	r1, r1
     b82:	40 51       	subi	r20, 0x10	; 16
     b84:	50 40       	sbci	r21, 0x00	; 0

void oled_print_char_of_size(char letter, uint8_t size) {
	uint8_t char_length = 0;
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
		char_length = 4;
     b86:	24 e0       	ldi	r18, 0x04	; 4
     b88:	25 c0       	rjmp	.+74     	; 0xbd4 <oled_print_char_of_size+0x5e>
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
     b8a:	61 30       	cpi	r22, 0x01	; 1
     b8c:	89 f4       	brne	.+34     	; 0xbb0 <oled_print_char_of_size+0x3a>
		char_length = 5;
		letter_bitmap = font5[letter - ' '];
     b8e:	48 2f       	mov	r20, r24
     b90:	55 27       	eor	r21, r21
     b92:	47 fd       	sbrc	r20, 7
     b94:	50 95       	com	r21
     b96:	40 52       	subi	r20, 0x20	; 32
     b98:	51 09       	sbc	r21, r1
     b9a:	ca 01       	movw	r24, r20
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	48 0f       	add	r20, r24
     ba6:	59 1f       	adc	r21, r25
     ba8:	44 51       	subi	r20, 0x14	; 20
     baa:	5e 4f       	sbci	r21, 0xFE	; 254
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
		char_length = 4;
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
		char_length = 5;
     bac:	25 e0       	ldi	r18, 0x05	; 5
     bae:	12 c0       	rjmp	.+36     	; 0xbd4 <oled_print_char_of_size+0x5e>
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
		letter_bitmap = font8[letter - ' '];
     bb0:	98 e0       	ldi	r25, 0x08	; 8
     bb2:	89 02       	muls	r24, r25
     bb4:	a0 01       	movw	r20, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	49 53       	subi	r20, 0x39	; 57
     bba:	5d 4f       	sbci	r21, 0xFD	; 253
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
		char_length = 5;
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
     bbc:	28 e0       	ldi	r18, 0x08	; 8
     bbe:	0a c0       	rjmp	.+20     	; 0xbd4 <oled_print_char_of_size+0x5e>
     bc0:	fa 01       	movw	r30, r20
     bc2:	e8 0f       	add	r30, r24
     bc4:	f9 1f       	adc	r31, r25
		letter_bitmap = font8[letter - ' '];
	}
	for (int i = 0; i < char_length; i++) {
      oled_write_data(pgm_read_byte(&(letter_bitmap[i])));
     bc6:	e4 91       	lpm	r30, Z
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     bc8:	ec 93       	st	X, r30
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
		letter_bitmap = font8[letter - ' '];
	}
	for (int i = 0; i < char_length; i++) {
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	82 17       	cp	r24, r18
     bce:	93 07       	cpc	r25, r19
     bd0:	bc f3       	brlt	.-18     	; 0xbc0 <oled_print_char_of_size+0x4a>
     bd2:	08 95       	ret
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	90 e0       	ldi	r25, 0x00	; 0
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b2 e1       	ldi	r27, 0x12	; 18
     bde:	f0 cf       	rjmp	.-32     	; 0xbc0 <oled_print_char_of_size+0x4a>

00000be0 <oled_print_char_of_size_inverted>:
}

void oled_print_char_of_size_inverted(char letter, uint8_t size) {
	uint8_t char_length = 0;
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
     be0:	62 30       	cpi	r22, 0x02	; 2
     be2:	41 f4       	brne	.+16     	; 0xbf4 <oled_print_char_of_size_inverted+0x14>
		char_length = 4;
		letter_bitmap = font4[letter - ' '];
     be4:	94 e0       	ldi	r25, 0x04	; 4
     be6:	89 02       	muls	r24, r25
     be8:	a0 01       	movw	r20, r0
     bea:	11 24       	eor	r1, r1
     bec:	40 51       	subi	r20, 0x10	; 16
     bee:	50 40       	sbci	r21, 0x00	; 0

void oled_print_char_of_size_inverted(char letter, uint8_t size) {
	uint8_t char_length = 0;
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
		char_length = 4;
     bf0:	24 e0       	ldi	r18, 0x04	; 4
     bf2:	26 c0       	rjmp	.+76     	; 0xc40 <oled_print_char_of_size_inverted+0x60>
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
     bf4:	61 30       	cpi	r22, 0x01	; 1
     bf6:	89 f4       	brne	.+34     	; 0xc1a <oled_print_char_of_size_inverted+0x3a>
		char_length = 5;
		letter_bitmap = font5[letter - ' '];
     bf8:	48 2f       	mov	r20, r24
     bfa:	55 27       	eor	r21, r21
     bfc:	47 fd       	sbrc	r20, 7
     bfe:	50 95       	com	r21
     c00:	40 52       	subi	r20, 0x20	; 32
     c02:	51 09       	sbc	r21, r1
     c04:	ca 01       	movw	r24, r20
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	48 0f       	add	r20, r24
     c10:	59 1f       	adc	r21, r25
     c12:	44 51       	subi	r20, 0x14	; 20
     c14:	5e 4f       	sbci	r21, 0xFE	; 254
	unsigned char *letter_bitmap;
	if (size == FONT_SIZE_SMALL) {
		char_length = 4;
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
		char_length = 5;
     c16:	25 e0       	ldi	r18, 0x05	; 5
     c18:	13 c0       	rjmp	.+38     	; 0xc40 <oled_print_char_of_size_inverted+0x60>
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
		letter_bitmap = font8[letter - ' '];
     c1a:	98 e0       	ldi	r25, 0x08	; 8
     c1c:	89 02       	muls	r24, r25
     c1e:	a0 01       	movw	r20, r0
     c20:	11 24       	eor	r1, r1
     c22:	49 53       	subi	r20, 0x39	; 57
     c24:	5d 4f       	sbci	r21, 0xFD	; 253
		letter_bitmap = font4[letter - ' '];
		} else if (size == FONT_SIZE_MEDIUM) {
		char_length = 5;
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
     c26:	28 e0       	ldi	r18, 0x08	; 8
     c28:	0b c0       	rjmp	.+22     	; 0xc40 <oled_print_char_of_size_inverted+0x60>
     c2a:	fa 01       	movw	r30, r20
     c2c:	e8 0f       	add	r30, r24
     c2e:	f9 1f       	adc	r31, r25
		letter_bitmap = font8[letter - ' '];
	}
	for (int i = 0; i < char_length; i++) {
      oled_write_data(~pgm_read_byte(&(letter_bitmap[i])));
     c30:	e4 91       	lpm	r30, Z
     c32:	e0 95       	com	r30
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     c34:	ec 93       	st	X, r30
		letter_bitmap = font5[letter - ' '];
		} else {
		char_length = 8;
		letter_bitmap = font8[letter - ' '];
	}
	for (int i = 0; i < char_length; i++) {
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	82 17       	cp	r24, r18
     c3a:	93 07       	cpc	r25, r19
     c3c:	b4 f3       	brlt	.-20     	; 0xc2a <oled_print_char_of_size_inverted+0x4a>
     c3e:	08 95       	ret
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
	*adress = data;
}

void oled_write_data(uint8_t data) {
	volatile uint8_t *adress = OLEDD_OFFSET;
	*adress = data;
     c46:	a0 e0       	ldi	r26, 0x00	; 0
     c48:	b2 e1       	ldi	r27, 0x12	; 18
     c4a:	ef cf       	rjmp	.-34     	; 0xc2a <oled_print_char_of_size_inverted+0x4a>

00000c4c <oled_print_char>:

uint8_t printf_page = 0;
uint8_t printf_size = 0;

uint8_t oled_print_char(char letter) {
	if (letter == '\n') {
     c4c:	8a 30       	cpi	r24, 0x0A	; 10
     c4e:	51 f4       	brne	.+20     	; 0xc64 <oled_print_char+0x18>
		printf_page += 1;
     c50:	80 91 ab 01 	lds	r24, 0x01AB
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	80 93 ab 01 	sts	0x01AB, r24
		oled_page_select(printf_page);
     c5a:	65 df       	rcall	.-310    	; 0xb26 <oled_page_select>
		oled_columb_range_select(0, OLED_COLUMBS);
     c5c:	60 e8       	ldi	r22, 0x80	; 128
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	4e df       	rcall	.-356    	; 0xafe <oled_columb_range_select>
     c62:	03 c0       	rjmp	.+6      	; 0xc6a <oled_print_char+0x1e>
		} else {
		oled_print_char_of_size(letter, printf_size);
     c64:	60 91 aa 01 	lds	r22, 0x01AA
     c68:	86 df       	rcall	.-244    	; 0xb76 <oled_print_char_of_size>
		uint8_t columb_adder = 0;
	}
	return 0;
}
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	08 95       	ret

00000c6e <oled_print_char_inverted>:

uint8_t oled_print_char_inverted(char letter) {
	if (letter == '\n') {
     c6e:	8a 30       	cpi	r24, 0x0A	; 10
     c70:	51 f4       	brne	.+20     	; 0xc86 <oled_print_char_inverted+0x18>
		printf_page += 1;
     c72:	80 91 ab 01 	lds	r24, 0x01AB
     c76:	8f 5f       	subi	r24, 0xFF	; 255
     c78:	80 93 ab 01 	sts	0x01AB, r24
		oled_page_select(printf_page);
     c7c:	54 df       	rcall	.-344    	; 0xb26 <oled_page_select>
		oled_columb_range_select(0, OLED_COLUMBS);
     c7e:	60 e8       	ldi	r22, 0x80	; 128
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	3d df       	rcall	.-390    	; 0xafe <oled_columb_range_select>
     c84:	03 c0       	rjmp	.+6      	; 0xc8c <oled_print_char_inverted+0x1e>
	} else {
		oled_print_char_of_size_inverted(letter, printf_size);
     c86:	60 91 aa 01 	lds	r22, 0x01AA
     c8a:	aa df       	rcall	.-172    	; 0xbe0 <oled_print_char_of_size_inverted>
		uint8_t columb_adder = 0;
	}
	return 0;
}
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	08 95       	ret

00000c90 <oled_printf>:

void oled_printf(char text[]){
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
	int lenght = strlen(text);
     c9c:	fc 01       	movw	r30, r24
     c9e:	01 90       	ld	r0, Z+
     ca0:	00 20       	and	r0, r0
     ca2:	e9 f7       	brne	.-6      	; 0xc9e <oled_printf+0xe>
     ca4:	31 97       	sbiw	r30, 0x01	; 1
     ca6:	7f 01       	movw	r14, r30
     ca8:	e8 1a       	sub	r14, r24
     caa:	f9 0a       	sbc	r15, r25
	//printf("size =  %d \r\n", lenght);
	for (int c = 0; c<lenght; c++){
     cac:	1e 14       	cp	r1, r14
     cae:	1f 04       	cpc	r1, r15
     cb0:	5c f4       	brge	.+22     	; 0xcc8 <oled_printf+0x38>
     cb2:	8c 01       	movw	r16, r24
     cb4:	c0 e0       	ldi	r28, 0x00	; 0
     cb6:	d0 e0       	ldi	r29, 0x00	; 0
		//printf("letter =  %d \r\n", c);
		oled_print_char(text[c]);
     cb8:	f8 01       	movw	r30, r16
     cba:	81 91       	ld	r24, Z+
     cbc:	8f 01       	movw	r16, r30
     cbe:	c6 df       	rcall	.-116    	; 0xc4c <oled_print_char>
}

void oled_printf(char text[]){
	int lenght = strlen(text);
	//printf("size =  %d \r\n", lenght);
	for (int c = 0; c<lenght; c++){
     cc0:	21 96       	adiw	r28, 0x01	; 1
     cc2:	ec 16       	cp	r14, r28
     cc4:	fd 06       	cpc	r15, r29
     cc6:	c1 f7       	brne	.-16     	; 0xcb8 <oled_printf+0x28>
		//printf("letter =  %d \r\n", c);
		oled_print_char(text[c]);
	}
}
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	08 95       	ret

00000cd6 <oled_printf_inverted>:

void oled_printf_inverted(char text[]){
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
	int lenght = strlen(text);
     ce2:	fc 01       	movw	r30, r24
     ce4:	01 90       	ld	r0, Z+
     ce6:	00 20       	and	r0, r0
     ce8:	e9 f7       	brne	.-6      	; 0xce4 <oled_printf_inverted+0xe>
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	7f 01       	movw	r14, r30
     cee:	e8 1a       	sub	r14, r24
     cf0:	f9 0a       	sbc	r15, r25
	//printf("size =  %d \r\n", lenght);
	for (int c = 0; c<lenght; c++){
     cf2:	1e 14       	cp	r1, r14
     cf4:	1f 04       	cpc	r1, r15
     cf6:	5c f4       	brge	.+22     	; 0xd0e <oled_printf_inverted+0x38>
     cf8:	8c 01       	movw	r16, r24
     cfa:	c0 e0       	ldi	r28, 0x00	; 0
     cfc:	d0 e0       	ldi	r29, 0x00	; 0
		//printf("letter =  %d \r\n", c);
		oled_print_char_inverted(text[c]);
     cfe:	f8 01       	movw	r30, r16
     d00:	81 91       	ld	r24, Z+
     d02:	8f 01       	movw	r16, r30
     d04:	b4 df       	rcall	.-152    	; 0xc6e <oled_print_char_inverted>
}

void oled_printf_inverted(char text[]){
	int lenght = strlen(text);
	//printf("size =  %d \r\n", lenght);
	for (int c = 0; c<lenght; c++){
     d06:	21 96       	adiw	r28, 0x01	; 1
     d08:	ec 16       	cp	r14, r28
     d0a:	fd 06       	cpc	r15, r29
     d0c:	c1 f7       	brne	.-16     	; 0xcfe <oled_printf_inverted+0x28>
		//printf("letter =  %d \r\n", c);
		oled_print_char_inverted(text[c]);
	}
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	08 95       	ret

00000d1c <oled_get_joy_pos>:
	oled_set_joy_pos(joy_pos);

}

int oled_get_joy_pos(){
	return xmem_read(JOY_POS_ADDRESS);
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	98 e1       	ldi	r25, 0x18	; 24
     d20:	e8 d0       	rcall	.+464    	; 0xef2 <xmem_read>
}
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	08 95       	ret

00000d26 <oled_display_activity>:
		//printf("letter =  %d \r\n", c);
		oled_print_char_inverted(text[c]);
	}
}

void oled_display_activity(){
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
	oled_clear_screen();
     d2a:	1c df       	rcall	.-456    	; 0xb64 <oled_clear_screen>
	int joy_pos = oled_get_joy_pos();
     d2c:	f7 df       	rcall	.-18     	; 0xd1c <oled_get_joy_pos>
     d2e:	ec 01       	movw	r28, r24
			oled_printf_inverted(current_activity->oled_string[i]);
		else
			oled_printf(current_activity->oled_string[i]);
	}*/
	
	oled_page_select(1);
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	f9 de       	rcall	.-526    	; 0xb26 <oled_page_select>
	if(joy_pos == 0)
     d34:	20 97       	sbiw	r28, 0x00	; 0
     d36:	59 f4       	brne	.+22     	; 0xd4e <oled_display_activity+0x28>
		oled_printf_inverted("Spring \n");
     d38:	8e e8       	ldi	r24, 0x8E	; 142
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	cc df       	rcall	.-104    	; 0xcd6 <oled_printf_inverted>
	else
		oled_printf("Spring \n");
	
	oled_page_select(2);
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	f2 de       	rcall	.-540    	; 0xb26 <oled_page_select>
	if(joy_pos == 1)
		oled_printf_inverted("Summer \n");
	else
		oled_printf("Summer \n");
     d42:	87 e9       	ldi	r24, 0x97	; 151
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	a4 df       	rcall	.-184    	; 0xc90 <oled_printf>
	
	oled_page_select(3);
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	ed de       	rcall	.-550    	; 0xb26 <oled_page_select>
     d4c:	19 c0       	rjmp	.+50     	; 0xd80 <oled_display_activity+0x5a>
	
	oled_page_select(1);
	if(joy_pos == 0)
		oled_printf_inverted("Spring \n");
	else
		oled_printf("Spring \n");
     d4e:	8e e8       	ldi	r24, 0x8E	; 142
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	9e df       	rcall	.-196    	; 0xc90 <oled_printf>
	
	oled_page_select(2);
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	e7 de       	rcall	.-562    	; 0xb26 <oled_page_select>
	if(joy_pos == 1)
     d58:	c1 30       	cpi	r28, 0x01	; 1
     d5a:	d1 05       	cpc	r29, r1
     d5c:	31 f4       	brne	.+12     	; 0xd6a <oled_display_activity+0x44>
		oled_printf_inverted("Summer \n");
     d5e:	87 e9       	ldi	r24, 0x97	; 151
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	b9 df       	rcall	.-142    	; 0xcd6 <oled_printf_inverted>
	else
		oled_printf("Summer \n");
	
	oled_page_select(3);
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	df de       	rcall	.-578    	; 0xb26 <oled_page_select>
     d68:	0b c0       	rjmp	.+22     	; 0xd80 <oled_display_activity+0x5a>
	
	oled_page_select(2);
	if(joy_pos == 1)
		oled_printf_inverted("Summer \n");
	else
		oled_printf("Summer \n");
     d6a:	87 e9       	ldi	r24, 0x97	; 151
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	90 df       	rcall	.-224    	; 0xc90 <oled_printf>
	
	oled_page_select(3);
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	d9 de       	rcall	.-590    	; 0xb26 <oled_page_select>
	if(joy_pos == 2)
     d74:	22 97       	sbiw	r28, 0x02	; 2
     d76:	21 f4       	brne	.+8      	; 0xd80 <oled_display_activity+0x5a>
		oled_printf_inverted("Return \n");
     d78:	80 ea       	ldi	r24, 0xA0	; 160
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	ac df       	rcall	.-168    	; 0xcd6 <oled_printf_inverted>
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <oled_display_activity+0x60>
	else
		oled_printf("Return \n");
     d80:	80 ea       	ldi	r24, 0xA0	; 160
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	85 df       	rcall	.-246    	; 0xc90 <oled_printf>
}
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	08 95       	ret

00000d8c <oled_init>:
int joy_pos;


void oled_write_c(uint8_t data) {
	volatile uint8_t *adress = OLEDC_OFFSET;
	*adress = data;
     d8c:	e0 e0       	ldi	r30, 0x00	; 0
     d8e:	f0 e1       	ldi	r31, 0x10	; 16
     d90:	8e ea       	ldi	r24, 0xAE	; 174
     d92:	80 83       	st	Z, r24
     d94:	81 ea       	ldi	r24, 0xA1	; 161
     d96:	80 83       	st	Z, r24
     d98:	8a ed       	ldi	r24, 0xDA	; 218
     d9a:	80 83       	st	Z, r24
     d9c:	82 e1       	ldi	r24, 0x12	; 18
     d9e:	80 83       	st	Z, r24
     da0:	88 ec       	ldi	r24, 0xC8	; 200
     da2:	80 83       	st	Z, r24
     da4:	88 ea       	ldi	r24, 0xA8	; 168
     da6:	80 83       	st	Z, r24
     da8:	8f e3       	ldi	r24, 0x3F	; 63
     daa:	80 83       	st	Z, r24
     dac:	85 ed       	ldi	r24, 0xD5	; 213
     dae:	80 83       	st	Z, r24
     db0:	80 e8       	ldi	r24, 0x80	; 128
     db2:	80 83       	st	Z, r24
     db4:	81 e8       	ldi	r24, 0x81	; 129
     db6:	80 83       	st	Z, r24
     db8:	80 e5       	ldi	r24, 0x50	; 80
     dba:	80 83       	st	Z, r24
     dbc:	89 ed       	ldi	r24, 0xD9	; 217
     dbe:	80 83       	st	Z, r24
     dc0:	81 e2       	ldi	r24, 0x21	; 33
     dc2:	80 83       	st	Z, r24
     dc4:	80 e2       	ldi	r24, 0x20	; 32
     dc6:	80 83       	st	Z, r24
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	80 83       	st	Z, r24
     dcc:	8b ed       	ldi	r24, 0xDB	; 219
     dce:	80 83       	st	Z, r24
     dd0:	80 e3       	ldi	r24, 0x30	; 48
     dd2:	80 83       	st	Z, r24
     dd4:	8d ea       	ldi	r24, 0xAD	; 173
     dd6:	80 83       	st	Z, r24
     dd8:	10 82       	st	Z, r1
     dda:	84 ea       	ldi	r24, 0xA4	; 164
     ddc:	80 83       	st	Z, r24
     dde:	86 ea       	ldi	r24, 0xA6	; 166
     de0:	80 83       	st	Z, r24
     de2:	8f ea       	ldi	r24, 0xAF	; 175
     de4:	80 83       	st	Z, r24
	oled_write_c(0xad);	//master configuration
	oled_write_c(0x00);
	oled_write_c(0xa4);	//out follows RAM content
	oled_write_c(0xa6);	//set normal display
	oled_write_c(0xaf);	//display on
	oled_clear_screen();
     de6:	be de       	rcall	.-644    	; 0xb64 <oled_clear_screen>
	//current_activity = &oled_main;
	joy_pos = 0;
     de8:	10 92 ad 01 	sts	0x01AD, r1
     dec:	10 92 ac 01 	sts	0x01AC, r1
	oled_display_activity();
     df0:	9a cf       	rjmp	.-204    	; 0xd26 <oled_display_activity>
}
     df2:	08 95       	ret

00000df4 <oled_set_joy_pos>:
int oled_get_joy_pos(){
	return xmem_read(JOY_POS_ADDRESS);
}

void oled_set_joy_pos(int joy_pos){
	xmem_write(joy_pos, JOY_POS_ADDRESS);
     df4:	62 e0       	ldi	r22, 0x02	; 2
     df6:	78 e1       	ldi	r23, 0x18	; 24
     df8:	78 c0       	rjmp	.+240    	; 0xeea <xmem_write>
     dfa:	08 95       	ret

00000dfc <oled_actualise_joy_pos>:
	else
		oled_printf("Return \n");
}

void oled_actualise_joy_pos(int joy_direction)
{
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	ec 01       	movw	r28, r24
	int joy_pos = oled_get_joy_pos();	
     e02:	8c df       	rcall	.-232    	; 0xd1c <oled_get_joy_pos>
	if(joy_direction == UP)
     e04:	c2 30       	cpi	r28, 0x02	; 2
     e06:	d1 05       	cpc	r29, r1
     e08:	21 f4       	brne	.+8      	; 0xe12 <oled_actualise_joy_pos+0x16>
		if (joy_pos==0){
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	61 f0       	breq	.+24     	; 0xe26 <oled_actualise_joy_pos+0x2a>
			joy_pos=2;
		}else{
			joy_pos = (joy_pos - 1);
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	0f c0       	rjmp	.+30     	; 0xe30 <oled_actualise_joy_pos+0x34>
		}
	else if(joy_direction == DOWN)
     e12:	23 97       	sbiw	r28, 0x03	; 3
     e14:	69 f4       	brne	.+26     	; 0xe30 <oled_actualise_joy_pos+0x34>
		if (joy_pos==2){
     e16:	82 30       	cpi	r24, 0x02	; 2
     e18:	91 05       	cpc	r25, r1
     e1a:	41 f0       	breq	.+16     	; 0xe2c <oled_actualise_joy_pos+0x30>
			joy_pos=0;
		}else{
			joy_pos = (joy_pos + 1)%3;
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	63 e0       	ldi	r22, 0x03	; 3
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	79 d0       	rcall	.+242    	; 0xf16 <__divmodhi4>
     e24:	05 c0       	rjmp	.+10     	; 0xe30 <oled_actualise_joy_pos+0x34>
void oled_actualise_joy_pos(int joy_direction)
{
	int joy_pos = oled_get_joy_pos();	
	if(joy_direction == UP)
		if (joy_pos==0){
			joy_pos=2;
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <oled_actualise_joy_pos+0x34>
		}else{
			joy_pos = (joy_pos - 1);
		}
	else if(joy_direction == DOWN)
		if (joy_pos==2){
			joy_pos=0;
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
		}else{
			joy_pos = (joy_pos + 1)%3;
		}
	oled_set_joy_pos(joy_pos);
     e30:	e1 df       	rcall	.-62     	; 0xdf4 <oled_set_joy_pos>

}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <spi_init>:
#include "spi.h"

void spi_init() 
{
	/* Set MOSI and SCK and CS output, all others input */
	DDRB = (1 << PB5) | (1 << PB7) | (1 << PB4);
     e38:	80 eb       	ldi	r24, 0xB0	; 176
     e3a:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PB4);
     e3c:	c4 9a       	sbi	0x18, 4	; 24
	/* Enable interrupt */

	// SPCR = 1<<SPIE;

	/* Enable SPI, Master, set clock rate fck/16 , SPI mode 0 by default*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);// | (1<<SPIE)
     e3e:	81 e5       	ldi	r24, 0x51	; 81
     e40:	8d b9       	out	0x0d, r24	; 13
     e42:	08 95       	ret

00000e44 <spi_read>:
}

void spi_read(uint8_t *receive_data, uint8_t data_length) 
{
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	2a 97       	sbiw	r28, 0x0a	; 10
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
	uint8_t dummy_data[MAX_CAN_LENGTH];
	
	for (int i = 0; i < data_length; i++)
     e58:	66 23       	and	r22, r22
     e5a:	81 f0       	breq	.+32     	; 0xe7c <spi_read+0x38>
     e5c:	fe 01       	movw	r30, r28
     e5e:	31 96       	adiw	r30, 0x01	; 1
     e60:	a8 2f       	mov	r26, r24
     e62:	b9 2f       	mov	r27, r25
     e64:	cf 01       	movw	r24, r30
     e66:	86 0f       	add	r24, r22
     e68:	91 1d       	adc	r25, r1
	{
		SPDR = dummy_data[i];
     e6a:	21 91       	ld	r18, Z+
     e6c:	2f b9       	out	0x0f, r18	; 15
		while (!(SPSR & (1 << SPIF)));
     e6e:	77 9b       	sbis	0x0e, 7	; 14
     e70:	fe cf       	rjmp	.-4      	; 0xe6e <spi_read+0x2a>
		receive_data[i] = SPDR;
     e72:	2f b1       	in	r18, 0x0f	; 15
     e74:	2d 93       	st	X+, r18

void spi_read(uint8_t *receive_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	
	for (int i = 0; i < data_length; i++)
     e76:	e8 17       	cp	r30, r24
     e78:	f9 07       	cpc	r31, r25
     e7a:	b9 f7       	brne	.-18     	; 0xe6a <spi_read+0x26>
		SPDR = dummy_data[i];
		while (!(SPSR & (1 << SPIF)));
		receive_data[i] = SPDR;
	}
	
}
     e7c:	2a 96       	adiw	r28, 0x0a	; 10
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <spi_write>:

void spi_write(uint8_t *send_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	for (int i = 0; i < data_length; i++)
     e8e:	26 2f       	mov	r18, r22
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	12 16       	cp	r1, r18
     e94:	13 06       	cpc	r1, r19
     e96:	6c f4       	brge	.+26     	; 0xeb2 <spi_write+0x24>
     e98:	e8 2f       	mov	r30, r24
     e9a:	f9 2f       	mov	r31, r25
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
	{
		SPDR = send_data[i];
     ea0:	41 91       	ld	r20, Z+
     ea2:	4f b9       	out	0x0f, r20	; 15
		while (!(SPSR & (1 << SPIF)));
     ea4:	77 9b       	sbis	0x0e, 7	; 14
     ea6:	fe cf       	rjmp	.-4      	; 0xea4 <spi_write+0x16>
		dummy_data[i] = SPDR;
     ea8:	4f b1       	in	r20, 0x0f	; 15
}

void spi_write(uint8_t *send_data, uint8_t data_length) 
{
	uint8_t dummy_data[MAX_CAN_LENGTH];
	for (int i = 0; i < data_length; i++)
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	82 17       	cp	r24, r18
     eae:	93 07       	cpc	r25, r19
     eb0:	bc f3       	brlt	.-18     	; 0xea0 <spi_write+0x12>
     eb2:	08 95       	ret

00000eb4 <USART_Transmit>:

//for 5 to 8 Data bits
void USART_Transmit(unsigned char data)
{
	//wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));//or UDRE1
     eb4:	5d 9b       	sbis	0x0b, 5	; 11
     eb6:	fe cf       	rjmp	.-4      	; 0xeb4 <USART_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;//or UDR1
     eb8:	8c b9       	out	0x0c, r24	; 12
     eba:	08 95       	ret

00000ebc <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	//Wait for data to be received
	while((UCSR0A & (1<<RXC0)));
     ebc:	5f 99       	sbic	0x0b, 7	; 11
     ebe:	fe cf       	rjmp	.-4      	; 0xebc <USART_Receive>
	
	//Get and return data from buffer
	return UDR0;//or UDR1
     ec0:	8c b1       	in	r24, 0x0c	; 12
}
     ec2:	08 95       	ret

00000ec4 <USART_Init>:

void USART_Init(unsigned int ubrr)
{
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
     ec4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
     ec6:	89 b9       	out	0x09, r24	; 9
	
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)  | (1<<TXEN0) | (1<<RXCIE0);
     ec8:	88 e9       	ldi	r24, 0x98	; 152
     eca:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8 data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00); // or USBS1 or other one
     ecc:	8e e8       	ldi	r24, 0x8E	; 142
     ece:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
     ed0:	6e e5       	ldi	r22, 0x5E	; 94
     ed2:	77 e0       	ldi	r23, 0x07	; 7
     ed4:	8a e5       	ldi	r24, 0x5A	; 90
     ed6:	97 e0       	ldi	r25, 0x07	; 7
     ed8:	45 c0       	rjmp	.+138    	; 0xf64 <fdevopen>
     eda:	08 95       	ret

00000edc <xmem_init>:

#include "xmem.h"
#include "usart.h"

void xmem_init(void){
	MCUCR |= (1<<SRE);
     edc:	85 b7       	in	r24, 0x35	; 53
     ede:	80 68       	ori	r24, 0x80	; 128
     ee0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     ee2:	80 b7       	in	r24, 0x30	; 48
     ee4:	80 62       	ori	r24, 0x20	; 32
     ee6:	80 bf       	out	0x30, r24	; 48
     ee8:	08 95       	ret

00000eea <xmem_write>:
}

void xmem_write(uint8_t data, uint16_t addr){
	volatile char *ext_mem = (char *) BASE_ADDRESS;
	ext_mem[addr] = data;
     eea:	fb 01       	movw	r30, r22
     eec:	f0 5f       	subi	r31, 0xF0	; 240
     eee:	80 83       	st	Z, r24
     ef0:	08 95       	ret

00000ef2 <xmem_read>:
}

uint8_t xmem_read(uint16_t addr){
	volatile char *ext_mem = (char*) BASE_ADDRESS;
	uint8_t ret_val = ext_mem[addr];
     ef2:	90 5f       	subi	r25, 0xF0	; 240
     ef4:	fc 01       	movw	r30, r24
     ef6:	80 81       	ld	r24, Z
	return ret_val;
}
     ef8:	08 95       	ret

00000efa <global_init>:
#include "can_controller.h"
#include "communication.h"


void global_init(){
	USART_Init(MYUBRR);
     efa:	8f e1       	ldi	r24, 0x1F	; 31
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	e2 df       	rcall	.-60     	; 0xec4 <USART_Init>
	xmem_init();
     f00:	ed df       	rcall	.-38     	; 0xedc <xmem_init>
	oled_init();
     f02:	44 df       	rcall	.-376    	; 0xd8c <oled_init>
	adc_init();
     f04:	6c dc       	rcall	.-1832   	; 0x7de <adc_init>
	can_init();
     f06:	82 dc       	rcall	.-1788   	; 0x80c <can_init>
	//SRAM_test();
	
	DDRB &= ~(0b0111);	
     f08:	87 b3       	in	r24, 0x17	; 23
     f0a:	88 7f       	andi	r24, 0xF8	; 248
     f0c:	87 bb       	out	0x17, r24	; 23
     f0e:	08 95       	ret

00000f10 <main>:
}

int main(void){
	
	global_init();
     f10:	f4 df       	rcall	.-24     	; 0xefa <global_init>
	
	
	
	
	while(1){	
		com_actualise_system();		
     f12:	f6 dc       	rcall	.-1556   	; 0x900 <com_actualise_system>
     f14:	fe cf       	rjmp	.-4      	; 0xf12 <main+0x2>

00000f16 <__divmodhi4>:
     f16:	97 fb       	bst	r25, 7
     f18:	07 2e       	mov	r0, r23
     f1a:	16 f4       	brtc	.+4      	; 0xf20 <__divmodhi4+0xa>
     f1c:	00 94       	com	r0
     f1e:	06 d0       	rcall	.+12     	; 0xf2c <__divmodhi4_neg1>
     f20:	77 fd       	sbrc	r23, 7
     f22:	08 d0       	rcall	.+16     	; 0xf34 <__divmodhi4_neg2>
     f24:	0b d0       	rcall	.+22     	; 0xf3c <__udivmodhi4>
     f26:	07 fc       	sbrc	r0, 7
     f28:	05 d0       	rcall	.+10     	; 0xf34 <__divmodhi4_neg2>
     f2a:	3e f4       	brtc	.+14     	; 0xf3a <__divmodhi4_exit>

00000f2c <__divmodhi4_neg1>:
     f2c:	90 95       	com	r25
     f2e:	81 95       	neg	r24
     f30:	9f 4f       	sbci	r25, 0xFF	; 255
     f32:	08 95       	ret

00000f34 <__divmodhi4_neg2>:
     f34:	70 95       	com	r23
     f36:	61 95       	neg	r22
     f38:	7f 4f       	sbci	r23, 0xFF	; 255

00000f3a <__divmodhi4_exit>:
     f3a:	08 95       	ret

00000f3c <__udivmodhi4>:
     f3c:	aa 1b       	sub	r26, r26
     f3e:	bb 1b       	sub	r27, r27
     f40:	51 e1       	ldi	r21, 0x11	; 17
     f42:	07 c0       	rjmp	.+14     	; 0xf52 <__udivmodhi4_ep>

00000f44 <__udivmodhi4_loop>:
     f44:	aa 1f       	adc	r26, r26
     f46:	bb 1f       	adc	r27, r27
     f48:	a6 17       	cp	r26, r22
     f4a:	b7 07       	cpc	r27, r23
     f4c:	10 f0       	brcs	.+4      	; 0xf52 <__udivmodhi4_ep>
     f4e:	a6 1b       	sub	r26, r22
     f50:	b7 0b       	sbc	r27, r23

00000f52 <__udivmodhi4_ep>:
     f52:	88 1f       	adc	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	5a 95       	dec	r21
     f58:	a9 f7       	brne	.-22     	; 0xf44 <__udivmodhi4_loop>
     f5a:	80 95       	com	r24
     f5c:	90 95       	com	r25
     f5e:	bc 01       	movw	r22, r24
     f60:	cd 01       	movw	r24, r26
     f62:	08 95       	ret

00000f64 <fdevopen>:
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	ec 01       	movw	r28, r24
     f6e:	8b 01       	movw	r16, r22
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	31 f4       	brne	.+12     	; 0xf80 <fdevopen+0x1c>
     f74:	61 15       	cp	r22, r1
     f76:	71 05       	cpc	r23, r1
     f78:	19 f4       	brne	.+6      	; 0xf80 <fdevopen+0x1c>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	37 c0       	rjmp	.+110    	; 0xfee <fdevopen+0x8a>
     f80:	6e e0       	ldi	r22, 0x0E	; 14
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0b d2       	rcall	.+1046   	; 0x13a0 <calloc>
     f8a:	fc 01       	movw	r30, r24
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	a9 f3       	breq	.-22     	; 0xf7a <fdevopen+0x16>
     f90:	80 e8       	ldi	r24, 0x80	; 128
     f92:	83 83       	std	Z+3, r24	; 0x03
     f94:	01 15       	cp	r16, r1
     f96:	11 05       	cpc	r17, r1
     f98:	71 f0       	breq	.+28     	; 0xfb6 <fdevopen+0x52>
     f9a:	13 87       	std	Z+11, r17	; 0x0b
     f9c:	02 87       	std	Z+10, r16	; 0x0a
     f9e:	81 e8       	ldi	r24, 0x81	; 129
     fa0:	83 83       	std	Z+3, r24	; 0x03
     fa2:	80 91 ae 01 	lds	r24, 0x01AE
     fa6:	90 91 af 01 	lds	r25, 0x01AF
     faa:	89 2b       	or	r24, r25
     fac:	21 f4       	brne	.+8      	; 0xfb6 <fdevopen+0x52>
     fae:	f0 93 af 01 	sts	0x01AF, r31
     fb2:	e0 93 ae 01 	sts	0x01AE, r30
     fb6:	20 97       	sbiw	r28, 0x00	; 0
     fb8:	c9 f0       	breq	.+50     	; 0xfec <fdevopen+0x88>
     fba:	d1 87       	std	Z+9, r29	; 0x09
     fbc:	c0 87       	std	Z+8, r28	; 0x08
     fbe:	83 81       	ldd	r24, Z+3	; 0x03
     fc0:	82 60       	ori	r24, 0x02	; 2
     fc2:	83 83       	std	Z+3, r24	; 0x03
     fc4:	80 91 b0 01 	lds	r24, 0x01B0
     fc8:	90 91 b1 01 	lds	r25, 0x01B1
     fcc:	89 2b       	or	r24, r25
     fce:	71 f4       	brne	.+28     	; 0xfec <fdevopen+0x88>
     fd0:	f0 93 b1 01 	sts	0x01B1, r31
     fd4:	e0 93 b0 01 	sts	0x01B0, r30
     fd8:	80 91 b2 01 	lds	r24, 0x01B2
     fdc:	90 91 b3 01 	lds	r25, 0x01B3
     fe0:	89 2b       	or	r24, r25
     fe2:	21 f4       	brne	.+8      	; 0xfec <fdevopen+0x88>
     fe4:	f0 93 b3 01 	sts	0x01B3, r31
     fe8:	e0 93 b2 01 	sts	0x01B2, r30
     fec:	cf 01       	movw	r24, r30
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	08 95       	ret

00000ff8 <printf>:
     ff8:	a0 e0       	ldi	r26, 0x00	; 0
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e1 e0       	ldi	r30, 0x01	; 1
     ffe:	f8 e0       	ldi	r31, 0x08	; 8
    1000:	cd c3       	rjmp	.+1946   	; 0x179c <__prologue_saves__+0x20>
    1002:	fe 01       	movw	r30, r28
    1004:	35 96       	adiw	r30, 0x05	; 5
    1006:	61 91       	ld	r22, Z+
    1008:	71 91       	ld	r23, Z+
    100a:	af 01       	movw	r20, r30
    100c:	80 91 b0 01 	lds	r24, 0x01B0
    1010:	90 91 b1 01 	lds	r25, 0x01B1
    1014:	02 d0       	rcall	.+4      	; 0x101a <vfprintf>
    1016:	e2 e0       	ldi	r30, 0x02	; 2
    1018:	dd c3       	rjmp	.+1978   	; 0x17d4 <__epilogue_restores__+0x20>

0000101a <vfprintf>:
    101a:	ac e0       	ldi	r26, 0x0C	; 12
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e2 e1       	ldi	r30, 0x12	; 18
    1020:	f8 e0       	ldi	r31, 0x08	; 8
    1022:	ac c3       	rjmp	.+1880   	; 0x177c <__prologue_saves__>
    1024:	7c 01       	movw	r14, r24
    1026:	6b 01       	movw	r12, r22
    1028:	8a 01       	movw	r16, r20
    102a:	fc 01       	movw	r30, r24
    102c:	17 82       	std	Z+7, r1	; 0x07
    102e:	16 82       	std	Z+6, r1	; 0x06
    1030:	83 81       	ldd	r24, Z+3	; 0x03
    1032:	81 ff       	sbrs	r24, 1
    1034:	b0 c1       	rjmp	.+864    	; 0x1396 <vfprintf+0x37c>
    1036:	ce 01       	movw	r24, r28
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	4c 01       	movw	r8, r24
    103c:	f7 01       	movw	r30, r14
    103e:	93 81       	ldd	r25, Z+3	; 0x03
    1040:	f6 01       	movw	r30, r12
    1042:	93 fd       	sbrc	r25, 3
    1044:	85 91       	lpm	r24, Z+
    1046:	93 ff       	sbrs	r25, 3
    1048:	81 91       	ld	r24, Z+
    104a:	6f 01       	movw	r12, r30
    104c:	88 23       	and	r24, r24
    104e:	09 f4       	brne	.+2      	; 0x1052 <vfprintf+0x38>
    1050:	9e c1       	rjmp	.+828    	; 0x138e <vfprintf+0x374>
    1052:	85 32       	cpi	r24, 0x25	; 37
    1054:	39 f4       	brne	.+14     	; 0x1064 <vfprintf+0x4a>
    1056:	93 fd       	sbrc	r25, 3
    1058:	85 91       	lpm	r24, Z+
    105a:	93 ff       	sbrs	r25, 3
    105c:	81 91       	ld	r24, Z+
    105e:	6f 01       	movw	r12, r30
    1060:	85 32       	cpi	r24, 0x25	; 37
    1062:	21 f4       	brne	.+8      	; 0x106c <vfprintf+0x52>
    1064:	b7 01       	movw	r22, r14
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	f9 d2       	rcall	.+1522   	; 0x165c <fputc>
    106a:	e8 cf       	rjmp	.-48     	; 0x103c <vfprintf+0x22>
    106c:	51 2c       	mov	r5, r1
    106e:	31 2c       	mov	r3, r1
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	20 32       	cpi	r18, 0x20	; 32
    1074:	a0 f4       	brcc	.+40     	; 0x109e <vfprintf+0x84>
    1076:	8b 32       	cpi	r24, 0x2B	; 43
    1078:	69 f0       	breq	.+26     	; 0x1094 <vfprintf+0x7a>
    107a:	30 f4       	brcc	.+12     	; 0x1088 <vfprintf+0x6e>
    107c:	80 32       	cpi	r24, 0x20	; 32
    107e:	59 f0       	breq	.+22     	; 0x1096 <vfprintf+0x7c>
    1080:	83 32       	cpi	r24, 0x23	; 35
    1082:	69 f4       	brne	.+26     	; 0x109e <vfprintf+0x84>
    1084:	20 61       	ori	r18, 0x10	; 16
    1086:	2c c0       	rjmp	.+88     	; 0x10e0 <vfprintf+0xc6>
    1088:	8d 32       	cpi	r24, 0x2D	; 45
    108a:	39 f0       	breq	.+14     	; 0x109a <vfprintf+0x80>
    108c:	80 33       	cpi	r24, 0x30	; 48
    108e:	39 f4       	brne	.+14     	; 0x109e <vfprintf+0x84>
    1090:	21 60       	ori	r18, 0x01	; 1
    1092:	26 c0       	rjmp	.+76     	; 0x10e0 <vfprintf+0xc6>
    1094:	22 60       	ori	r18, 0x02	; 2
    1096:	24 60       	ori	r18, 0x04	; 4
    1098:	23 c0       	rjmp	.+70     	; 0x10e0 <vfprintf+0xc6>
    109a:	28 60       	ori	r18, 0x08	; 8
    109c:	21 c0       	rjmp	.+66     	; 0x10e0 <vfprintf+0xc6>
    109e:	27 fd       	sbrc	r18, 7
    10a0:	27 c0       	rjmp	.+78     	; 0x10f0 <vfprintf+0xd6>
    10a2:	30 ed       	ldi	r19, 0xD0	; 208
    10a4:	38 0f       	add	r19, r24
    10a6:	3a 30       	cpi	r19, 0x0A	; 10
    10a8:	78 f4       	brcc	.+30     	; 0x10c8 <vfprintf+0xae>
    10aa:	26 ff       	sbrs	r18, 6
    10ac:	06 c0       	rjmp	.+12     	; 0x10ba <vfprintf+0xa0>
    10ae:	fa e0       	ldi	r31, 0x0A	; 10
    10b0:	5f 9e       	mul	r5, r31
    10b2:	30 0d       	add	r19, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	53 2e       	mov	r5, r19
    10b8:	13 c0       	rjmp	.+38     	; 0x10e0 <vfprintf+0xc6>
    10ba:	8a e0       	ldi	r24, 0x0A	; 10
    10bc:	38 9e       	mul	r3, r24
    10be:	30 0d       	add	r19, r0
    10c0:	11 24       	eor	r1, r1
    10c2:	33 2e       	mov	r3, r19
    10c4:	20 62       	ori	r18, 0x20	; 32
    10c6:	0c c0       	rjmp	.+24     	; 0x10e0 <vfprintf+0xc6>
    10c8:	8e 32       	cpi	r24, 0x2E	; 46
    10ca:	21 f4       	brne	.+8      	; 0x10d4 <vfprintf+0xba>
    10cc:	26 fd       	sbrc	r18, 6
    10ce:	5f c1       	rjmp	.+702    	; 0x138e <vfprintf+0x374>
    10d0:	20 64       	ori	r18, 0x40	; 64
    10d2:	06 c0       	rjmp	.+12     	; 0x10e0 <vfprintf+0xc6>
    10d4:	8c 36       	cpi	r24, 0x6C	; 108
    10d6:	11 f4       	brne	.+4      	; 0x10dc <vfprintf+0xc2>
    10d8:	20 68       	ori	r18, 0x80	; 128
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <vfprintf+0xc6>
    10dc:	88 36       	cpi	r24, 0x68	; 104
    10de:	41 f4       	brne	.+16     	; 0x10f0 <vfprintf+0xd6>
    10e0:	f6 01       	movw	r30, r12
    10e2:	93 fd       	sbrc	r25, 3
    10e4:	85 91       	lpm	r24, Z+
    10e6:	93 ff       	sbrs	r25, 3
    10e8:	81 91       	ld	r24, Z+
    10ea:	6f 01       	movw	r12, r30
    10ec:	81 11       	cpse	r24, r1
    10ee:	c1 cf       	rjmp	.-126    	; 0x1072 <vfprintf+0x58>
    10f0:	98 2f       	mov	r25, r24
    10f2:	9f 7d       	andi	r25, 0xDF	; 223
    10f4:	95 54       	subi	r25, 0x45	; 69
    10f6:	93 30       	cpi	r25, 0x03	; 3
    10f8:	28 f4       	brcc	.+10     	; 0x1104 <vfprintf+0xea>
    10fa:	0c 5f       	subi	r16, 0xFC	; 252
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	ff e3       	ldi	r31, 0x3F	; 63
    1100:	f9 83       	std	Y+1, r31	; 0x01
    1102:	0d c0       	rjmp	.+26     	; 0x111e <vfprintf+0x104>
    1104:	83 36       	cpi	r24, 0x63	; 99
    1106:	31 f0       	breq	.+12     	; 0x1114 <vfprintf+0xfa>
    1108:	83 37       	cpi	r24, 0x73	; 115
    110a:	71 f0       	breq	.+28     	; 0x1128 <vfprintf+0x10e>
    110c:	83 35       	cpi	r24, 0x53	; 83
    110e:	09 f0       	breq	.+2      	; 0x1112 <vfprintf+0xf8>
    1110:	57 c0       	rjmp	.+174    	; 0x11c0 <vfprintf+0x1a6>
    1112:	21 c0       	rjmp	.+66     	; 0x1156 <vfprintf+0x13c>
    1114:	f8 01       	movw	r30, r16
    1116:	80 81       	ld	r24, Z
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	0e 5f       	subi	r16, 0xFE	; 254
    111c:	1f 4f       	sbci	r17, 0xFF	; 255
    111e:	44 24       	eor	r4, r4
    1120:	43 94       	inc	r4
    1122:	51 2c       	mov	r5, r1
    1124:	54 01       	movw	r10, r8
    1126:	14 c0       	rjmp	.+40     	; 0x1150 <vfprintf+0x136>
    1128:	38 01       	movw	r6, r16
    112a:	f2 e0       	ldi	r31, 0x02	; 2
    112c:	6f 0e       	add	r6, r31
    112e:	71 1c       	adc	r7, r1
    1130:	f8 01       	movw	r30, r16
    1132:	a0 80       	ld	r10, Z
    1134:	b1 80       	ldd	r11, Z+1	; 0x01
    1136:	26 ff       	sbrs	r18, 6
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <vfprintf+0x126>
    113a:	65 2d       	mov	r22, r5
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <vfprintf+0x12a>
    1140:	6f ef       	ldi	r22, 0xFF	; 255
    1142:	7f ef       	ldi	r23, 0xFF	; 255
    1144:	c5 01       	movw	r24, r10
    1146:	2c 87       	std	Y+12, r18	; 0x0c
    1148:	7e d2       	rcall	.+1276   	; 0x1646 <strnlen>
    114a:	2c 01       	movw	r4, r24
    114c:	83 01       	movw	r16, r6
    114e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1150:	2f 77       	andi	r18, 0x7F	; 127
    1152:	22 2e       	mov	r2, r18
    1154:	16 c0       	rjmp	.+44     	; 0x1182 <vfprintf+0x168>
    1156:	38 01       	movw	r6, r16
    1158:	f2 e0       	ldi	r31, 0x02	; 2
    115a:	6f 0e       	add	r6, r31
    115c:	71 1c       	adc	r7, r1
    115e:	f8 01       	movw	r30, r16
    1160:	a0 80       	ld	r10, Z
    1162:	b1 80       	ldd	r11, Z+1	; 0x01
    1164:	26 ff       	sbrs	r18, 6
    1166:	03 c0       	rjmp	.+6      	; 0x116e <vfprintf+0x154>
    1168:	65 2d       	mov	r22, r5
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <vfprintf+0x158>
    116e:	6f ef       	ldi	r22, 0xFF	; 255
    1170:	7f ef       	ldi	r23, 0xFF	; 255
    1172:	c5 01       	movw	r24, r10
    1174:	2c 87       	std	Y+12, r18	; 0x0c
    1176:	55 d2       	rcall	.+1194   	; 0x1622 <strnlen_P>
    1178:	2c 01       	movw	r4, r24
    117a:	2c 85       	ldd	r18, Y+12	; 0x0c
    117c:	20 68       	ori	r18, 0x80	; 128
    117e:	22 2e       	mov	r2, r18
    1180:	83 01       	movw	r16, r6
    1182:	23 fc       	sbrc	r2, 3
    1184:	19 c0       	rjmp	.+50     	; 0x11b8 <vfprintf+0x19e>
    1186:	83 2d       	mov	r24, r3
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	48 16       	cp	r4, r24
    118c:	59 06       	cpc	r5, r25
    118e:	a0 f4       	brcc	.+40     	; 0x11b8 <vfprintf+0x19e>
    1190:	b7 01       	movw	r22, r14
    1192:	80 e2       	ldi	r24, 0x20	; 32
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	62 d2       	rcall	.+1220   	; 0x165c <fputc>
    1198:	3a 94       	dec	r3
    119a:	f5 cf       	rjmp	.-22     	; 0x1186 <vfprintf+0x16c>
    119c:	f5 01       	movw	r30, r10
    119e:	27 fc       	sbrc	r2, 7
    11a0:	85 91       	lpm	r24, Z+
    11a2:	27 fe       	sbrs	r2, 7
    11a4:	81 91       	ld	r24, Z+
    11a6:	5f 01       	movw	r10, r30
    11a8:	b7 01       	movw	r22, r14
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	57 d2       	rcall	.+1198   	; 0x165c <fputc>
    11ae:	31 10       	cpse	r3, r1
    11b0:	3a 94       	dec	r3
    11b2:	f1 e0       	ldi	r31, 0x01	; 1
    11b4:	4f 1a       	sub	r4, r31
    11b6:	51 08       	sbc	r5, r1
    11b8:	41 14       	cp	r4, r1
    11ba:	51 04       	cpc	r5, r1
    11bc:	79 f7       	brne	.-34     	; 0x119c <vfprintf+0x182>
    11be:	de c0       	rjmp	.+444    	; 0x137c <vfprintf+0x362>
    11c0:	84 36       	cpi	r24, 0x64	; 100
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <vfprintf+0x1ae>
    11c4:	89 36       	cpi	r24, 0x69	; 105
    11c6:	31 f5       	brne	.+76     	; 0x1214 <vfprintf+0x1fa>
    11c8:	f8 01       	movw	r30, r16
    11ca:	27 ff       	sbrs	r18, 7
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <vfprintf+0x1c2>
    11ce:	60 81       	ld	r22, Z
    11d0:	71 81       	ldd	r23, Z+1	; 0x01
    11d2:	82 81       	ldd	r24, Z+2	; 0x02
    11d4:	93 81       	ldd	r25, Z+3	; 0x03
    11d6:	0c 5f       	subi	r16, 0xFC	; 252
    11d8:	1f 4f       	sbci	r17, 0xFF	; 255
    11da:	08 c0       	rjmp	.+16     	; 0x11ec <vfprintf+0x1d2>
    11dc:	60 81       	ld	r22, Z
    11de:	71 81       	ldd	r23, Z+1	; 0x01
    11e0:	88 27       	eor	r24, r24
    11e2:	77 fd       	sbrc	r23, 7
    11e4:	80 95       	com	r24
    11e6:	98 2f       	mov	r25, r24
    11e8:	0e 5f       	subi	r16, 0xFE	; 254
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	2f 76       	andi	r18, 0x6F	; 111
    11ee:	b2 2e       	mov	r11, r18
    11f0:	97 ff       	sbrs	r25, 7
    11f2:	09 c0       	rjmp	.+18     	; 0x1206 <vfprintf+0x1ec>
    11f4:	90 95       	com	r25
    11f6:	80 95       	com	r24
    11f8:	70 95       	com	r23
    11fa:	61 95       	neg	r22
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255
    11fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1200:	9f 4f       	sbci	r25, 0xFF	; 255
    1202:	20 68       	ori	r18, 0x80	; 128
    1204:	b2 2e       	mov	r11, r18
    1206:	2a e0       	ldi	r18, 0x0A	; 10
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	a4 01       	movw	r20, r8
    120c:	59 d2       	rcall	.+1202   	; 0x16c0 <__ultoa_invert>
    120e:	a8 2e       	mov	r10, r24
    1210:	a8 18       	sub	r10, r8
    1212:	43 c0       	rjmp	.+134    	; 0x129a <vfprintf+0x280>
    1214:	85 37       	cpi	r24, 0x75	; 117
    1216:	29 f4       	brne	.+10     	; 0x1222 <vfprintf+0x208>
    1218:	2f 7e       	andi	r18, 0xEF	; 239
    121a:	b2 2e       	mov	r11, r18
    121c:	2a e0       	ldi	r18, 0x0A	; 10
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	25 c0       	rjmp	.+74     	; 0x126c <vfprintf+0x252>
    1222:	f2 2f       	mov	r31, r18
    1224:	f9 7f       	andi	r31, 0xF9	; 249
    1226:	bf 2e       	mov	r11, r31
    1228:	8f 36       	cpi	r24, 0x6F	; 111
    122a:	c1 f0       	breq	.+48     	; 0x125c <vfprintf+0x242>
    122c:	18 f4       	brcc	.+6      	; 0x1234 <vfprintf+0x21a>
    122e:	88 35       	cpi	r24, 0x58	; 88
    1230:	79 f0       	breq	.+30     	; 0x1250 <vfprintf+0x236>
    1232:	ad c0       	rjmp	.+346    	; 0x138e <vfprintf+0x374>
    1234:	80 37       	cpi	r24, 0x70	; 112
    1236:	19 f0       	breq	.+6      	; 0x123e <vfprintf+0x224>
    1238:	88 37       	cpi	r24, 0x78	; 120
    123a:	21 f0       	breq	.+8      	; 0x1244 <vfprintf+0x22a>
    123c:	a8 c0       	rjmp	.+336    	; 0x138e <vfprintf+0x374>
    123e:	2f 2f       	mov	r18, r31
    1240:	20 61       	ori	r18, 0x10	; 16
    1242:	b2 2e       	mov	r11, r18
    1244:	b4 fe       	sbrs	r11, 4
    1246:	0d c0       	rjmp	.+26     	; 0x1262 <vfprintf+0x248>
    1248:	8b 2d       	mov	r24, r11
    124a:	84 60       	ori	r24, 0x04	; 4
    124c:	b8 2e       	mov	r11, r24
    124e:	09 c0       	rjmp	.+18     	; 0x1262 <vfprintf+0x248>
    1250:	24 ff       	sbrs	r18, 4
    1252:	0a c0       	rjmp	.+20     	; 0x1268 <vfprintf+0x24e>
    1254:	9f 2f       	mov	r25, r31
    1256:	96 60       	ori	r25, 0x06	; 6
    1258:	b9 2e       	mov	r11, r25
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <vfprintf+0x24e>
    125c:	28 e0       	ldi	r18, 0x08	; 8
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	05 c0       	rjmp	.+10     	; 0x126c <vfprintf+0x252>
    1262:	20 e1       	ldi	r18, 0x10	; 16
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	02 c0       	rjmp	.+4      	; 0x126c <vfprintf+0x252>
    1268:	20 e1       	ldi	r18, 0x10	; 16
    126a:	32 e0       	ldi	r19, 0x02	; 2
    126c:	f8 01       	movw	r30, r16
    126e:	b7 fe       	sbrs	r11, 7
    1270:	07 c0       	rjmp	.+14     	; 0x1280 <vfprintf+0x266>
    1272:	60 81       	ld	r22, Z
    1274:	71 81       	ldd	r23, Z+1	; 0x01
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	0c 5f       	subi	r16, 0xFC	; 252
    127c:	1f 4f       	sbci	r17, 0xFF	; 255
    127e:	06 c0       	rjmp	.+12     	; 0x128c <vfprintf+0x272>
    1280:	60 81       	ld	r22, Z
    1282:	71 81       	ldd	r23, Z+1	; 0x01
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 5f       	subi	r16, 0xFE	; 254
    128a:	1f 4f       	sbci	r17, 0xFF	; 255
    128c:	a4 01       	movw	r20, r8
    128e:	18 d2       	rcall	.+1072   	; 0x16c0 <__ultoa_invert>
    1290:	a8 2e       	mov	r10, r24
    1292:	a8 18       	sub	r10, r8
    1294:	fb 2d       	mov	r31, r11
    1296:	ff 77       	andi	r31, 0x7F	; 127
    1298:	bf 2e       	mov	r11, r31
    129a:	b6 fe       	sbrs	r11, 6
    129c:	0b c0       	rjmp	.+22     	; 0x12b4 <vfprintf+0x29a>
    129e:	2b 2d       	mov	r18, r11
    12a0:	2e 7f       	andi	r18, 0xFE	; 254
    12a2:	a5 14       	cp	r10, r5
    12a4:	50 f4       	brcc	.+20     	; 0x12ba <vfprintf+0x2a0>
    12a6:	b4 fe       	sbrs	r11, 4
    12a8:	0a c0       	rjmp	.+20     	; 0x12be <vfprintf+0x2a4>
    12aa:	b2 fc       	sbrc	r11, 2
    12ac:	08 c0       	rjmp	.+16     	; 0x12be <vfprintf+0x2a4>
    12ae:	2b 2d       	mov	r18, r11
    12b0:	2e 7e       	andi	r18, 0xEE	; 238
    12b2:	05 c0       	rjmp	.+10     	; 0x12be <vfprintf+0x2a4>
    12b4:	7a 2c       	mov	r7, r10
    12b6:	2b 2d       	mov	r18, r11
    12b8:	03 c0       	rjmp	.+6      	; 0x12c0 <vfprintf+0x2a6>
    12ba:	7a 2c       	mov	r7, r10
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <vfprintf+0x2a6>
    12be:	75 2c       	mov	r7, r5
    12c0:	24 ff       	sbrs	r18, 4
    12c2:	0d c0       	rjmp	.+26     	; 0x12de <vfprintf+0x2c4>
    12c4:	fe 01       	movw	r30, r28
    12c6:	ea 0d       	add	r30, r10
    12c8:	f1 1d       	adc	r31, r1
    12ca:	80 81       	ld	r24, Z
    12cc:	80 33       	cpi	r24, 0x30	; 48
    12ce:	11 f4       	brne	.+4      	; 0x12d4 <vfprintf+0x2ba>
    12d0:	29 7e       	andi	r18, 0xE9	; 233
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <vfprintf+0x2cc>
    12d4:	22 ff       	sbrs	r18, 2
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <vfprintf+0x2ca>
    12d8:	73 94       	inc	r7
    12da:	73 94       	inc	r7
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <vfprintf+0x2cc>
    12de:	82 2f       	mov	r24, r18
    12e0:	86 78       	andi	r24, 0x86	; 134
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <vfprintf+0x2cc>
    12e4:	73 94       	inc	r7
    12e6:	23 fd       	sbrc	r18, 3
    12e8:	12 c0       	rjmp	.+36     	; 0x130e <vfprintf+0x2f4>
    12ea:	20 ff       	sbrs	r18, 0
    12ec:	06 c0       	rjmp	.+12     	; 0x12fa <vfprintf+0x2e0>
    12ee:	5a 2c       	mov	r5, r10
    12f0:	73 14       	cp	r7, r3
    12f2:	18 f4       	brcc	.+6      	; 0x12fa <vfprintf+0x2e0>
    12f4:	53 0c       	add	r5, r3
    12f6:	57 18       	sub	r5, r7
    12f8:	73 2c       	mov	r7, r3
    12fa:	73 14       	cp	r7, r3
    12fc:	60 f4       	brcc	.+24     	; 0x1316 <vfprintf+0x2fc>
    12fe:	b7 01       	movw	r22, r14
    1300:	80 e2       	ldi	r24, 0x20	; 32
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	2c 87       	std	Y+12, r18	; 0x0c
    1306:	aa d1       	rcall	.+852    	; 0x165c <fputc>
    1308:	73 94       	inc	r7
    130a:	2c 85       	ldd	r18, Y+12	; 0x0c
    130c:	f6 cf       	rjmp	.-20     	; 0x12fa <vfprintf+0x2e0>
    130e:	73 14       	cp	r7, r3
    1310:	10 f4       	brcc	.+4      	; 0x1316 <vfprintf+0x2fc>
    1312:	37 18       	sub	r3, r7
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <vfprintf+0x2fe>
    1316:	31 2c       	mov	r3, r1
    1318:	24 ff       	sbrs	r18, 4
    131a:	11 c0       	rjmp	.+34     	; 0x133e <vfprintf+0x324>
    131c:	b7 01       	movw	r22, r14
    131e:	80 e3       	ldi	r24, 0x30	; 48
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	2c 87       	std	Y+12, r18	; 0x0c
    1324:	9b d1       	rcall	.+822    	; 0x165c <fputc>
    1326:	2c 85       	ldd	r18, Y+12	; 0x0c
    1328:	22 ff       	sbrs	r18, 2
    132a:	16 c0       	rjmp	.+44     	; 0x1358 <vfprintf+0x33e>
    132c:	21 ff       	sbrs	r18, 1
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <vfprintf+0x31c>
    1330:	88 e5       	ldi	r24, 0x58	; 88
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 c0       	rjmp	.+4      	; 0x133a <vfprintf+0x320>
    1336:	88 e7       	ldi	r24, 0x78	; 120
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	b7 01       	movw	r22, r14
    133c:	0c c0       	rjmp	.+24     	; 0x1356 <vfprintf+0x33c>
    133e:	82 2f       	mov	r24, r18
    1340:	86 78       	andi	r24, 0x86	; 134
    1342:	51 f0       	breq	.+20     	; 0x1358 <vfprintf+0x33e>
    1344:	21 fd       	sbrc	r18, 1
    1346:	02 c0       	rjmp	.+4      	; 0x134c <vfprintf+0x332>
    1348:	80 e2       	ldi	r24, 0x20	; 32
    134a:	01 c0       	rjmp	.+2      	; 0x134e <vfprintf+0x334>
    134c:	8b e2       	ldi	r24, 0x2B	; 43
    134e:	27 fd       	sbrc	r18, 7
    1350:	8d e2       	ldi	r24, 0x2D	; 45
    1352:	b7 01       	movw	r22, r14
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	82 d1       	rcall	.+772    	; 0x165c <fputc>
    1358:	a5 14       	cp	r10, r5
    135a:	30 f4       	brcc	.+12     	; 0x1368 <vfprintf+0x34e>
    135c:	b7 01       	movw	r22, r14
    135e:	80 e3       	ldi	r24, 0x30	; 48
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	7c d1       	rcall	.+760    	; 0x165c <fputc>
    1364:	5a 94       	dec	r5
    1366:	f8 cf       	rjmp	.-16     	; 0x1358 <vfprintf+0x33e>
    1368:	aa 94       	dec	r10
    136a:	f4 01       	movw	r30, r8
    136c:	ea 0d       	add	r30, r10
    136e:	f1 1d       	adc	r31, r1
    1370:	80 81       	ld	r24, Z
    1372:	b7 01       	movw	r22, r14
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	72 d1       	rcall	.+740    	; 0x165c <fputc>
    1378:	a1 10       	cpse	r10, r1
    137a:	f6 cf       	rjmp	.-20     	; 0x1368 <vfprintf+0x34e>
    137c:	33 20       	and	r3, r3
    137e:	09 f4       	brne	.+2      	; 0x1382 <vfprintf+0x368>
    1380:	5d ce       	rjmp	.-838    	; 0x103c <vfprintf+0x22>
    1382:	b7 01       	movw	r22, r14
    1384:	80 e2       	ldi	r24, 0x20	; 32
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	69 d1       	rcall	.+722    	; 0x165c <fputc>
    138a:	3a 94       	dec	r3
    138c:	f7 cf       	rjmp	.-18     	; 0x137c <vfprintf+0x362>
    138e:	f7 01       	movw	r30, r14
    1390:	86 81       	ldd	r24, Z+6	; 0x06
    1392:	97 81       	ldd	r25, Z+7	; 0x07
    1394:	02 c0       	rjmp	.+4      	; 0x139a <vfprintf+0x380>
    1396:	8f ef       	ldi	r24, 0xFF	; 255
    1398:	9f ef       	ldi	r25, 0xFF	; 255
    139a:	2c 96       	adiw	r28, 0x0c	; 12
    139c:	e2 e1       	ldi	r30, 0x12	; 18
    139e:	0a c2       	rjmp	.+1044   	; 0x17b4 <__epilogue_restores__>

000013a0 <calloc>:
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	86 9f       	mul	r24, r22
    13aa:	80 01       	movw	r16, r0
    13ac:	87 9f       	mul	r24, r23
    13ae:	10 0d       	add	r17, r0
    13b0:	96 9f       	mul	r25, r22
    13b2:	10 0d       	add	r17, r0
    13b4:	11 24       	eor	r1, r1
    13b6:	c8 01       	movw	r24, r16
    13b8:	0d d0       	rcall	.+26     	; 0x13d4 <malloc>
    13ba:	ec 01       	movw	r28, r24
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	21 f0       	breq	.+8      	; 0x13c8 <calloc+0x28>
    13c0:	a8 01       	movw	r20, r16
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	38 d1       	rcall	.+624    	; 0x1638 <memset>
    13c8:	ce 01       	movw	r24, r28
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	08 95       	ret

000013d4 <malloc>:
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	91 05       	cpc	r25, r1
    13dc:	10 f4       	brcc	.+4      	; 0x13e2 <malloc+0xe>
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	e0 91 b6 01 	lds	r30, 0x01B6
    13e6:	f0 91 b7 01 	lds	r31, 0x01B7
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	a0 e0       	ldi	r26, 0x00	; 0
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	30 97       	sbiw	r30, 0x00	; 0
    13f4:	39 f1       	breq	.+78     	; 0x1444 <malloc+0x70>
    13f6:	40 81       	ld	r20, Z
    13f8:	51 81       	ldd	r21, Z+1	; 0x01
    13fa:	48 17       	cp	r20, r24
    13fc:	59 07       	cpc	r21, r25
    13fe:	b8 f0       	brcs	.+46     	; 0x142e <malloc+0x5a>
    1400:	48 17       	cp	r20, r24
    1402:	59 07       	cpc	r21, r25
    1404:	71 f4       	brne	.+28     	; 0x1422 <malloc+0x4e>
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	10 97       	sbiw	r26, 0x00	; 0
    140c:	29 f0       	breq	.+10     	; 0x1418 <malloc+0x44>
    140e:	13 96       	adiw	r26, 0x03	; 3
    1410:	9c 93       	st	X, r25
    1412:	8e 93       	st	-X, r24
    1414:	12 97       	sbiw	r26, 0x02	; 2
    1416:	2c c0       	rjmp	.+88     	; 0x1470 <malloc+0x9c>
    1418:	90 93 b7 01 	sts	0x01B7, r25
    141c:	80 93 b6 01 	sts	0x01B6, r24
    1420:	27 c0       	rjmp	.+78     	; 0x1470 <malloc+0x9c>
    1422:	21 15       	cp	r18, r1
    1424:	31 05       	cpc	r19, r1
    1426:	31 f0       	breq	.+12     	; 0x1434 <malloc+0x60>
    1428:	42 17       	cp	r20, r18
    142a:	53 07       	cpc	r21, r19
    142c:	18 f0       	brcs	.+6      	; 0x1434 <malloc+0x60>
    142e:	a9 01       	movw	r20, r18
    1430:	db 01       	movw	r26, r22
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <malloc+0x62>
    1434:	ef 01       	movw	r28, r30
    1436:	9a 01       	movw	r18, r20
    1438:	bd 01       	movw	r22, r26
    143a:	df 01       	movw	r26, r30
    143c:	02 80       	ldd	r0, Z+2	; 0x02
    143e:	f3 81       	ldd	r31, Z+3	; 0x03
    1440:	e0 2d       	mov	r30, r0
    1442:	d7 cf       	rjmp	.-82     	; 0x13f2 <malloc+0x1e>
    1444:	21 15       	cp	r18, r1
    1446:	31 05       	cpc	r19, r1
    1448:	f9 f0       	breq	.+62     	; 0x1488 <malloc+0xb4>
    144a:	28 1b       	sub	r18, r24
    144c:	39 0b       	sbc	r19, r25
    144e:	24 30       	cpi	r18, 0x04	; 4
    1450:	31 05       	cpc	r19, r1
    1452:	80 f4       	brcc	.+32     	; 0x1474 <malloc+0xa0>
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	9b 81       	ldd	r25, Y+3	; 0x03
    1458:	61 15       	cp	r22, r1
    145a:	71 05       	cpc	r23, r1
    145c:	21 f0       	breq	.+8      	; 0x1466 <malloc+0x92>
    145e:	fb 01       	movw	r30, r22
    1460:	93 83       	std	Z+3, r25	; 0x03
    1462:	82 83       	std	Z+2, r24	; 0x02
    1464:	04 c0       	rjmp	.+8      	; 0x146e <malloc+0x9a>
    1466:	90 93 b7 01 	sts	0x01B7, r25
    146a:	80 93 b6 01 	sts	0x01B6, r24
    146e:	fe 01       	movw	r30, r28
    1470:	32 96       	adiw	r30, 0x02	; 2
    1472:	44 c0       	rjmp	.+136    	; 0x14fc <malloc+0x128>
    1474:	fe 01       	movw	r30, r28
    1476:	e2 0f       	add	r30, r18
    1478:	f3 1f       	adc	r31, r19
    147a:	81 93       	st	Z+, r24
    147c:	91 93       	st	Z+, r25
    147e:	22 50       	subi	r18, 0x02	; 2
    1480:	31 09       	sbc	r19, r1
    1482:	39 83       	std	Y+1, r19	; 0x01
    1484:	28 83       	st	Y, r18
    1486:	3a c0       	rjmp	.+116    	; 0x14fc <malloc+0x128>
    1488:	20 91 b4 01 	lds	r18, 0x01B4
    148c:	30 91 b5 01 	lds	r19, 0x01B5
    1490:	23 2b       	or	r18, r19
    1492:	41 f4       	brne	.+16     	; 0x14a4 <malloc+0xd0>
    1494:	20 91 02 01 	lds	r18, 0x0102
    1498:	30 91 03 01 	lds	r19, 0x0103
    149c:	30 93 b5 01 	sts	0x01B5, r19
    14a0:	20 93 b4 01 	sts	0x01B4, r18
    14a4:	20 91 00 01 	lds	r18, 0x0100
    14a8:	30 91 01 01 	lds	r19, 0x0101
    14ac:	21 15       	cp	r18, r1
    14ae:	31 05       	cpc	r19, r1
    14b0:	41 f4       	brne	.+16     	; 0x14c2 <malloc+0xee>
    14b2:	2d b7       	in	r18, 0x3d	; 61
    14b4:	3e b7       	in	r19, 0x3e	; 62
    14b6:	40 91 04 01 	lds	r20, 0x0104
    14ba:	50 91 05 01 	lds	r21, 0x0105
    14be:	24 1b       	sub	r18, r20
    14c0:	35 0b       	sbc	r19, r21
    14c2:	e0 91 b4 01 	lds	r30, 0x01B4
    14c6:	f0 91 b5 01 	lds	r31, 0x01B5
    14ca:	e2 17       	cp	r30, r18
    14cc:	f3 07       	cpc	r31, r19
    14ce:	a0 f4       	brcc	.+40     	; 0x14f8 <malloc+0x124>
    14d0:	2e 1b       	sub	r18, r30
    14d2:	3f 0b       	sbc	r19, r31
    14d4:	28 17       	cp	r18, r24
    14d6:	39 07       	cpc	r19, r25
    14d8:	78 f0       	brcs	.+30     	; 0x14f8 <malloc+0x124>
    14da:	ac 01       	movw	r20, r24
    14dc:	4e 5f       	subi	r20, 0xFE	; 254
    14de:	5f 4f       	sbci	r21, 0xFF	; 255
    14e0:	24 17       	cp	r18, r20
    14e2:	35 07       	cpc	r19, r21
    14e4:	48 f0       	brcs	.+18     	; 0x14f8 <malloc+0x124>
    14e6:	4e 0f       	add	r20, r30
    14e8:	5f 1f       	adc	r21, r31
    14ea:	50 93 b5 01 	sts	0x01B5, r21
    14ee:	40 93 b4 01 	sts	0x01B4, r20
    14f2:	81 93       	st	Z+, r24
    14f4:	91 93       	st	Z+, r25
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <malloc+0x128>
    14f8:	e0 e0       	ldi	r30, 0x00	; 0
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	cf 01       	movw	r24, r30
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	08 95       	ret

00001504 <free>:
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	09 f4       	brne	.+2      	; 0x150e <free+0xa>
    150c:	87 c0       	rjmp	.+270    	; 0x161c <free+0x118>
    150e:	fc 01       	movw	r30, r24
    1510:	32 97       	sbiw	r30, 0x02	; 2
    1512:	13 82       	std	Z+3, r1	; 0x03
    1514:	12 82       	std	Z+2, r1	; 0x02
    1516:	c0 91 b6 01 	lds	r28, 0x01B6
    151a:	d0 91 b7 01 	lds	r29, 0x01B7
    151e:	20 97       	sbiw	r28, 0x00	; 0
    1520:	81 f4       	brne	.+32     	; 0x1542 <free+0x3e>
    1522:	20 81       	ld	r18, Z
    1524:	31 81       	ldd	r19, Z+1	; 0x01
    1526:	28 0f       	add	r18, r24
    1528:	39 1f       	adc	r19, r25
    152a:	80 91 b4 01 	lds	r24, 0x01B4
    152e:	90 91 b5 01 	lds	r25, 0x01B5
    1532:	82 17       	cp	r24, r18
    1534:	93 07       	cpc	r25, r19
    1536:	79 f5       	brne	.+94     	; 0x1596 <free+0x92>
    1538:	f0 93 b5 01 	sts	0x01B5, r31
    153c:	e0 93 b4 01 	sts	0x01B4, r30
    1540:	6d c0       	rjmp	.+218    	; 0x161c <free+0x118>
    1542:	de 01       	movw	r26, r28
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	ae 17       	cp	r26, r30
    154a:	bf 07       	cpc	r27, r31
    154c:	50 f4       	brcc	.+20     	; 0x1562 <free+0x5e>
    154e:	12 96       	adiw	r26, 0x02	; 2
    1550:	4d 91       	ld	r20, X+
    1552:	5c 91       	ld	r21, X
    1554:	13 97       	sbiw	r26, 0x03	; 3
    1556:	9d 01       	movw	r18, r26
    1558:	41 15       	cp	r20, r1
    155a:	51 05       	cpc	r21, r1
    155c:	09 f1       	breq	.+66     	; 0x15a0 <free+0x9c>
    155e:	da 01       	movw	r26, r20
    1560:	f3 cf       	rjmp	.-26     	; 0x1548 <free+0x44>
    1562:	b3 83       	std	Z+3, r27	; 0x03
    1564:	a2 83       	std	Z+2, r26	; 0x02
    1566:	40 81       	ld	r20, Z
    1568:	51 81       	ldd	r21, Z+1	; 0x01
    156a:	84 0f       	add	r24, r20
    156c:	95 1f       	adc	r25, r21
    156e:	8a 17       	cp	r24, r26
    1570:	9b 07       	cpc	r25, r27
    1572:	71 f4       	brne	.+28     	; 0x1590 <free+0x8c>
    1574:	8d 91       	ld	r24, X+
    1576:	9c 91       	ld	r25, X
    1578:	11 97       	sbiw	r26, 0x01	; 1
    157a:	84 0f       	add	r24, r20
    157c:	95 1f       	adc	r25, r21
    157e:	02 96       	adiw	r24, 0x02	; 2
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	80 83       	st	Z, r24
    1584:	12 96       	adiw	r26, 0x02	; 2
    1586:	8d 91       	ld	r24, X+
    1588:	9c 91       	ld	r25, X
    158a:	13 97       	sbiw	r26, 0x03	; 3
    158c:	93 83       	std	Z+3, r25	; 0x03
    158e:	82 83       	std	Z+2, r24	; 0x02
    1590:	21 15       	cp	r18, r1
    1592:	31 05       	cpc	r19, r1
    1594:	29 f4       	brne	.+10     	; 0x15a0 <free+0x9c>
    1596:	f0 93 b7 01 	sts	0x01B7, r31
    159a:	e0 93 b6 01 	sts	0x01B6, r30
    159e:	3e c0       	rjmp	.+124    	; 0x161c <free+0x118>
    15a0:	d9 01       	movw	r26, r18
    15a2:	13 96       	adiw	r26, 0x03	; 3
    15a4:	fc 93       	st	X, r31
    15a6:	ee 93       	st	-X, r30
    15a8:	12 97       	sbiw	r26, 0x02	; 2
    15aa:	4d 91       	ld	r20, X+
    15ac:	5d 91       	ld	r21, X+
    15ae:	a4 0f       	add	r26, r20
    15b0:	b5 1f       	adc	r27, r21
    15b2:	ea 17       	cp	r30, r26
    15b4:	fb 07       	cpc	r31, r27
    15b6:	79 f4       	brne	.+30     	; 0x15d6 <free+0xd2>
    15b8:	80 81       	ld	r24, Z
    15ba:	91 81       	ldd	r25, Z+1	; 0x01
    15bc:	84 0f       	add	r24, r20
    15be:	95 1f       	adc	r25, r21
    15c0:	02 96       	adiw	r24, 0x02	; 2
    15c2:	d9 01       	movw	r26, r18
    15c4:	11 96       	adiw	r26, 0x01	; 1
    15c6:	9c 93       	st	X, r25
    15c8:	8e 93       	st	-X, r24
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	13 96       	adiw	r26, 0x03	; 3
    15d0:	9c 93       	st	X, r25
    15d2:	8e 93       	st	-X, r24
    15d4:	12 97       	sbiw	r26, 0x02	; 2
    15d6:	e0 e0       	ldi	r30, 0x00	; 0
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	9b 81       	ldd	r25, Y+3	; 0x03
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	19 f0       	breq	.+6      	; 0x15e8 <free+0xe4>
    15e2:	fe 01       	movw	r30, r28
    15e4:	ec 01       	movw	r28, r24
    15e6:	f9 cf       	rjmp	.-14     	; 0x15da <free+0xd6>
    15e8:	ce 01       	movw	r24, r28
    15ea:	02 96       	adiw	r24, 0x02	; 2
    15ec:	28 81       	ld	r18, Y
    15ee:	39 81       	ldd	r19, Y+1	; 0x01
    15f0:	82 0f       	add	r24, r18
    15f2:	93 1f       	adc	r25, r19
    15f4:	20 91 b4 01 	lds	r18, 0x01B4
    15f8:	30 91 b5 01 	lds	r19, 0x01B5
    15fc:	28 17       	cp	r18, r24
    15fe:	39 07       	cpc	r19, r25
    1600:	69 f4       	brne	.+26     	; 0x161c <free+0x118>
    1602:	30 97       	sbiw	r30, 0x00	; 0
    1604:	29 f4       	brne	.+10     	; 0x1610 <free+0x10c>
    1606:	10 92 b7 01 	sts	0x01B7, r1
    160a:	10 92 b6 01 	sts	0x01B6, r1
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <free+0x110>
    1610:	13 82       	std	Z+3, r1	; 0x03
    1612:	12 82       	std	Z+2, r1	; 0x02
    1614:	d0 93 b5 01 	sts	0x01B5, r29
    1618:	c0 93 b4 01 	sts	0x01B4, r28
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	08 95       	ret

00001622 <strnlen_P>:
    1622:	fc 01       	movw	r30, r24
    1624:	05 90       	lpm	r0, Z+
    1626:	61 50       	subi	r22, 0x01	; 1
    1628:	70 40       	sbci	r23, 0x00	; 0
    162a:	01 10       	cpse	r0, r1
    162c:	d8 f7       	brcc	.-10     	; 0x1624 <strnlen_P+0x2>
    162e:	80 95       	com	r24
    1630:	90 95       	com	r25
    1632:	8e 0f       	add	r24, r30
    1634:	9f 1f       	adc	r25, r31
    1636:	08 95       	ret

00001638 <memset>:
    1638:	dc 01       	movw	r26, r24
    163a:	01 c0       	rjmp	.+2      	; 0x163e <memset+0x6>
    163c:	6d 93       	st	X+, r22
    163e:	41 50       	subi	r20, 0x01	; 1
    1640:	50 40       	sbci	r21, 0x00	; 0
    1642:	e0 f7       	brcc	.-8      	; 0x163c <memset+0x4>
    1644:	08 95       	ret

00001646 <strnlen>:
    1646:	fc 01       	movw	r30, r24
    1648:	61 50       	subi	r22, 0x01	; 1
    164a:	70 40       	sbci	r23, 0x00	; 0
    164c:	01 90       	ld	r0, Z+
    164e:	01 10       	cpse	r0, r1
    1650:	d8 f7       	brcc	.-10     	; 0x1648 <strnlen+0x2>
    1652:	80 95       	com	r24
    1654:	90 95       	com	r25
    1656:	8e 0f       	add	r24, r30
    1658:	9f 1f       	adc	r25, r31
    165a:	08 95       	ret

0000165c <fputc>:
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	18 2f       	mov	r17, r24
    1666:	09 2f       	mov	r16, r25
    1668:	eb 01       	movw	r28, r22
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	81 fd       	sbrc	r24, 1
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <fputc+0x1a>
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	9f ef       	ldi	r25, 0xFF	; 255
    1674:	20 c0       	rjmp	.+64     	; 0x16b6 <fputc+0x5a>
    1676:	82 ff       	sbrs	r24, 2
    1678:	10 c0       	rjmp	.+32     	; 0x169a <fputc+0x3e>
    167a:	4e 81       	ldd	r20, Y+6	; 0x06
    167c:	5f 81       	ldd	r21, Y+7	; 0x07
    167e:	2c 81       	ldd	r18, Y+4	; 0x04
    1680:	3d 81       	ldd	r19, Y+5	; 0x05
    1682:	42 17       	cp	r20, r18
    1684:	53 07       	cpc	r21, r19
    1686:	7c f4       	brge	.+30     	; 0x16a6 <fputc+0x4a>
    1688:	e8 81       	ld	r30, Y
    168a:	f9 81       	ldd	r31, Y+1	; 0x01
    168c:	9f 01       	movw	r18, r30
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	39 83       	std	Y+1, r19	; 0x01
    1694:	28 83       	st	Y, r18
    1696:	10 83       	st	Z, r17
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <fputc+0x4a>
    169a:	e8 85       	ldd	r30, Y+8	; 0x08
    169c:	f9 85       	ldd	r31, Y+9	; 0x09
    169e:	81 2f       	mov	r24, r17
    16a0:	09 95       	icall
    16a2:	89 2b       	or	r24, r25
    16a4:	29 f7       	brne	.-54     	; 0x1670 <fputc+0x14>
    16a6:	2e 81       	ldd	r18, Y+6	; 0x06
    16a8:	3f 81       	ldd	r19, Y+7	; 0x07
    16aa:	2f 5f       	subi	r18, 0xFF	; 255
    16ac:	3f 4f       	sbci	r19, 0xFF	; 255
    16ae:	3f 83       	std	Y+7, r19	; 0x07
    16b0:	2e 83       	std	Y+6, r18	; 0x06
    16b2:	81 2f       	mov	r24, r17
    16b4:	90 2f       	mov	r25, r16
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	08 95       	ret

000016c0 <__ultoa_invert>:
    16c0:	fa 01       	movw	r30, r20
    16c2:	aa 27       	eor	r26, r26
    16c4:	28 30       	cpi	r18, 0x08	; 8
    16c6:	51 f1       	breq	.+84     	; 0x171c <__ultoa_invert+0x5c>
    16c8:	20 31       	cpi	r18, 0x10	; 16
    16ca:	81 f1       	breq	.+96     	; 0x172c <__ultoa_invert+0x6c>
    16cc:	e8 94       	clt
    16ce:	6f 93       	push	r22
    16d0:	6e 7f       	andi	r22, 0xFE	; 254
    16d2:	6e 5f       	subi	r22, 0xFE	; 254
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	8f 4f       	sbci	r24, 0xFF	; 255
    16d8:	9f 4f       	sbci	r25, 0xFF	; 255
    16da:	af 4f       	sbci	r26, 0xFF	; 255
    16dc:	b1 e0       	ldi	r27, 0x01	; 1
    16de:	3e d0       	rcall	.+124    	; 0x175c <__ultoa_invert+0x9c>
    16e0:	b4 e0       	ldi	r27, 0x04	; 4
    16e2:	3c d0       	rcall	.+120    	; 0x175c <__ultoa_invert+0x9c>
    16e4:	67 0f       	add	r22, r23
    16e6:	78 1f       	adc	r23, r24
    16e8:	89 1f       	adc	r24, r25
    16ea:	9a 1f       	adc	r25, r26
    16ec:	a1 1d       	adc	r26, r1
    16ee:	68 0f       	add	r22, r24
    16f0:	79 1f       	adc	r23, r25
    16f2:	8a 1f       	adc	r24, r26
    16f4:	91 1d       	adc	r25, r1
    16f6:	a1 1d       	adc	r26, r1
    16f8:	6a 0f       	add	r22, r26
    16fa:	71 1d       	adc	r23, r1
    16fc:	81 1d       	adc	r24, r1
    16fe:	91 1d       	adc	r25, r1
    1700:	a1 1d       	adc	r26, r1
    1702:	20 d0       	rcall	.+64     	; 0x1744 <__ultoa_invert+0x84>
    1704:	09 f4       	brne	.+2      	; 0x1708 <__ultoa_invert+0x48>
    1706:	68 94       	set
    1708:	3f 91       	pop	r19
    170a:	2a e0       	ldi	r18, 0x0A	; 10
    170c:	26 9f       	mul	r18, r22
    170e:	11 24       	eor	r1, r1
    1710:	30 19       	sub	r19, r0
    1712:	30 5d       	subi	r19, 0xD0	; 208
    1714:	31 93       	st	Z+, r19
    1716:	de f6       	brtc	.-74     	; 0x16ce <__ultoa_invert+0xe>
    1718:	cf 01       	movw	r24, r30
    171a:	08 95       	ret
    171c:	46 2f       	mov	r20, r22
    171e:	47 70       	andi	r20, 0x07	; 7
    1720:	40 5d       	subi	r20, 0xD0	; 208
    1722:	41 93       	st	Z+, r20
    1724:	b3 e0       	ldi	r27, 0x03	; 3
    1726:	0f d0       	rcall	.+30     	; 0x1746 <__ultoa_invert+0x86>
    1728:	c9 f7       	brne	.-14     	; 0x171c <__ultoa_invert+0x5c>
    172a:	f6 cf       	rjmp	.-20     	; 0x1718 <__ultoa_invert+0x58>
    172c:	46 2f       	mov	r20, r22
    172e:	4f 70       	andi	r20, 0x0F	; 15
    1730:	40 5d       	subi	r20, 0xD0	; 208
    1732:	4a 33       	cpi	r20, 0x3A	; 58
    1734:	18 f0       	brcs	.+6      	; 0x173c <__ultoa_invert+0x7c>
    1736:	49 5d       	subi	r20, 0xD9	; 217
    1738:	31 fd       	sbrc	r19, 1
    173a:	40 52       	subi	r20, 0x20	; 32
    173c:	41 93       	st	Z+, r20
    173e:	02 d0       	rcall	.+4      	; 0x1744 <__ultoa_invert+0x84>
    1740:	a9 f7       	brne	.-22     	; 0x172c <__ultoa_invert+0x6c>
    1742:	ea cf       	rjmp	.-44     	; 0x1718 <__ultoa_invert+0x58>
    1744:	b4 e0       	ldi	r27, 0x04	; 4
    1746:	a6 95       	lsr	r26
    1748:	97 95       	ror	r25
    174a:	87 95       	ror	r24
    174c:	77 95       	ror	r23
    174e:	67 95       	ror	r22
    1750:	ba 95       	dec	r27
    1752:	c9 f7       	brne	.-14     	; 0x1746 <__ultoa_invert+0x86>
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	61 05       	cpc	r22, r1
    1758:	71 05       	cpc	r23, r1
    175a:	08 95       	ret
    175c:	9b 01       	movw	r18, r22
    175e:	ac 01       	movw	r20, r24
    1760:	0a 2e       	mov	r0, r26
    1762:	06 94       	lsr	r0
    1764:	57 95       	ror	r21
    1766:	47 95       	ror	r20
    1768:	37 95       	ror	r19
    176a:	27 95       	ror	r18
    176c:	ba 95       	dec	r27
    176e:	c9 f7       	brne	.-14     	; 0x1762 <__ultoa_invert+0xa2>
    1770:	62 0f       	add	r22, r18
    1772:	73 1f       	adc	r23, r19
    1774:	84 1f       	adc	r24, r20
    1776:	95 1f       	adc	r25, r21
    1778:	a0 1d       	adc	r26, r0
    177a:	08 95       	ret

0000177c <__prologue_saves__>:
    177c:	2f 92       	push	r2
    177e:	3f 92       	push	r3
    1780:	4f 92       	push	r4
    1782:	5f 92       	push	r5
    1784:	6f 92       	push	r6
    1786:	7f 92       	push	r7
    1788:	8f 92       	push	r8
    178a:	9f 92       	push	r9
    178c:	af 92       	push	r10
    178e:	bf 92       	push	r11
    1790:	cf 92       	push	r12
    1792:	df 92       	push	r13
    1794:	ef 92       	push	r14
    1796:	ff 92       	push	r15
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	ca 1b       	sub	r28, r26
    17a6:	db 0b       	sbc	r29, r27
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	09 94       	ijmp

000017b4 <__epilogue_restores__>:
    17b4:	2a 88       	ldd	r2, Y+18	; 0x12
    17b6:	39 88       	ldd	r3, Y+17	; 0x11
    17b8:	48 88       	ldd	r4, Y+16	; 0x10
    17ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    17bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    17be:	7d 84       	ldd	r7, Y+13	; 0x0d
    17c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    17c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    17c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    17c6:	b9 84       	ldd	r11, Y+9	; 0x09
    17c8:	c8 84       	ldd	r12, Y+8	; 0x08
    17ca:	df 80       	ldd	r13, Y+7	; 0x07
    17cc:	ee 80       	ldd	r14, Y+6	; 0x06
    17ce:	fd 80       	ldd	r15, Y+5	; 0x05
    17d0:	0c 81       	ldd	r16, Y+4	; 0x04
    17d2:	1b 81       	ldd	r17, Y+3	; 0x03
    17d4:	aa 81       	ldd	r26, Y+2	; 0x02
    17d6:	b9 81       	ldd	r27, Y+1	; 0x01
    17d8:	ce 0f       	add	r28, r30
    17da:	d1 1d       	adc	r29, r1
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	ed 01       	movw	r28, r26
    17e8:	08 95       	ret

000017ea <_exit>:
    17ea:	f8 94       	cli

000017ec <__stop_program>:
    17ec:	ff cf       	rjmp	.-2      	; 0x17ec <__stop_program>
